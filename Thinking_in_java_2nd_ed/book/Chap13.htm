<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<!--
This document was converted from RTF source: 
By rtftohtml 4.19
See http://www.sunpack.com/RTF
Filename:TIJ2.rtf
Application Directory:C:\TOOLS\RTF2HTML\
Subject:
Author:Bruce Eckel
Operator:Bruce Eckel
Document Comments:
Version Comments:
Comments:
Keywords:
Translation Date:05/21/2001
Translation Time:10:39:22
Translation Platform:Win32
Number of Output files:23
This File:Chap13.htm
SplitDepth=1
SkipNavPanel=1
SkipLeadingToc=1
SkipTrailingToc=1
GenContents=1
GenFrames=1
GenIndex=1
-->
<HEAD lang="en"><META http-equiv="Content-Type" content="text/html">
<TITLE>13: Creating Windows  &amp; Applets</TITLE>
</HEAD>

<BODY  BGCOLOR="#FFFFFF"><DIV ALIGN="CENTER">
  <a href="http://www.MindView.net">
  <img src="mindview.gif" alt="MindView Inc." BORDER = "0"></a>
  <CENTER>
    <FONT FACE="Verdana" size = "-1">
    [ <a href="README.txt">Viewing Hints</a> ]
    [ <a href="RevHist.htm">Revision History</a> ]
    [ <a href="http://www.mindview.net/Books/TIJ/">Book Home Page</a> ]
    [ <a href="http://www.mindview.net/Etc/MailingList.html">Free Newsletter</a> ] <br>
    [ <a href="http://www.mindview.net/Seminars">Seminars</a> ]
    [ <a href="http://www.mindview.net/CDs">Seminars on CD ROM</a> ]
    [ <a href="http://www.mindview.net/Services">Consulting</a> ]
    </FONT>
  <H2><FONT FACE="Verdana">
  Thinking in Java, 2nd edition, Revision 12</FONT></H2>
  <H3><FONT FACE="Verdana">&copy;2000 by Bruce Eckel</FONT></H3>
  
    <FONT FACE="Verdana" size = "-1">
     [ <a href="Chap12.htm">Previous Chapter</a> ] 
    [ <a href="SimpCont.htm">Short TOC</a> ] 
    [ <a href="Contents.htm">Table of Contents</a> ] 
    [ <a href="DocIdx.htm">Index</a> ]
     [ <a href="Chap14.htm">Next Chapter</a> ] 
    </FONT>
    
  </CENTER>
  </P></DIV><A NAME="Chapter_14"></A><A NAME="Chapter_15"></A><A NAME="_Toc375545444"></A><A NAME="_Toc477690733"></A><A NAME="_Toc481064781"></A><A NAME="Heading414"></A><FONT FACE = "Verdana"><H1 ALIGN="LEFT">
13: Creating Windows <BR>&amp; Applets</H1></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia" SIZE=4><backtalk:display ID=TIJ3_CHAPTER13_I0>
A
fundamental design guideline is &#8220;make simple things easy, and difficult
things possible.&#8221;</FONT><SUP><FONT FACE="Georgia" SIZE=2>
</FONT></SUP><A NAME="fnB61" HREF="#fn61">[61]</A><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The original design goal of the graphical
user interface (GUI) library in Java 1.0 was to allow the programmer to build a
GUI that looks good on all platforms.
<A NAME="Index1546"></A><A NAME="Index1547"></A><A NAME="Index1548"></A>That
goal was not achieved. Instead, the Java 1.0<A NAME="Index1549"></A>
<A NAME="Index1550"></A><I>Abstract Window Toolkit</I> (AWT) produces a GUI that
looks equally mediocre on all systems. In addition, it&#8217;s restrictive: you
can use only four fonts and you cannot access any of the more sophisticated GUI
elements that exist in your operating system. The Java 1.0 AWT programming model
is also awkward and non-object-oriented. A student in one of my seminars (who
had been at Sun during the creation of Java) explained why: the original AWT had
been conceptualized, designed, and implemented in a month. Certainly a marvel of
productivity, and also an object lesson in why design is important.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I0' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I1>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The situation improved with the Java 1.1
AWT event model, which takes a much clearer, object-oriented approach, along
with the addition of JavaBeans, a component programming model that is oriented
toward the easy creation of visual programming environments. Java 2 finishes the
transformation away from the old Java 1.0 AWT by essentially replacing
everything with the <A NAME="Index1551"></A><A NAME="Index1552"></A><I>Java
Foundation Classes</I> (JFC), the GUI portion of which is called
&#8220;<A NAME="Index1553"></A>Swing.&#8221; These are a rich set of
easy-to-use, easy-to-understand JavaBeans that can be dragged and dropped (as
well as hand programmed) to create a GUI that you can (finally) be satisfied
with. The &#8220;revision 3&#8221; rule of the software industry (a product
isn&#8217;t good until revision 3) seems to hold true with programming languages
as well. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I1' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I2>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This chapter does not cover anything but
the modern, Java 2 Swing library, and makes the reasonable assumption that Swing
is the final destination GUI library for Java. If for some reason you need to
use the original &#8220;old&#8221; AWT (because you&#8217;re supporting old code
or you have browser limitations), you can find that introduction in the first
edition of this book, downloadable at <I>www.BruceEckel.com</I> (also included
on the CD ROM bound with this book).

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I2' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I3>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Early in this chapter, you&#8217;ll see
how things are different when you want to create an applet vs. a regular
application using Swing, and how to create programs that are both applets and
applications so they can be run either inside a browser or from the command
line. Almost all the GUI examples in this book will be executable as either
applets or applications. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I3' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I4>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Please be aware that this is not a
comprehensive glossary of either all the Swing components, or all the methods
for the described classes. What you see here is intended to be simple. The Swing
library is vast, and the goal of this chapter is only to get you started with
the essentials and comfortable with the concepts. If you need to do more, then
Swing can probably give you what you want if you&#8217;re willing to do the
research.  
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I4' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I5>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">I assume here that you have downloaded
and installed the (free) Java library documents in HTML format from
<I>java.sun.com</I> and will browse the <B>javax.swing</B> classes in that
documentation to see the full details and methods of the Swing library. Because
of the simplicity of the Swing design, this will often be enough information to
solve your problem. There are numerous (rather thick) books dedicated solely to
Swing and you&#8217;ll want to go to those if you need more depth, or if you
want to modify the default Swing behavior.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I5' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I6>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">As you learn about Swing you&#8217;ll
discover: <A NAME="Index1554"></A><A NAME="Index1555"></A>

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I6' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I7>
</FONT><BR></P></DIV>
<OL>
<LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Swing is a much better
programming model than you&#8217;ve probably seen in other languages and
development environments. JavaBeans (which will be introduced toward the end of
this chapter) is the framework for that library.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I7' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I8>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">&#8220;GUI
builders&#8221; (visual programming environments) are a <I>de rigueur</I> aspect
of a complete Java development environment. JavaBeans and Swing allow the GUI
builder to write code for you as you place components onto forms using graphical
tools. This not only rapidly speeds development during GUI building, but it
allows for greater experimentation and thus the ability to try out more designs
and presumably come up with a better one.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I8' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I9>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">The
simplicity and well-designed nature of Swing means that even if you do use a GUI
builder rather than coding by hand, the resulting code will still be
comprehensible&#8212;this solves a big problem with GUI builders from the past,
which could easily generate unreadable code.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I9' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I10>
</FONT></OL><DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Swing
contains all the components that you expect to see in a modern UI, everything
from buttons that contain pictures to trees and tables. It&#8217;s a big
library, but it&#8217;s designed to have appropriate complexity for the task at
hand&#8212;if something is simple, you don&#8217;t have to write much code but
as you try to do more complex things, your code becomes proportionally more
complex. This means an easy entry point, but you&#8217;ve got the power if you
need it. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I10' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I11>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Much of what you&#8217;ll like about
Swing could be called &#8220;orthogonality of use.&#8221; That is, once you pick
up the general ideas about the library you can apply them everywhere. Primarily
because of the standard naming conventions, much of the time that I was writing
these examples I could guess at the method names and get it right the first
time, without looking anything up. This is certainly the hallmark of a good
library design. In addition, you can generally plug components into other
components and things will work correctly.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I11' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I12>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">For speed, all the
<A NAME="Index1556"></A>components are &#8220;lightweight,&#8221; and Swing is
written entirely in Java for portability.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I12' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I13>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><A NAME="Index1557"></A><A NAME="Index1558"></A><FONT FACE="Georgia">Keyboard
navigation is automatic&#8212;you can run a Swing application without using the
mouse, and this doesn&#8217;t require any extra programming. Scrolling support
is effortless&#8212;you simply wrap your component in a <B>JScrollPane</B> as
you add it to your form. Features such as tool tips typically require a single
line of code to use. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I13' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I14>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Swing also supports a rather radical
feature called &#8220;pluggable look and feel,&#8221; which means that the
appearance of the UI can be dynamically changed to suit the expectations of
users working under different platforms and operating systems. It&#8217;s even
possible (albeit difficult) to invent your own look and feel.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I14' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I15>
</FONT><A NAME="_Toc375545446"></A><A NAME="_Toc481064782"></A><BR></P></DIV>
<A NAME="Heading415"></A><FONT FACE = "Verdana"><H2 ALIGN="LEFT">
The basic applet<BR><A NAME="Index1559"></A></H2></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">One of Java&#8217;s design goals is to
create <I>applets</I>, which are little programs that run inside a Web browser.
Because they must be safe, applets are limited in what they can accomplish.
However, applets are a powerful tool that support client-side programming, a
major issue for the Web.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I15' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I16>
</FONT><A NAME="_Toc375545464"></A><A NAME="_Toc481064783"></A><BR></P></DIV>
<A NAME="Heading416"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Applet
restrictions<BR><A NAME="Index1560"></A><A NAME="Index1561"></A><A NAME="Index1562"></A></H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Programming within an applet is so
restrictive that it&#8217;s often referred to as being &#8220;inside the
sandbox,&#8221; since you always have someone&#8212;that is, the Java run-time
security system&#8212;watching over you. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I16' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I17>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">However, you can also step outside the
sandbox and write regular applications rather than applets, in which case you
can access the other features of your OS. We&#8217;ve been writing regular
applications all along in this book, but they&#8217;ve been <I>console
applications</I> without any graphical components. Swing can also be used to
build GUI interfaces for regular applications.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I17' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I18>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You can generally answer the question of
what an applet is able to do by looking at what it is <I>supposed</I> to do:
extend the functionality of a Web page in a browser. Since, as a Net surfer, you
never really know if a Web page is from a friendly place or not, you want any
code that it runs to be safe. So the biggest restrictions you&#8217;ll notice
are probably: <A NAME="Index1563"></A>

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I18' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I19>
</FONT><BR></P></DIV>
<OL>
<LI><FONT FACE="Verdana"><I>	</I></FONT><FONT FACE="Georgia"><I>An applet
can&#8217;t touch the local disk</I>. This means writing <I>or</I> reading,
since you wouldn&#8217;t want an applet to read and transmit private information
over the Internet without your permission. Writing is prevented, of course,
since that would be an open invitation to a virus. Java offers <I>digital
signing</I> for applets. Many applet restrictions are relaxed when you choose to
allow <I>trusted applets</I> (those signed by a trusted source) to have access
to your machine.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I19' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I20>
</FONT><LI><FONT FACE="Verdana"><I>	</I></FONT><FONT FACE="Georgia"><I>Applets
can take longer to display, </I>since you must download the whole thing every
time, including a separate server hit for each different class. Your browser can
cache the applet, but there are no guarantees. Because of this, you should
always package your applets in a JAR (Java ARchive) file that combines all the
applet components (including other <B>.class</B> files as well as images and
sounds) together into a single compressed file that can be downloaded in a
single server transaction. &#8220;Digital signing&#8221; is available for each
individual entry in the JAR file.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I20' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I21>
</FONT><A NAME="_Toc375545465"></A><A NAME="_Toc481064784"></A></OL><A NAME="Heading417"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Applet advantages</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">If you can live within the restrictions,
applets have definite advantages, especially when building
<A NAME="Index1564"></A>client/server or other networked applications:
<A NAME="Index1565"></A><A NAME="Index1566"></A>

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I21' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I22>
</FONT><BR></P></DIV>
<OL>
<LI><FONT FACE="Verdana"><I>	</I></FONT><FONT FACE="Georgia"><I>There is no
installation issue.</I> An applet has true platform independence (including the
ability to easily play audio files, etc.) so you don&#8217;t need to make any
changes in your code for different platforms nor does anyone have to perform any
&#8220;tweaking&#8221; on installation. In fact, installation is automatic every
time the user loads the Web page that contains applets, so updates happen
silently and automatically. In traditional client/server systems, building and
installing a new version of the client software is often a nightmare.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I22' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I23>
</FONT><LI><FONT FACE="Verdana"><I>	</I></FONT><FONT FACE="Georgia"><I>You
don&#8217;t have to worry about bad code causing damage to someone&#8217;s
system,</I> because of the security built into the core Java language and applet
structure. This, along with the previous point, makes Java popular for so-called
<I>intranet</I> client/server applications that live only within a company or
restricted arena of operation where the user environment (Web browser and
add-ins) can be specified and/or controlled.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I23' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I24>
</FONT></OL><DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Because
applets are automatically integrated with HTML, you have a built-in
platform-independent documentation system to support the applet. It&#8217;s an
interesting twist, since we&#8217;re used to having the documentation part of
the program rather than vice versa.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I24' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I25>
</FONT><A NAME="_Toc481064785"></A><BR></P></DIV>
<A NAME="Heading418"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Application frameworks</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Libraries are often grouped according to
their functionality. Some libraries, for example, are used as is, off the shelf.
The standard Java library <B>String</B> and <B>ArrayList</B> classes are
examples of these. Other libraries are designed specifically as building blocks
to create other classes. A certain category of library is the
<A NAME="Index1567"></A><A NAME="Index1568"></A><I>application framework</I>,
whose goal is to help you build applications by providing a class or set of
classes that produces the basic behavior that you need in every application of a
particular type. Then, to customize the behavior to your own needs, you inherit
from the application class and override the methods of interest. The application
framework&#8217;s default control mechanism will call your overridden methods at
the appropriate time. An application framework is a good example of
&#8220;separating the things that change from the things that stay the
same,&#8221; since it attempts to localize all the unique parts of a program in
the overridden
methods</FONT><A NAME="fnB62" HREF="#fn62">[62]</A><FONT FACE="Georgia">.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I25' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I26>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Applets are built using an application
framework. You inherit from class <B>JApplet</B> and override the appropriate
methods. There are a few methods that control the creation and execution of an
applet on a Web page: </FONT><BR></P></DIV>
<DIV ALIGN="CENTER"><TABLE BORDER>
<TR VALIGN="TOP">
<TH WIDTH=72 COLSPAN=1 ROWSPAN=1 VALIGN="TOP">
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>Method</B></FONT><BR></P></DIV>
</TH>
<TH WIDTH=288 COLSPAN=1 ROWSPAN=1 VALIGN="TOP">
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>Operation</B></FONT><BR></P></DIV>
</TH>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>init(&#160;)</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Automatically called to perform
first-time initialization of the applet, including component layout.
You&#8217;ll always override this method.</FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>start(&#160;)</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Called every time the applet moves into
sight on the Web browser to allow the applet to start up its normal operations
(especially those that are shut off by <B>stop(&#160;)</B>). Also called after
<B>init(&#160;)</B>.</FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>stop(&#160;)</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Called every time the applet moves out of
sight on the Web browser to allow the applet to shut off expensive operations.
Also called right before <B>destroy(&#160;)</B>.</FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>destroy(&#160;)</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Called when the applet is being unloaded
from the page to perform final release of resources when the applet is no longer
used</FONT><BR></P></DIV>
</TD>
</TR>
</TABLE></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">With this information you are ready to
create a simple applet:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:Applet1.java</font>
<font color=#009900>// Very simple applet.</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Applet1 <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    getContentPane().add(<font color=#0000ff>new</font> JLabel(<font color=#004488>"Applet!"</font>));
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Note that applets are not required to
have a <B>main(&#160;)</B>. That&#8217;s all wired into the application
framework; you put any startup code in <B>init(&#160;)</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I26' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I27>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">In this program, the only activity is
putting a text label on the applet, via the
<A NAME="Index1569"></A><B>JLabel</B> class (the old AWT appropriated the name
<B>Label</B> as well as other names of components, so you will often see a
leading &#8220;<B>J</B>&#8221; used with Swing components). The constructor for
this class takes a <B>String</B> and uses it to create the label. In the above
program this label is placed on the form.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I27' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I28>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><A NAME="Index1570"></A><FONT FACE="Georgia">The
<B>init(&#160;)</B> method is responsible for putting all the components on the
form using the <B>add(&#160;)</B> method. You might think that you ought to be
able to simply call <B>add(&#160;)</B> by itself, and in fact that&#8217;s the
way it used to be in the old AWT. However, Swing requires you to add all
components to the &#8220;content pane&#8221; of a form, and so you must call
<B>getContentPane(&#160;)</B> as part of the <B>add(&#160;)</B> process.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I28' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I29>
</FONT><A NAME="_Toc481064786"></A><BR></P></DIV>
<A NAME="Heading419"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Running applets inside a Web browser</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">To run this program you must place it
inside a Web page and view that page inside your Java-enabled Web browser. To
place an <A NAME="Index1571"></A><A NAME="Index1572"></A>applet inside a Web
page you put a special tag inside the HTML source for that Web
page</FONT><A NAME="fnB63" HREF="#fn63">[63]</A><FONT FACE="Georgia"> to tell
the page how to load and run the applet. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I29' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I30>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This process used to be very simple, when
Java itself was simple and everyone was on the same bandwagon and incorporated
the same Java support inside their Web browsers. Then you might have been able
to get away with a very simple bit of HTML inside your Web page, like
this:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>&lt;applet code=Applet1 width=100 height=50&gt;
&lt;/applet&gt;</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Then along came the browser and language
wars, and we (programmers and end users alike) lost. After awhile, JavaSoft
realized that we could no longer expect browsers to support the correct flavor
of Java, and the only solution was to provide some kind of add-on that would
conform to a browser&#8217;s extension mechanism. By using the extension
mechanism (which a browser vendor cannot disable&#8212;in an attempt to gain
competitive advantage&#8212;without breaking all the third-party extensions),
JavaSoft guarantees that Java cannot be shut out of the Web browser by an
antagonistic vendor. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I30' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I31>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">With Internet Explorer, the extension
mechanism is the ActiveX control, and with Netscape it is the plug-in. In your
HTML code, you must provide tags to support both. Here&#8217;s what the simplest
resulting HTML page looks like for
<B>Applet1</B>:</FONT><A NAME="fnB64" HREF="#fn64">[64]</A><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>//:! c13:Applet1.html
&lt;html&gt;&lt;head&gt;&lt;title&gt;Applet1&lt;/title&gt;&lt;/head&gt;&lt;hr&gt;
&lt;OBJECT 
  classid="clsid:8AD9C840-044E-11D1-B3E9-00805F499D93"
  width="100" height="50" align="baseline"  codebase="http://java.sun.com/products/plugin/1.2.2/jinstall-1_2_2-win.cab#Version=1,2,2,0"&gt;
&lt;PARAM NAME="code" VALUE="Applet1.class"&gt;
&lt;PARAM NAME="codebase" VALUE="."&gt;
&lt;PARAM NAME="type" VALUE="application/x-java-applet;version=1.2.2"&gt;
&lt;COMMENT&gt;
  &lt;EMBED type=
    "application/x-java-applet;version=1.2.2" 
    width="200" height="200" align="baseline"
    code="Applet1.class" codebase="."
pluginspage="http://java.sun.com/products/plugin/1.2/plugin-install.html"&gt;
  &lt;NOEMBED&gt;
&lt;/COMMENT&gt;
   No Java 2 support for APPLET!!
  &lt;/NOEMBED&gt;
&lt;/EMBED&gt;
&lt;/OBJECT&gt;
&lt;hr&gt;&lt;/body&gt;&lt;/html&gt;
///:~</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Some of these lines were too long and had
to be wrapped to fit on the page. The code in this book&#8217;s source code (on
the book&#8217;s CD ROM, and downloadable from <I>www.BruceEckel.com</I>) will
work without having to worry about correcting line wraps.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I31' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I32>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The <B>code </B>value gives the name of
the <B>.class </B>file where the applet resides. The <B>width</B> and
<B>height</B> specify the initial size of the applet (in pixels, as before).
There are other items you can place within the applet tag: a place to find other
<B>.class </B>files on the Internet
(<A NAME="Index1573"></A><A NAME="Index1574"></A><B>codebase</B>), alignment
information (<A NAME="Index1575"></A><A NAME="Index1576"></A><B>align</B>), a
special identifier that makes it possible for applets to communicate with each
other (<A NAME="Index1577"></A><A NAME="Index1578"></A><B>name</B>), and applet
<A NAME="Index1579"></A><A NAME="Index1580"></A>parameters to provide
information that the applet can retrieve. Parameters are in the
form:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>&lt;param name=<font color=#004488>"identifier"</font> value = <font color=#004488>"information"</font>&gt;</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">and there can be as many as you want.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I32' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I33>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The source code package for this book
provides an HTML page for each of the applets in this book, and thus many
examples of the applet tag. You can find a full and current description of the
details of placing applets in Web pages at <I>java.sun.com</I>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I33' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I34>
</FONT><A NAME="_Toc481064787"></A><BR></P></DIV>
<A NAME="Heading420"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Using Appletviewer</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Sun&#8217;s JDK (freely downloadable from
<I>java.sun.com</I>) contains a tool called the
<A NAME="Index1581"></A><I>Appletviewer</I> that picks the <B>&lt;applet&gt;</B>
tags out of the HTML file and runs the applets without displaying the
surrounding HTML text. Because the Appletviewer ignores everything but APPLET
tags, you can put those tags in the Java source file as
comments:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>// &lt;applet code=MyApplet width=200 height=100&gt;</font>
<font color=#009900>// &lt;/applet&gt;</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This way, you can run
&#8220;<B>appletviewer MyApplet.java</B>&#8221; and you don&#8217;t need to
create tiny HTML files to run tests. For example, you can add the commented HTML
tags to <B>Applet1.java</B>:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:Applet1b.java</font>
<font color=#009900>// Embedding the applet tag for Appletviewer.</font>
<font color=#009900>// &lt;applet code=Applet1b width=100 height=50&gt;</font>
<font color=#009900>// &lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Applet1b <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    getContentPane().add(<font color=#0000ff>new</font> JLabel(<font color=#004488>"Applet!"</font>));
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Now you can invoke the applet with the
command</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>appletviewer Applet1b.java</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">In this book, this form will be used for
easy testing of applets. Shortly, you&#8217;ll see another coding approach which
will allow you to execute applets from the command line without the
Appletviewer.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I34' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I35>
</FONT><A NAME="_Toc481064788"></A><BR></P></DIV>
<A NAME="Heading421"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Testing applets</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You can perform a simple test without any
network connection by starting up your Web browser and opening the HTML file
containing the applet tag. As the HTML file is loaded, the browser will discover
the applet tag and go hunt for the <B>.class</B> file specified by the
<B>code</B> value. Of course, it looks at the CLASSPATH to find out where to
hunt, and if your <B>.class</B> file isn&#8217;t in the CLASSPATH then it will
give an error message on the status line of the browser to the effect that it
couldn&#8217;t find that <B>.class</B> file.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I35' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I36>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">When you want to try this out on your Web
site things are a little more complicated. First of all, you must <I>have</I> a
Web site, which for most people means a third-party
<A NAME="Index1582"></A><A NAME="Index1583"></A>Internet Service Provider (ISP)
at a remote location. Since the applet is just a file or set of files, the ISP
does not have to provide any special support for Java. You must also have a way
to move the HTML files and the <B>.class</B> files from your site to the correct
directory on the ISP machine. This is typically done with a
<A NAME="Index1584"></A><A NAME="Index1585"></A>File Transfer Protocol (FTP)
program, of which there are many different types available for free or as
shareware. So it would seem that all you need to do is move the files to the ISP
machine with FTP, then connect to the site and HTML file using your browser; if
the applet comes up and works, then everything checks out, right?

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I36' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I37>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Here&#8217;s where you can get fooled. If
the browser on the client machine cannot locate the <B>.class</B> file on the
server, it will hunt through the
<A NAME="Index1586"></A><A NAME="Index1587"></A>CLASSPATH on your <I>local</I>
machine. Thus, the applet might not be loading properly from the server, but to
you it looks fine during your testing process because the browser finds it on
your machine. When someone else connects, however, his or her browser
can&#8217;t find it. So when you&#8217;re testing, make sure you erase the
relevant <B>.class</B> files (or <B>.jar </B>file) on your local machine to
verify that they exist in the proper location on the server.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I37' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I38>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">One of the most insidious places where
this happened to me is when I innocently placed an applet inside a
<B>package</B>. After uploading the HTML file and applet, it turned out that the
server path to the applet was confused because of the package name. However, my
browser found it in the local CLASSPATH. So I was the only one who could
properly load the applet. It took some time to discover that the <B>package</B>
statement was the culprit. In general, you&#8217;ll want to leave the
<A NAME="Index1588"></A><A NAME="Index1589"></A><B>package</B> statement out of
an applet.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I38' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I39>
</FONT><A NAME="_Toc481064789"></A><BR></P></DIV>
<A NAME="Heading422"></A><FONT FACE = "Verdana"><H2 ALIGN="LEFT">
Running applets from the command
line<BR><A NAME="Index1590"></A><A NAME="Index1591"></A></H2></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">There are times when you&#8217;d like to
make a windowed program do something else other than sit on a Web page. Perhaps
you&#8217;d also like it to do some of the things a &#8220;regular&#8221;
application can do but still have the vaunted instant portability provided by
Java. In previous chapters in this book we&#8217;ve made command-line
applications, but in some operating environments (the Macintosh, for example)
there isn&#8217;t a command line. So for any number of reasons you&#8217;d like
to build a windowed, non-applet program using Java. This is certainly a
reasonable desire. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I39' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I40>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The Swing library allows you to make an
application that preserves the look and feel of the underlying operating
environment. If you want to build windowed applications, it makes sense to do
so</FONT><A NAME="fnB65" HREF="#fn65">[65]</A><FONT FACE="Georgia"> only if you
can use the latest version of Java and associated tools so you can deliver
applications that won&#8217;t confound your users. If for some reason
you&#8217;re forced to use an older version of Java, think hard before
committing to building a significant windowed application.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I40' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I41>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><A NAME="Index1592"></A><A NAME="Index1593"></A><FONT FACE="Georgia">Often
you&#8217;ll want to be able to create a class that can be invoked as either a
window or an applet. This is especially convenient when you&#8217;re testing the
applets, since it&#8217;s typically much faster and easier to run the resulting
applet-application from the command line than it is to start up a Web browser or
the Appletviewer. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I41' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I42>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">To create an applet that can be run from
the console command line, you simply add a <B>main(&#160;)</B> to your applet
that builds an instance of the applet inside a
<B>JFrame</B>.</FONT><A NAME="fnB66" HREF="#fn66">[66]</A><FONT FACE="Georgia">
As a simple example, let&#8217;s look at <B>Applet1b.java</B> modified to work
as both an application and an applet:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:Applet1c.java</font>
<font color=#009900>// An application and an applet.</font>
<font color=#009900>// &lt;applet code=Applet1c width=100 height=50&gt;</font>
<font color=#009900>// &lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Applet1c <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    getContentPane().add(<font color=#0000ff>new</font> JLabel(<font color=#004488>"Applet!"</font>));
  }
  <font color=#009900>// A main() for the application:</font>
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    JApplet applet = <font color=#0000ff>new</font> Applet1c();
    JFrame frame = <font color=#0000ff>new</font> JFrame(<font color=#004488>"Applet1c"</font>);
    <font color=#009900>// To close the application:</font>
    Console.setupClosing(frame);
    frame.getContentPane().add(applet);
    frame.setSize(100,50);
    applet.init();
    applet.start();
    frame.setVisible(<font color=#0000ff>true</font>);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>main(&#160;)</B> is the only element
added to the applet, and the rest of the applet is untouched. The applet is
created and added to a <B>JFrame</B> so that it can be displayed. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I42' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I43>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The line:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>Console.setupClosing(frame);</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Causes the window to be properly closed.
<B>Console</B> comes from <B>com.bruceeckel.swing</B> and will be explained a
little later. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I43' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I44>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You can see that in <B>main(&#160;)</B>,
the applet is explicitly initialized and started since in this case the browser
isn&#8217;t available to do it for you. Of course, this doesn&#8217;t provide
the full behavior of the browser, which also calls <B>stop(&#160;)</B> and
<B>destroy(&#160;)</B>, but for most situations it&#8217;s acceptable. If
it&#8217;s a problem, you can force the calls
yourself.</FONT><A NAME="fnB67" HREF="#fn67">[67]</A><FONT FACE="Georgia">

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I44' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I45>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Notice the last line:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>frame.setVisible(<font color=#0000ff>true</font>);</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Without this, you won&#8217;t see
anything on the screen.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I45' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I46>
</FONT><A NAME="_Toc481064790"></A><BR></P></DIV>
<A NAME="Heading423"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
A display framework<BR><A NAME="Index1594"></A><A NAME="Index1595"></A></H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Although the code that turns programs
into both applets and applications produces valuable results, if used everywhere
it becomes distracting and wastes paper. Instead, the following display
framework will be used for the Swing examples in the rest of this
book:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: com:bruceeckel:swing:Console.java</font>
<font color=#009900>// Tool for running Swing demos from the</font>
<font color=#009900>// console, both applets and JFrames.</font>
<font color=#0000ff>package</font> com.bruceeckel.swing;
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.event.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Console {
  <font color=#009900>// Create a title string from the class name:</font>
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> String title(Object o) {
    String t = o.getClass().toString();
    <font color=#009900>// Remove the word "class":</font>
    <font color=#0000ff>if</font>(t.indexOf(<font color=#004488>"class"</font>) != -1)
      t = t.substring(6);
    <font color=#0000ff>return</font> t;
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> setupClosing(JFrame frame) {
    <font color=#009900>// The JDK 1.2 Solution as an </font>
    <font color=#009900>// anonymous inner class:</font>
    frame.addWindowListener(<font color=#0000ff>new</font> WindowAdapter() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> windowClosing(WindowEvent e) {
        System.exit(0);
      }
    });
    <font color=#009900>// The improved solution in JDK 1.3:</font>
    <font color=#009900>// frame.setDefaultCloseOperation(</font>
    <font color=#009900>//     EXIT_ON_CLOSE);</font>
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> 
  run(JFrame frame, <font color=#0000ff>int</font> width, <font color=#0000ff>int</font> height) {
    setupClosing(frame);
    frame.setSize(width, height);
    frame.setVisible(<font color=#0000ff>true</font>);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> 
  run(JApplet applet, <font color=#0000ff>int</font> width, <font color=#0000ff>int</font> height) {
    JFrame frame = <font color=#0000ff>new</font> JFrame(title(applet));
    setupClosing(frame);
    frame.getContentPane().add(applet);
    frame.setSize(width, height);
    applet.init();
    applet.start();
    frame.setVisible(<font color=#0000ff>true</font>);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> 
  run(JPanel panel, <font color=#0000ff>int</font> width, <font color=#0000ff>int</font> height) {
    JFrame frame = <font color=#0000ff>new</font> JFrame(title(panel));
    setupClosing(frame);
    frame.getContentPane().add(panel);
    frame.setSize(width, height);
    frame.setVisible(<font color=#0000ff>true</font>);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This is a tool you may want to use
yourself, so it&#8217;s placed in the library
<A NAME="Index1596"></A><B>com.bruceeckel.swing</B>. The <B>Console</B> class
consists entirely of <B>static</B> methods. The first is used to extract the
class name (using RTTI) from any object and to remove the word
&#8220;class,&#8221; which is typically prepended by <B>getClass(&#160;)</B>.
This uses the <B>String</B> methods <B>indexOf(&#160;)</B> to determine whether
the word &#8220;class&#8221; is there, and <B>substring(&#160;)</B> to produce
the new string without &#8220;class&#8221; or the trailing space. This name is
used to label the window that is displayed by the <B>run(&#160;)</B> methods.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I46' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I47>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>setupClosing(&#160;)</B> is used to
hide the code that causes a <B>JFrame</B> to exit a program when that
<B>JFrame</B> is closed. The default behavior is to do nothing, so if you
don&#8217;t call <B>setupClosing(&#160;)</B> or write the equivalent code for
your <A NAME="Index1597"></A><B>JFrame</B>, the application won&#8217;t close.
The reason this code is hidden rather than placing it directly in the subsequent
<B>run(&#160;)</B> methods is partly because it allows you to use the method by
itself when what you want to do is more complicated than what <B>run(&#160;)</B>
provides. However, it also isolates a change factor: Java 2 has two ways of
causing certain types of windows to close. In JDK 1.2, the solution is to create
a new <A NAME="Index1598"></A><B>WindowAdapter</B> class and implement
<A NAME="Index1599"></A><B>windowClosing(&#160;)</B>, as seen above (the meaning
of this will be fully explained later in this chapter). However, during the
creation of JDK 1.3 the library designers observed that you typically need to
close windows whenever you&#8217;re creating a non-applet, and so they added the
<A NAME="Index1600"></A><B>setDefaultCloseOperation(&#160;)</B> to <B>JFrame</B>
and <B>JDialog</B>. From the standpoint of writing code, the new method is much
nicer to use but this book was written while there was still no JDK 1.3
implemented on Linux and other platforms, so in the interest of cross-version
portability the change was isolated inside <B>setupClosing(&#160;)</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I47' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I48>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The <B>run(&#160;)</B> method is
overloaded to work with <B>JApplet</B>s, <B>JPanel</B>s, and <B>JFrame</B>s.
Note that only if it&#8217;s a <B>JApplet</B> are <B>init(&#160;)</B> and
<B>start(&#160;)</B> called.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I48' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I49>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Now any applet can be run from the
console by creating a <B>main(&#160;)</B> containing a line like
this:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>Console.run(<font color=#0000ff>new</font> MyClass(), 500, 300);</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">in which the last two arguments are the
display width and height. Here&#8217;s <B>Applet1c.java</B> modified to use
<B>Console</B>:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:Applet1d.java</font>
<font color=#009900>// Console runs applets from the command line.</font>
<font color=#009900>// &lt;applet code=Applet1d width=100 height=50&gt;</font>
<font color=#009900>// &lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Applet1d <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    getContentPane().add(<font color=#0000ff>new</font> JLabel(<font color=#004488>"Applet!"</font>));
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> Applet1d(), 100, 50);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This allows the elimination of repeated
code while providing the greatest flexibility in running the examples.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I49' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I50>
</FONT><A NAME="_Toc481064791"></A><BR></P></DIV>
<A NAME="Heading424"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Using the Windows Explorer</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">If you&#8217;re using Windows, you can
simplify the process of running a command-line Java program by configuring the
<A NAME="Index1601"></A><A NAME="Index1602"></A>Windows Explorer&#8212;the file
browser in Windows, <I>not</I> the Internet Explorer&#8212;so that you can
simply double-click on a <B>.class</B> file to execute it. There are several
steps in this process. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I50' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I51>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">First, download and install the
<A NAME="Index1603"></A>Perl programming language from <I>www.Perl.org</I>.
You&#8217;ll find the instructions and language documentation on that site.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I51' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I52>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Next, create the following script without
the first and last lines (this script is part of this book&#8217;s source-code
package):</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//:! c13:RunJava.bat</font>
@rem = '--*-Perl-*--
@echo off
perl -x -S <font color=#004488>"%0"</font> %1 %2 %3 %4 %5 %6 %7 %8 %9
<font color=#0000ff>goto</font> endofperl
@rem ';
#!perl
$file = $ARGV[0];
$file =~ s/(.*)\..*/\1/;
$file =~ s/(.*\\)*(.*)/$+/;
&#180;java $file&#180;;
__END__
:endofperl
<font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Now, open the Windows Explorer, select
&#8220;View,&#8221; &#8220;Folder Options,&#8221; then click on the &#8220;File
Types&#8221; tab. Press the &#8220;New Type&#8221; button. For
&#8220;Description of Type&#8221; enter &#8220;Java class file.&#8221; For
&#8220;Associated Extension,&#8221; enter &#8220;class.&#8221; Under
&#8220;Actions&#8221; press the &#8220;New&#8221; button. For
&#8220;Action&#8221; enter &#8220;Open,&#8221; and for &#8220;Application used
to perform action&#8221; enter a line like this:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#004488>"c:\aaa\Perl\RunJava.bat"</font> <font color=#004488>"%L"</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You must customize the path before
&#8220;RunJava.bat&#8221; to conform to the location where you placed the batch
file. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I52' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I53>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Once you perform this installation, you
may run any Java program by simply double-clicking on the <B>.class</B> file
containing a <B>main(&#160;)</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I53' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I54>
</FONT><A NAME="_Toc375545447"></A><A NAME="_Toc481064792"></A><BR></P></DIV>
<A NAME="Heading425"></A><FONT FACE = "Verdana"><H2 ALIGN="LEFT">
Making a button<BR><A NAME="Index1604"></A><A NAME="Index1605"></A></H2></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Making a button is quite simple: you just
call the <B>JButton</B> constructor with the label you want on the button.
You&#8217;ll see later that you can do fancier things, like putting graphic
images on buttons. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I54' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I55>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Usually you&#8217;ll want to create a
field for the button inside your class so that you can refer to it later.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I55' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I56>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The <B>JButton</B> is a
component&#8212;its own little window&#8212;that will automatically get
repainted as part of an update. This means that you don&#8217;t explicitly paint
a button or any other kind of control; you simply place them on the form and let
them automatically take care of painting themselves. So to place a button on a
form, you do it inside <B>init(&#160;)</B>:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:Button1.java</font>
<font color=#009900>// Putting buttons on an applet.</font>
<font color=#009900>// &lt;applet code=Button1 width=200 height=50&gt;</font>
<font color=#009900>// &lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Button1 <font color=#0000ff>extends</font> JApplet {
  JButton 
    b1 = <font color=#0000ff>new</font> JButton(<font color=#004488>"Button 1"</font>), 
    b2 = <font color=#0000ff>new</font> JButton(<font color=#004488>"Button 2"</font>);
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    cp.add(b1);
    cp.add(b2);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> Button1(), 200, 50);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Something new has been added here: before
any elements are placed on the content pane, it is given a new &#8220;layout
manager,&#8221; of type <B>FlowLayout</B>. The layout manager is the way that
the pane implicitly decides where to place the control on the form. The normal
behavior of an applet is to use the <B>BorderLayout</B>, but that won&#8217;t
work here because (as you will learn later in this chapter when controlling the
layout of a form is examined in more detail) it defaults to covering each
control entirely with every new one that is added. However, <B>FlowLayout</B>
causes the controls to flow evenly onto the form, left to right and top to
bottom.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I56' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I57>
</FONT><A NAME="_Toc375545448"></A><A NAME="_Toc481064793"></A><BR></P></DIV>
<A NAME="Heading426"></A><FONT FACE = "Verdana"><H2 ALIGN="LEFT">
Capturing an event<BR><A NAME="Index1606"></A></H2></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You&#8217;ll notice that if you compile
and run the applet above, nothing happens when you press the buttons. This is
where you must step in and write some code to determine what will happen. The
basis of <A NAME="Index1607"></A><A NAME="Index1608"></A>event-driven
programming, which comprises a lot of what a GUI is about, is tying events to
code that responds to those events.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I57' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I58>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The way that this is accomplished in
Swing is by cleanly separating the interface (the graphical components) and the
implementation (the code that you want to run when an event happens to a
component). Each Swing component can report all the events that might happen to
it, and it can report each kind of event individually. So if you&#8217;re not
interested in, for example, whether the mouse is being moved over your button,
you don&#8217;t register your interest in that event. It&#8217;s a very
straightforward and elegant way to handle event-driven programming, and once you
understand the basic concepts you can easily use Swing components that you
haven&#8217;t seen before&#8212;in fact, this model extends to anything that can
be classified as a JavaBean (which you&#8217;ll learn about later in the
chapter). 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I58' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I59>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">At first, we will just focus on the main
event of interest for the components being used. In the case of a
<B>JButton</B>, this &#8220;event of interest&#8221; is that the button is
pressed.<B> </B>To register your interest in when a button is pressed, you call
the <B>JButton</B>&#8217;s <B>addActionListener(&#160;)</B> method. This method
expects an argument that is an object that implements the <B>ActionListener</B>
interface, which contains a single method called <B>actionPerformed(&#160;)</B>.
So all you have to do to attach code to a <B>JButton</B> is to implement the
<B>ActionListener</B> interface in a class, and register an object of that class
with the <B>JButton</B> via <B>addActionListener(&#160;)</B>. The method will be
called when the button is pressed (this is normally referred to as a
<A NAME="Index1609"></A><I>callback</I>).

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I59' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I60>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">But what should the result of pressing
that button be? We&#8217;d like to see something change on the screen, so a new
Swing component will be introduced: the
<A NAME="Index1610"></A><B>JTextField</B>. This is a place where text can be
typed, or in this case modified by the program. Although there are a number of
ways to create a <B>JTextField</B>, the simplest is just to tell the constructor
how wide you want that field to be. Once the <B>JTextField</B> is placed on the
form, you can modify its contents by using the <B>setText(&#160;)</B> method
(there are many other methods in <B>JTextField</B>, but you must look these up
in the HTML documentation for the JDK from <I>java.sun.com</I>). Here is what it
looks like:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:Button2.java</font>
<font color=#009900>// Responding to button presses.</font>
<font color=#009900>// &lt;applet code=Button2 width=200 height=75&gt;</font>
<font color=#009900>// &lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Button2 <font color=#0000ff>extends</font> JApplet {
  JButton 
    b1 = <font color=#0000ff>new</font> JButton(<font color=#004488>"Button 1"</font>), 
    b2 = <font color=#0000ff>new</font> JButton(<font color=#004488>"Button 2"</font>);
  JTextField txt = <font color=#0000ff>new</font> JTextField(10);
  <font color=#0000ff>class</font> BL <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e){
      String name = 
        ((JButton)e.getSource()).getText();
      txt.setText(name);
    }
  }
  BL al = <font color=#0000ff>new</font> BL();
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    b1.addActionListener(al);
    b2.addActionListener(al);
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    cp.add(b1);
    cp.add(b2);
    cp.add(txt);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> Button2(), 200, 75);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Creating a <B>JTextField</B> and placing
it on the canvas takes the same steps as for <B>JButton</B>s, or for any Swing
component. The difference in the above program is in the creation of the
aforementioned <B>ActionListener</B> class <B>BL</B>. The argument to
<B>actionPerformed(&#160;)</B> is of type <B>ActionEvent</B>, which contains all
the information about the event and where it came from. In this case, I wanted
to describe the button that was pressed: <B>getSource(&#160;)</B> produces the
object where the event originated, and I assumed that is a <B>JButton</B>.
<B>getText(&#160;)</B> returns the text that&#8217;s on the button, and this is
placed in the <B>JTextField</B> to prove that the code was actually called when
the button was pressed. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I60' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I61>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">In <B>init(&#160;)</B>,
<B>addActionListener(&#160;)</B> is used to register the <B>BL</B> object with
both the buttons. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I61' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I62>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">It is often more convenient to code the
<B>ActionListener</B> as an
<A NAME="Index1611"></A><A NAME="Index1612"></A><A NAME="Index1613"></A>anonymous
inner class, especially since you tend to only use a single instance of each
listener class. <B>Button2.java</B> can be modified to use an anonymous inner
class as follows: 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I62' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I63>
</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:Button2b.java</font>
<font color=#009900>// Using anonymous inner classes.</font>
<font color=#009900>// &lt;applet code=Button2b width=200 height=75&gt;</font>
<font color=#009900>// &lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Button2b <font color=#0000ff>extends</font> JApplet {
  JButton 
    b1 = <font color=#0000ff>new</font> JButton(<font color=#004488>"Button 1"</font>), 
    b2 = <font color=#0000ff>new</font> JButton(<font color=#004488>"Button 2"</font>);
  JTextField txt = <font color=#0000ff>new</font> JTextField(10);
  ActionListener al = <font color=#0000ff>new</font> ActionListener() {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e){
      String name = 
        ((JButton)e.getSource()).getText();
      txt.setText(name);
    }
  };
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    b1.addActionListener(al);
    b2.addActionListener(al);
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    cp.add(b1);
    cp.add(b2);
    cp.add(txt);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> Button2b(), 200, 75);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The approach of using an anonymous inner
class will be preferred (when possible) for the examples in this book.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I63' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I64>
</FONT><A NAME="_Toc375545450"></A><A NAME="_Toc481064794"></A><BR></P></DIV>
<A NAME="Heading427"></A><FONT FACE = "Verdana"><H2 ALIGN="LEFT">
Text areas</H2></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">A
<A NAME="Index1614"></A><B>JTextArea</B> is like a <B>JTextField</B> except that
it can have multiple lines and has more functionality. A particularly useful
method is <B>append(&#160;)</B>; with this you can easily pour output into the
<B>JTextArea</B>, thus making a Swing program an improvement (since you can
scroll backward) over what has been accomplished thus far using command-line
programs that print to standard output. As an example, the following program
fills a <B>JTextArea</B> with the output from the <B>geography</B> generator in
Chapter 9:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:TextArea.java</font>
<font color=#009900>// Using the JTextArea control.</font>
<font color=#009900>// &lt;applet code=TextArea width=475 height=425&gt;</font>
<font color=#009900>// &lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.util.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;
<font color=#0000ff>import</font> com.bruceeckel.util.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> TextArea <font color=#0000ff>extends</font> JApplet {
  JButton 
    b = <font color=#0000ff>new</font> JButton(<font color=#004488>"Add Data"</font>),
    c = <font color=#0000ff>new</font> JButton(<font color=#004488>"Clear Data"</font>);
  JTextArea t = <font color=#0000ff>new</font> JTextArea(20, 40);
  Map m = <font color=#0000ff>new</font> HashMap();
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    <font color=#009900>// Use up all the data:</font>
    Collections2.fill(m, 
      Collections2.geography, 
      CountryCapitals.pairs.length);
    b.addActionListener(<font color=#0000ff>new</font> ActionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e){
        <font color=#0000ff>for</font>(Iterator it= m.entrySet().iterator();
            it.hasNext();){
          Map.Entry me = (Map.Entry)(it.next());
          t.append(me.getKey() + <font color=#004488>": "</font> 
            + me.getValue() + <font color=#004488>"\n"</font>);
        }
      }
    });
    c.addActionListener(<font color=#0000ff>new</font> ActionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e){
        t.setText(<font color=#004488>""</font>);
      }
    });
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    cp.add(<font color=#0000ff>new</font> JScrollPane(t));
    cp.add(b);
    cp.add(c);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> TextArea(), 475, 425);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">In <B>init(&#160;)</B>, the <B>Map</B> is
filled with all the countries and their capitals. Note that for both buttons the
<A NAME="Index1615"></A><B>ActionListener</B> is created and added without
defining an intermediate variable, since you never need to refer to that
listener again during the program. The &#8220;Add Data&#8221; button formats and
appends all the data, while the &#8220;Clear Data&#8221; button uses
<B>setText(&#160;)</B> to remove all the text from the <B>JTextArea</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I64' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I65>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">As the <B>JTextArea</B> is added to the
applet, it is wrapped in a
<A NAME="Index1616"></A><A NAME="Index1617"></A><B>JScrollPane</B>, to control
scrolling when too much text is placed on the screen. That&#8217;s all you must
do in order to produce full scrolling capabilities. Having tried to figure out
how to do the equivalent in some other GUI programming environments, I am very
impressed with the simplicity and good design of components like
<B>JScrollPane</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I65' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I66>
</FONT><A NAME="_Toc481064795"></A><BR></P></DIV>
<A NAME="Heading428"></A><FONT FACE = "Verdana"><H2 ALIGN="LEFT">
Controlling layout<BR><A NAME="Index1618"></A></H2></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The way that you place components on a
form in Java is probably different from any other GUI system you&#8217;ve used.
First, it&#8217;s all code; there are no &#8220;resources&#8221; that control
placement of components. Second, the way components are placed on a form is
controlled not by absolute positioning but by a &#8220;layout manager&#8221;
that decides how the components lie based on the order that you
<B>add(&#160;)</B> them. The size, shape, and placement of components will be
remarkably different from one layout manager to another. In addition, the layout
managers adapt to the dimensions of your applet or application window, so if the
window dimension is changed, the size, shape, and placement of the components
can change in response. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I66' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I67>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><A NAME="Index1619"></A><A NAME="Index1620"></A><FONT FACE="Georgia"><B>JApplet</B>,
<B>JFrame JWindow</B>, and <B>JDialog</B> can all produce a <B>Container
</B>with <B>getContentPane(&#160;) </B>that can contain and display
<B>Component</B>s. In <B>Container,</B> there&#8217;s a method called
<A NAME="Index1621"></A><B>setLayout(&#160;)</B> that allows you to choose a
different layout manager. Other classes, such as
<A NAME="Index1622"></A><B>JPanel</B>, contain and display components directly
and so you also set the layout manager directly, without using the content pane.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I67' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I68>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">In this section we&#8217;ll explore the
various layout managers by placing buttons in them (since that&#8217;s the
simplest thing to do). There won&#8217;t be any capturing of button events since
these examples are just intended to show how the buttons are laid out.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I68' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I69>
</FONT><A NAME="_Toc375545458"></A><A NAME="_Toc375545459"></A><A NAME="_Toc481064796"></A><BR></P></DIV>
<A NAME="Heading429"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
BorderLayout</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The applet uses a default layout scheme:
the <A NAME="Index1623"></A><B>BorderLayout</B> (a number of the previous
example have changed the layout manager to <B>FlowLayout</B>). Without any other
instruction, this takes whatever you <B>add(&#160;) </B>to it and places it in
the center, stretching the object all the way out to the edges. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I69' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I70>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">However, there&#8217;s more to the
<B>BorderLayout</B>. This layout manager has the concept of four border regions
and a center area. When you add something to a panel that&#8217;s using a
<B>BorderLayout</B> you can use the overloaded <B>add(&#160;)</B> method that
takes a constant value as its first argument. This value can be any of the
following:<B>
<A NAME="Index1624"></A><A NAME="Index1625"></A><A NAME="Index1626"></A><A NAME="Index1627"></A></B></FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>BorderLayout. NORTH
</B>(top)</FONT><BR><FONT FACE="Georgia"><B>BorderLayout. SOUTH</B>
(bottom)</FONT><BR><FONT FACE="Georgia"><B>BorderLayout. EAST</B>
(right)</FONT><BR><FONT FACE="Georgia"><B>BorderLayout. WEST</B>
(left)</FONT><BR><FONT FACE="Georgia"><B>BorderLayout.CENTER</B> (fill the
middle, up to the other components or to the edges)

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I70' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I71>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">If you don&#8217;t specify an area to
place the object, it defaults to <B>CENTER</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I71' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I72>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Here&#8217;s a simple example. The
default layout is used, since <B>JApplet</B> defaults to
<B>BorderLayout</B>:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:BorderLayout1.java</font>
<font color=#009900>// Demonstrates BorderLayout.</font>
<font color=#009900>// &lt;applet code=BorderLayout1 </font>
<font color=#009900>// width=300 height=250&gt; &lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> BorderLayout1 <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    cp.add(BorderLayout.NORTH, 
      <font color=#0000ff>new</font> JButton(<font color=#004488>"North"</font>));
    cp.add(BorderLayout.SOUTH, 
      <font color=#0000ff>new</font> JButton(<font color=#004488>"South"</font>));
    cp.add(BorderLayout.EAST, 
      <font color=#0000ff>new</font> JButton(<font color=#004488>"East"</font>));
    cp.add(BorderLayout.WEST, 
      <font color=#0000ff>new</font> JButton(<font color=#004488>"West"</font>));
    cp.add(BorderLayout.CENTER, 
      <font color=#0000ff>new</font> JButton(<font color=#004488>"Center"</font>));
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> BorderLayout1(), 300, 250);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">For every placement but <B>CENTER</B>,
the element that you add is compressed to fit in the smallest amount of space
along one dimension while it is stretched to the maximum along the other
dimension. <B>CENTER</B>, however, spreads out in both dimensions to occupy the
middle.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I72' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I73>
</FONT><A NAME="_Toc481064797"></A><BR></P></DIV>
<A NAME="Heading430"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
FlowLayout<BR><A NAME="Index1628"></A></H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This simply &#8220;flows&#8221; the
components onto the form, from left to right until the top space is full, then
moves down a row and continues flowing.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I73' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I74>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Here&#8217;s an example that sets the
layout manager to <B>FlowLayout</B> and then places buttons on the form.
You&#8217;ll notice that with <B>FlowLayout</B> the components take on their
&#8220;natural&#8221; size. A <B>JButton</B>, for example, will be the size of
its string.  
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I74' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I75>
</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:FlowLayout1.java</font>
<font color=#009900>// Demonstrates FlowLayout.</font>
<font color=#009900>// &lt;applet code=FlowLayout1 </font>
<font color=#009900>// width=300 height=250&gt; &lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> FlowLayout1 <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; 20; i++)
      cp.add(<font color=#0000ff>new</font> JButton(<font color=#004488>"Button "</font> + i));
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> FlowLayout1(), 300, 250);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">All components will be compacted to their
smallest size in a <B>FlowLayout</B>, so you might get a little bit of
surprising behavior. For example, because a <B>JLabel</B> will be the size of
its string, attempting to right-justify its text yields an unchanged display
when using <B>FlowLayout</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I75' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I76>
</FONT><A NAME="_Toc375545460"></A><A NAME="_Toc481064798"></A><BR></P></DIV>
<A NAME="Heading431"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
GridLayout</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">A
<A NAME="Index1629"></A><B>GridLayout</B> allows you to build a table of
components, and as you add them they are placed left-to-right and top-to-bottom
in the grid. In the constructor you specify the number of rows and columns that
you need and these are laid out in equal proportions.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I76' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I77>
</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:GridLayout1.java</font>
<font color=#009900>// Demonstrates GridLayout.</font>
<font color=#009900>// &lt;applet code=GridLayout1 </font>
<font color=#009900>// width=300 height=250&gt; &lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> GridLayout1 <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> GridLayout(7,3));
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; 20; i++)
      cp.add(<font color=#0000ff>new</font> JButton(<font color=#004488>"Button "</font> + i));
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> GridLayout1(), 300, 250);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">In this case there are 21 slots but only
20 buttons. The last slot is left empty because no &#8220;balancing&#8221; goes
on with a <B>GridLayout</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I77' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I78>
</FONT><A NAME="_Toc375545462"></A><A NAME="_Toc481064799"></A><BR></P></DIV>
<A NAME="Heading432"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
GridBagLayout</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The
<A NAME="Index1630"></A><B>GridBagLayout </B>provides you with tremendous
control in deciding exactly how the regions of your window will lay themselves
out and reformat themselves when the window is resized. However, it&#8217;s also
the most complicated layout manager, and quite difficult to understand. It is
intended primarily for automatic code generation by a GUI builder (good GUI
builders will use <B>GridBagLayout</B> instead of absolute placement). If your
design is so complicated that you feel you need to use <B>GridBagLayout</B>,
then you should be using a GUI builder tool to generate that design. If you feel
you must know the intricate details, I&#8217;ll refer you to <I>Core Java 2</I>
by Horstmann &amp; Cornell (Prentice-Hall, 1999), or a dedicated Swing book, as
a starting point.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I78' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I79>
</FONT><A NAME="_Toc481064800"></A><BR></P></DIV>
<A NAME="Heading433"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Absolute positioning</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">It is also possible to set the
<A NAME="Index1631"></A>absolute position of the graphical components in this
way:</FONT><BR></P></DIV>
<OL>
<LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Set a <B>null</B> layout
manager for your <B>Container</B>: <B>setLayout(null)</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I79' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I80>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Call
<B>setBounds(&#160;)</B> or <B>reshape(&#160;)</B> (depending on the language
version) for each component, passing a bounding rectangle in pixel coordinates.
You can do this in the constructor, or in <B>paint(&#160;)</B>, depending on
what you want to achieve.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I80' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I81>
</FONT></OL><DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Some
GUI builders use this approach extensively, but this is usually not the best way
to generate code. More useful GUI builders will use <B>GridBagLayout</B>
instead.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I81' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I82>
</FONT><A NAME="_Toc481064801"></A><BR></P></DIV>
<A NAME="Heading434"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
BoxLayout<BR><A NAME="Index1632"></A></H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Because people had so much trouble
understanding and working with <B>GridBagLayout</B>, Swing also includes the
<B>BoxLayout</B>, which gives you many of the benefits of <B>GridBagLayout</B>
without the complexity, so you can often use it when you need to do hand-coded
layouts (again, if your design becomes too complex, use a GUI builder that
generates <B>GridBagLayout</B>s for you). <B>BoxLayout</B> allows you to control
the placement of components either vertically or horizontally, and to control
the space between the components using something called
&#8220;<A NAME="Index1633"></A>struts and <A NAME="Index1634"></A>glue.&#8221;
First, let&#8217;s see how to use the <B>BoxLayout</B> directly, in the same way
that the other layout managers have been demonstrated:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:BoxLayout1.java</font>
<font color=#009900>// Vertical and horizontal BoxLayouts.</font>
<font color=#009900>// &lt;applet code=BoxLayout1 </font>
<font color=#009900>// width=450 height=200&gt; &lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> BoxLayout1 <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    JPanel jpv = <font color=#0000ff>new</font> JPanel();
    jpv.setLayout(
      <font color=#0000ff>new</font> BoxLayout(jpv, BoxLayout.Y_AXIS));
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; 5; i++)
      jpv.add(<font color=#0000ff>new</font> JButton(<font color=#004488>""</font> + i));
    JPanel jph = <font color=#0000ff>new</font> JPanel();
    jph.setLayout(
      <font color=#0000ff>new</font> BoxLayout(jph, BoxLayout.X_AXIS));
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; 5; i++)
      jph.add(<font color=#0000ff>new</font> JButton(<font color=#004488>""</font> + i));
    Container cp = getContentPane();
    cp.add(BorderLayout.EAST, jpv);
    cp.add(BorderLayout.SOUTH, jph);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> BoxLayout1(), 450, 200);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The constructor for <B>BoxLayout</B> is a
bit different than the other layout managers&#8212;you provide the
<B>Container</B> that is to be controlled by the <B>BoxLayout</B> as the first
argument, and the direction of the layout as the second argument.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I82' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I83>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">To simplify matters, there&#8217;s a
special container called <A NAME="Index1635"></A><B>Box</B> that uses
<B>BoxLayout</B> as its native manager. The following example lays out
components horizontally and vertically using <B>Box</B>, which has two
<B>static</B> methods to create boxes with vertical and horizontal
alignment:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:Box1.java</font>
<font color=#009900>// Vertical and horizontal BoxLayouts.</font>
<font color=#009900>// &lt;applet code=Box1 </font>
<font color=#009900>// width=450 height=200&gt; &lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Box1 <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Box bv = Box.createVerticalBox();
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; 5; i++)
      bv.add(<font color=#0000ff>new</font> JButton(<font color=#004488>""</font> + i));
    Box bh = Box.createHorizontalBox();
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; 5; i++)
      bh.add(<font color=#0000ff>new</font> JButton(<font color=#004488>""</font> + i));
    Container cp = getContentPane();
    cp.add(BorderLayout.EAST, bv);
    cp.add(BorderLayout.SOUTH, bh);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> Box1(), 450, 200);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Once you have a <B>Box</B>, you pass it
as a second argument when adding components to the content pane.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I83' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I84>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Struts add space between components,
measured in pixels. To use a strut, you simply add it in between the addition of
the components that you want spaced apart:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:Box2.java</font>
<font color=#009900>// Adding struts.</font>
<font color=#009900>// &lt;applet code=Box2 </font>
<font color=#009900>// width=450 height=300&gt; &lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Box2 <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Box bv = Box.createVerticalBox();
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; 5; i++) {
      bv.add(<font color=#0000ff>new</font> JButton(<font color=#004488>""</font> + i));
      bv.add(Box.createVerticalStrut(i*10));
    }
    Box bh = Box.createHorizontalBox();
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; 5; i++) {
      bh.add(<font color=#0000ff>new</font> JButton(<font color=#004488>""</font> + i));
      bh.add(Box.createHorizontalStrut(i*10));
    }
    Container cp = getContentPane();
    cp.add(BorderLayout.EAST, bv);
    cp.add(BorderLayout.SOUTH, bh);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> Box2(), 450, 300);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Struts separate components by a fixed
amount, but glue is the opposite: it separates components by as much as
possible. Thus it&#8217;s more of a &#8220;spring&#8221; than &#8220;glue&#8221;
(and the design on which this was based was called &#8220;springs and
struts&#8221; so the choice of the term is a bit mysterious).

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I84' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I85>
</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:Box3.java</font>
<font color=#009900>// Using Glue.</font>
<font color=#009900>// &lt;applet code=Box3 </font>
<font color=#009900>// width=450 height=300&gt; &lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Box3 <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Box bv = Box.createVerticalBox();
    bv.add(<font color=#0000ff>new</font> JLabel(<font color=#004488>"Hello"</font>));
    bv.add(Box.createVerticalGlue());
    bv.add(<font color=#0000ff>new</font> JLabel(<font color=#004488>"Applet"</font>));
    bv.add(Box.createVerticalGlue());
    bv.add(<font color=#0000ff>new</font> JLabel(<font color=#004488>"World"</font>));
    Box bh = Box.createHorizontalBox();
    bh.add(<font color=#0000ff>new</font> JLabel(<font color=#004488>"Hello"</font>));
    bh.add(Box.createHorizontalGlue());
    bh.add(<font color=#0000ff>new</font> JLabel(<font color=#004488>"Applet"</font>));
    bh.add(Box.createHorizontalGlue());
    bh.add(<font color=#0000ff>new</font> JLabel(<font color=#004488>"World"</font>));
    bv.add(Box.createVerticalGlue());
    bv.add(bh);
    bv.add(Box.createVerticalGlue());
    getContentPane().add(bv);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> Box3(), 450, 300);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">A strut works in one direction, but a
rigid area fixes the spacing between components in both
directions:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:Box4.java</font>
<font color=#009900>// Rigid Areas are like pairs of struts.</font>
<font color=#009900>// &lt;applet code=Box4 </font>
<font color=#009900>// width=450 height=300&gt; &lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Box4 <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Box bv = Box.createVerticalBox();
    bv.add(<font color=#0000ff>new</font> JButton(<font color=#004488>"Top"</font>));
    bv.add(Box.createRigidArea(
      <font color=#0000ff>new</font> Dimension(120, 90)));
    bv.add(<font color=#0000ff>new</font> JButton(<font color=#004488>"Bottom"</font>));
    Box bh = Box.createHorizontalBox();
    bh.add(<font color=#0000ff>new</font> JButton(<font color=#004488>"Left"</font>));
    bh.add(Box.createRigidArea(
      <font color=#0000ff>new</font> Dimension(160, 80)));
    bh.add(<font color=#0000ff>new</font> JButton(<font color=#004488>"Right"</font>));
    bv.add(bh);
    getContentPane().add(bv);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> Box4(), 450, 300);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You should be aware that rigid areas are
a bit controversial. Since they use absolute values, some people feel that they
cause more trouble than they are worth.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I85' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I86>
</FONT><A NAME="_Toc481064802"></A><BR></P></DIV>
<A NAME="Heading435"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
The best approach?</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Swing is powerful; it can get a lot done
with a few lines of code. The examples shown in this book are reasonably simple,
and for learning purposes it makes sense to write them by hand. You can actually
accomplish quite a bit by combining simple layouts. At some point, however, it
stops making sense to hand-code GUI forms&#8212;it becomes too complicated and
is not a good use of your programming time. The Java and Swing designers
oriented the language and libraries to support GUI building tools, which have
been created for the express purpose of making your programming experience
easier. As long as you understand what&#8217;s going on with layouts and how to
deal with the events (described next), it&#8217;s not particularly important
that you actually know the details of how to lay out components by
hand&#8212;let the appropriate tool do that for you (Java is, after all,
designed to increase programmer productivity).

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I86' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I87>
</FONT><A NAME="_Toc481064803"></A><BR></P></DIV>
<A NAME="Heading436"></A><FONT FACE = "Verdana"><H2 ALIGN="LEFT">
The Swing event
model<BR><A NAME="Index1636"></A><A NAME="Index1637"></A><A NAME="Index1638"></A><A NAME="Index1639"></A><A NAME="Index1640"></A></H2></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">In the Swing event model a component can
initiate (&#8220;fire&#8221;) an event. Each type of event is represented by a
distinct class. When an event is fired, it is received by one or more
&#8220;listeners,&#8221; which act on that event. Thus, the source of an event
and the place where the event is handled can be separate. Since you typically
use Swing components as they are, but need to write code that is called when the
components receive an event, this is an excellent example of the separation of
interface and implementation.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I87' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I88>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><A NAME="Index1641"></A><A NAME="Index1642"></A><FONT FACE="Georgia">Each
event listener is an object of a class that implements a particular type of
listener <B>interface</B>. So as a programmer, all you do is create a listener
object and register it with the component that&#8217;s firing the event. This
registration is performed by calling an <B>addXXXListener(&#160;)</B> method in
the event-firing component, in which &#8220;<B>XXX</B>&#8221; represents the
type of event listened for. You can easily know what types of events can be
handled by noticing the names of the &#8220;addListener&#8221; methods, and if
you try to listen for the wrong events you&#8217;ll discover your mistake at
compile-time. You&#8217;ll see later in the chapter that JavaBeans also use the
names of the &#8220;addListener&#8221; methods to determine what events a Bean
can handle. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I88' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I89>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">All of your event logic, then, will go
inside a listener class. When you create a listener class, the sole restriction
is that it must implement the appropriate interface. You can create a global
listener class, but this is a situation in which
<A NAME="Index1643"></A><A NAME="Index1644"></A>inner classes tend to be quite
useful, not only because they provide a logical grouping of your listener
classes inside the UI or business logic classes they are serving, but because
(as you shall see later) the fact that an inner class object keeps a reference
to its parent object provides a nice way to call across class and subsystem
boundaries. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I89' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I90>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">All the examples so far in this chapter
have been using the Swing event model, but the remainder of this section will
fill out the details of that model.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I90' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I91>
</FONT><A NAME="_Toc481064804"></A><BR></P></DIV>
<A NAME="Heading437"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Event and listener types</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">All Swing components include
<B>addXXXListener(&#160;)</B> and <B>removeXXXListener(&#160;)</B> methods so
that the appropriate types of listeners can be added and removed from each
component. You&#8217;ll notice that the &#8220;<B>XXX</B>&#8221; in each case
also represents the argument for the method, for example:
<B>addMyListener(MyListener m)</B>. The following table includes the basic
associated events, listeners, and methods, along with the basic components that
support those particular events by providing the
<A NAME="Index1645"></A><B>addXXXListener(&#160;)</B> and
<A NAME="Index1646"></A><B>removeXXXListener(&#160;)</B> methods. You should
keep in mind that the event model is designed to be extensible, so you may
encounter other <A NAME="Index1647"></A><A NAME="Index1648"></A>events and
listener types that are not covered in this table.</FONT><BR></P></DIV>
<DIV ALIGN="CENTER"><TABLE BORDER>
<TR VALIGN="TOP">
<TH WIDTH=182 COLSPAN=1 ROWSPAN=1 VALIGN="TOP">
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>Event, listener interface and add- and
remove-methods</B></FONT><BR></P></DIV>
</TH>
<TH WIDTH=182 COLSPAN=1 ROWSPAN=1 VALIGN="TOP">
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>Components supporting this
event</B></FONT><BR></P></DIV>
</TH>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>ActionEvent</B></FONT><BR><FONT FACE="Georgia"><B>ActionListener</B></FONT><BR><FONT FACE="Georgia"><B>addActionListener(&#160;)</B></FONT><BR><FONT FACE="Georgia"><B>removeActionListener(&#160;)</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>JButton, JList, JTextField, JMenuItem
</B>and its derivatives<B> </B>including<B> JCheckBoxMenuItem, JMenu, </B>and<B>
JpopupMenu.</B></FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>AdjustmentEvent</B></FONT><BR><FONT FACE="Georgia"><B>AdjustmentListener</B></FONT><BR><FONT FACE="Georgia"><B>addAdjustmentListener(&#160;)</B></FONT><BR><FONT FACE="Georgia"><B>removeAdjustmentListener(&#160;)</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>JScrollbar</B></FONT><BR><FONT FACE="Georgia">and
anything you create that implements the<B> Adjustable
interface.</B></FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>ComponentEvent</B></FONT><BR><FONT FACE="Georgia"><B>ComponentListener</B></FONT><BR><FONT FACE="Georgia"><B>addComponentListener(&#160;)</B></FONT><BR><FONT FACE="Georgia"><B>removeComponentListener(&#160;)</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>*Component </B>and its derivatives,
including <B>JButton, JCanvas, JCheckBox, JComboBox, Container, JPanel, JApplet,
JScrollPane, Window, JDialog, JFileDialog, JFrame, JLabel, JList, JScrollbar,
JTextArea, </B>and<B> JTextField.</B></FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>ContainerEvent</B></FONT><BR><FONT FACE="Georgia"><B>ContainerListener</B></FONT><BR><FONT FACE="Georgia"><B>addContainerListener(&#160;)</B></FONT><BR><FONT FACE="Georgia"><B>removeContainerListener(&#160;)</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>Container </B>and its derivatives,
including<B> JPanel, JApplet, JScrollPane, Window, JDialog, JFileDialog,
</B>and<B> JFrame.</B></FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>FocusEvent</B></FONT><BR><FONT FACE="Georgia"><B>FocusListener</B></FONT><BR><FONT FACE="Georgia"><B>addFocusListener(&#160;)</B></FONT><BR><FONT FACE="Georgia"><B>removeFocusListener(&#160;)</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>Component </B>and<B>
derivatives*.</B></FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>KeyEvent</B></FONT><BR><FONT FACE="Georgia"><B>KeyListener</B></FONT><BR><FONT FACE="Georgia"><B>addKeyListener(&#160;)</B></FONT><BR><FONT FACE="Georgia"><B>removeKeyListener(&#160;)</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>Component </B>and<B>
derivatives*.</B></FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>MouseEvent </B>(for both clicks and
motion)</FONT><BR><FONT FACE="Georgia"><B>MouseListener</B></FONT><BR><FONT FACE="Georgia"><B>addMouseListener(&#160;)</B></FONT><BR><FONT FACE="Georgia"><B>removeMouseListener(&#160;)</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>Component </B>and<B> derivatives*.
</B></FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>MouseEvent</B></FONT><A NAME="fnB68" HREF="#fn68">[68]</A><FONT FACE="Georgia"><B>
</B>(for both clicks and
motion)</FONT><BR><FONT FACE="Georgia"><B>MouseMotionListener</B></FONT><BR><FONT FACE="Georgia"><B>addMouseMotionListener(&#160;)</B></FONT><BR><FONT FACE="Georgia"><B>removeMouseMotionListener(&#160;)</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>Component </B>and<B>
derivatives*.</B></FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>WindowEvent</B></FONT><BR><FONT FACE="Georgia"><B>WindowListener</B></FONT><BR><FONT FACE="Georgia"><B>addWindowListener(&#160;)</B></FONT><BR><FONT FACE="Georgia"><B>removeWindowListener(&#160;)</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>Window </B>and its derivatives,
including<B> JDialog, JFileDialog, and JFrame.</B></FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>ItemEvent</B></FONT><BR><FONT FACE="Georgia"><B>ItemListener</B></FONT><BR><FONT FACE="Georgia"><B>addItemListener(&#160;)</B></FONT><BR><FONT FACE="Georgia"><B>removeItemListener(&#160;)</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>JCheckBox, JCheckBoxMenuItem,
JComboBox, JList, </B>and anything that implements the <B>ItemSelectable
interface.</B></FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>TextEvent</B></FONT><BR><FONT FACE="Georgia"><B>TextListener</B></FONT><BR><FONT FACE="Georgia"><B>addTextListener(&#160;)</B></FONT><BR><FONT FACE="Georgia"><B>removeTextListener(&#160;)</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Anything derived from<B> JTextComponent,
</B>including<B> JTextArea </B>and<B> JTextField.</B></FONT><BR></P></DIV>
</TD>
</TR>
</TABLE></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You can see that each type of component
supports only certain types of events. It turns out to be rather difficult to
look up all the events supported by each component. A simpler approach is to
modify the <B>ShowMethodsClean.java</B> program from Chapter 12 so that it
displays all the event listeners supported by any Swing component that you
enter.</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><A NAME="Index1649"></A><FONT FACE="Georgia">Chapter 12
introduced <A NAME="Index1650"></A><I>reflection</I> and used that feature to
look up methods for a particular class&#8212;either the entire list of methods
or a subset of those whose names match a keyword that you provide. The magic of
this is that it can automatically show you <I>all</I> the methods for a class
without forcing you to walk up the inheritance hierarchy examining the base
classes at each level. Thus, it provides a valuable timesaving tool for
programming: because the names of most Java methods are made nicely verbose and
descriptive, you can search for the method names that contain a particular word
of interest. When you find what you think you&#8217;re looking for, check the
online documentation. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I91' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I92>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">However, by Chapter 12 you hadn&#8217;t
seen Swing, so the tool in that chapter was developed as a command-line
application. Here is the more useful GUI version, specialized to look for the
&#8220;addListener&#8221; methods in Swing components: </FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:ShowAddListeners.java</font>
<font color=#009900>// Display the "addXXXListener" methods of any </font>
<font color=#009900>// Swing class.</font>
<font color=#009900>// &lt;applet code = ShowAddListeners </font>
<font color=#009900>// width=500 height=400&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> javax.swing.event.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.lang.reflect.*;
<font color=#0000ff>import</font> java.io.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;
<font color=#0000ff>import</font> com.bruceeckel.util.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> ShowAddListeners <font color=#0000ff>extends</font> JApplet {
  Class cl;
  Method[] m;
  Constructor[] ctor;
  String[] n = <font color=#0000ff>new</font> String[0];
  JTextField name = <font color=#0000ff>new</font> JTextField(25);
  JTextArea results = <font color=#0000ff>new</font> JTextArea(40, 65);
  <font color=#0000ff>class</font> NameL <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      String nm = name.getText().trim();
      <font color=#0000ff>if</font>(nm.length() == 0) {
        results.setText(<font color=#004488>"No match"</font>);
        n = <font color=#0000ff>new</font> String[0];
        <font color=#0000ff>return</font>;
      }
      <font color=#0000ff>try</font> {
        cl = Class.forName(<font color=#004488>"javax.swing."</font> + nm);
      } <font color=#0000ff>catch</font>(ClassNotFoundException ex) {
        results.setText(<font color=#004488>"No match"</font>);
        <font color=#0000ff>return</font>;
      }
      m = cl.getMethods();
      <font color=#009900>// Convert to an array of Strings:</font>
      n = <font color=#0000ff>new</font> String[m.length];
      <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; m.length; i++)
        n[i] = m[i].toString();
      reDisplay();
    }
  } 
  <font color=#0000ff>void</font> reDisplay() {
    <font color=#009900>// Create the result set:</font>
    String[] rs = <font color=#0000ff>new</font> String[n.length];
    <font color=#0000ff>int</font> j = 0;
    <font color=#0000ff>for</font> (<font color=#0000ff>int</font> i = 0; i &lt; n.length; i++)
      <font color=#0000ff>if</font>(n[i].indexOf(<font color=#004488>"add"</font>) != -1 &amp;&amp;
        n[i].indexOf(<font color=#004488>"Listener"</font>) != -1)
          rs[j++] = 
            n[i].substring(n[i].indexOf(<font color=#004488>"add"</font>));
    results.setText(<font color=#004488>""</font>);
    <font color=#0000ff>for</font> (<font color=#0000ff>int</font> i = 0; i &lt; j; i++)
      results.append(
        StripQualifiers.strip(rs[i]) + <font color=#004488>"\n"</font>);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    name.addActionListener(<font color=#0000ff>new</font> NameL());
    JPanel top = <font color=#0000ff>new</font> JPanel();
    top.add(<font color=#0000ff>new</font> JLabel(
      <font color=#004488>"Swing class name (press ENTER):"</font>));
    top.add(name);
    Container cp = getContentPane();
    cp.add(BorderLayout.NORTH, top);
    cp.add(<font color=#0000ff>new</font> JScrollPane(results));
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> ShowAddListeners(), 500,400);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The <B>StripQualifiers</B> class defined
in Chapter 12 is reused here by importing the <B>com.bruceeckel.util</B>
library. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I92' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I93>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The GUI contains a<B> JTextField</B>
<B>name </B>in which you can enter the Swing class name you want to look up. The
results are displayed in a<B> JTextArea</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I93' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I94>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You&#8217;ll notice that there are no
buttons or other components by which to indicate that you want the search to
begin. That&#8217;s because the<B> JTextField</B> is monitored by an
<B>ActionListener</B>. Whenever you make a change and press ENTER, the list is
immediately updated. If the text isn&#8217;t empty, it is used inside
<A NAME="Index1651"></A><A NAME="Index1652"></A><B>Class.forName(&#160;)</B> to
try to look up the class. If the name is incorrect, <B>Class.forName(&#160;)</B>
will fail, which means that it throws an exception. This is trapped and the<B>
JTextArea</B> is set to &#8220;No match.&#8221; But if you type in a correct
name (capitalization counts), <B>Class.forName(&#160;)</B> is successful and
<B>getMethods(&#160;)</B> will return an array of <B>Method</B> objects. Each of
the objects in the array is turned into a <B>String</B> via
<B>toString(&#160;)</B> (this produces the complete method signature) and added
to <B>n</B>, a <B>String</B> array. The array <B>n</B> is a member of <B>class
ShowAddListeners</B> and is used in updating the display whenever
<B>reDisplay(&#160;)</B> is called.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I94' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I95>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>reDisplay(&#160;)</B> creates an array
of <B>String</B> called <B>rs</B> (for &#8220;result set&#8221;). The result set
is conditionally copied from the <B>String</B>s in <B>n</B> that contain
&#8220;add&#8221; and &#8220;Listener.&#8221; <B>indexOf(&#160;) </B>and
<B>substring(&#160;) </B>are then used to remove the qualifiers like
<B>public</B>, <B>static</B>, etc. Finally, <B>StripQualifiers.strip(&#160;)</B>
removes the extra name qualifiers.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I95' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I96>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This program is a convenient way to
investigate the capabilities of a Swing component. Once you know which events a
particular component supports, you don&#8217;t need to look anything up to react
to that event. You simply:</FONT><BR></P></DIV>
<OL>
<LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Take the name of the event
class and remove the word &#8220;<B>Event</B>.&#8221; Add the word
&#8220;<B>Listener</B>&#8221; to what remains. This is the listener interface
you must implement in your inner class. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I96' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I97>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Implement
the interface above and write out the methods for the events you want to
capture. For example, you might be looking for mouse movements, so you write
code for the <B>mouseMoved(&#160;)</B> method of the <B>MouseMotionListener</B>
interface. (You must implement the other methods, of course, but there&#8217;s
often a shortcut for that which you&#8217;ll see soon.)

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I97' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I98>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Create
an object of the listener class in Step 2. Register it with your component with
the method produced by prefixing &#8220;<B>add</B>&#8221; to your listener name.
For example, <B>addMouseMotionListener(&#160;)</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I98' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I99>
</FONT></OL><DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Here
are some of the <A NAME="Index1653"></A>listener interfaces: </FONT><BR></P></DIV>
<DIV ALIGN="CENTER"><TABLE BORDER>
<TR VALIGN="TOP">
<TH WIDTH=144 COLSPAN=1 ROWSPAN=1 VALIGN="TOP">
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>Listener
interface</B></FONT><BR><FONT FACE="Georgia"><B>w/ adapter</B></FONT><BR></P></DIV>
</TH>
<TH WIDTH=238 COLSPAN=1 ROWSPAN=1 VALIGN="TOP">
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>Methods in
interface</B></FONT><BR></P></DIV>
</TH>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>ActionListener</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>actionPerformed(ActionEvent)</B></FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>AdjustmentListener</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>adjustmentValueChanged(</B></FONT><BR><FONT FACE="Georgia"><B>
AdjustmentEvent)</B></FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>ComponentListener</B></FONT><BR><FONT FACE="Georgia"><B>ComponentAdapter</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>componentHidden(ComponentEvent)</B></FONT><BR><FONT FACE="Georgia"><B>componentShown(ComponentEvent)</B></FONT><BR><FONT FACE="Georgia"><B>componentMoved(ComponentEvent)</B></FONT><BR><FONT FACE="Georgia"><B>componentResized(ComponentEvent)</B></FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>ContainerListener</B></FONT><BR><FONT FACE="Georgia"><B>ContainerAdapter</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>componentAdded(ContainerEvent)</B></FONT><BR><FONT FACE="Georgia"><B>componentRemoved(ContainerEvent)</B></FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>FocusListener</B></FONT><BR><FONT FACE="Georgia"><B>FocusAdapter</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>focusGained(FocusEvent)</B></FONT><BR><FONT FACE="Georgia"><B>focusLost(FocusEvent)</B></FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>KeyListener</B></FONT><BR><FONT FACE="Georgia"><B>KeyAdapter</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>keyPressed(KeyEvent)</B></FONT><BR><FONT FACE="Georgia"><B>keyReleased(KeyEvent)</B></FONT><BR><FONT FACE="Georgia"><B>keyTyped(KeyEvent)</B></FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>MouseListener</B></FONT><BR><FONT FACE="Georgia"><B>MouseAdapter</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>mouseClicked(MouseEvent)</B></FONT><BR><FONT FACE="Georgia"><B>mouseEntered(MouseEvent)</B></FONT><BR><FONT FACE="Georgia"><B>mouseExited(MouseEvent)</B></FONT><BR><FONT FACE="Georgia"><B>mousePressed(MouseEvent)</B></FONT><BR><FONT FACE="Georgia"><B>mouseReleased(MouseEvent)</B></FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>MouseMotionListener</B></FONT><BR><FONT FACE="Georgia"><B>MouseMotionAdapter</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>mouseDragged(MouseEvent)</B></FONT><BR><FONT FACE="Georgia"><B>mouseMoved(MouseEvent)</B></FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>WindowListener</B></FONT><BR><FONT FACE="Georgia"><B>WindowAdapter</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>windowOpened(WindowEvent)</B></FONT><BR><FONT FACE="Georgia"><B>windowClosing(WindowEvent)
</B></FONT><BR><FONT FACE="Georgia"><B>windowClosed(WindowEvent)
</B></FONT><BR><FONT FACE="Georgia"><B>windowActivated(WindowEvent)
</B></FONT><BR><FONT FACE="Georgia"><B>windowDeactivated(WindowEvent)
</B></FONT><BR><FONT FACE="Georgia"><B>windowIconified(WindowEvent)
</B></FONT><BR><FONT FACE="Georgia"><B>windowDeiconified(WindowEvent)</B></FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>ItemListener</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>itemStateChanged(ItemEvent)</B></FONT><BR></P></DIV>
</TD>
</TR>
</TABLE></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This is not an exhaustive listing, partly
because the event model allows you to create your own event types and associated
listeners. Thus, you&#8217;ll regularly come across libraries that have invented
their own events, and the knowledge gained in this chapter will allow you to
figure out how to use these events.</FONT><BR></P></DIV>
<A NAME="Heading438"></A><FONT FACE = "Verdana"><H4 ALIGN="LEFT">
Using listener adapters for
simplicity<BR><A NAME="Index1654"></A><A NAME="Index1655"></A></H4></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">In the table above, you can see that some
listener interfaces have only one method. These are trivial to implement since
you&#8217;ll implement them only when you want to write that particular method.
However, the listener interfaces that have multiple methods can be less pleasant
to use. For example, something you must always do when creating an application
is provide a <B>WindowListener</B> to the <B>JFrame</B> so that when you get the
<B>windowClosing(&#160;)</B> event you can call <B>System.exit(&#160;)</B> to
exit the application. But since <B>WindowListener</B> is an <B>interface</B>,
you must implement all of the other methods even if they don&#8217;t do
anything. This can be annoying.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I99' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I100>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">To solve the problem, some (but not all)
of the listener interfaces that have more than one method are provided with
<I>adapters</I>, the names of which you can see in the table above. Each adapter
provides default empty methods for each of the interface methods. Then all you
need to do is inherit from the adapter and override only the methods you need to
change. For example, the typical <B>WindowListener</B> you&#8217;ll use looks
like this (remember that this has been wrapped inside the <B>Console</B> class
in <B>com.bruceeckel.swing</B>):</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#0000ff>class</font> MyWindowListener <font color=#0000ff>extends</font> WindowAdapter {
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> windowClosing(WindowEvent e) {
    System.exit(0);
  }
}</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The whole point of the adapters is to
make the creation of listener classes easy.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I100' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I101>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">There is a downside to adapters, however,
in the form of a pitfall. Suppose you write a <B>WindowAdapter</B> like the one
above:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#0000ff>class</font> MyWindowListener <font color=#0000ff>extends</font> WindowAdapter {
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> WindowClosing(WindowEvent e) {
    System.exit(0);
  }
}</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This doesn&#8217;t work, but it will
drive you crazy trying to figure out why, since everything will compile and run
fine&#8212;except that closing the window won&#8217;t exit the program. Can you
see the problem? It&#8217;s in the name of the method:
<B>WindowClosing(&#160;)</B> instead of <B>windowClosing(&#160;)</B>. A simple
slip in capitalization results in the addition of a completely new method.
However, this is not the method that&#8217;s called when the window is closing,
so you don&#8217;t get the desired results. Despite the inconvenience, an
<B>interface</B> will guarantee that the methods are properly implemented.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I101' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I102>
</FONT><A NAME="_Toc375545452"></A><A NAME="_Toc481064805"></A><BR></P></DIV>
<A NAME="Heading439"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Tracking multiple events</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">To prove to yourself that these events
are in fact being fired, and as an interesting experiment, it&#8217;s worth
creating an applet that tracks extra behavior in a <B>JButton </B>(other than
just whether it&#8217;s pressed or not). This example also shows you how to
inherit your own button object because that&#8217;s what is used as the target
of all the events of interest. To do so, you can just inherit
from<A NAME="Index1656"></A>
<B>JButton</B>.</FONT><A NAME="fnB69" HREF="#fn69">[69]</A><FONT FACE="Georgia">

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I102' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I103>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The <B>MyButton</B> class is an inner
class of <B>TrackEvent</B>, so <B>MyButton</B> can reach into the parent window
and manipulate its text fields, which is what&#8217;s necessary to be able to
write the status information into the fields of the parent. Of course this is a
limited solution, since <B>myButton</B> can be used only in conjunction with
<B>TrackEvent</B>. This kind of code is sometimes called &#8220;highly
coupled&#8221;: </FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:TrackEvent.java</font>
<font color=#009900>// Show events as they happen.</font>
<font color=#009900>// &lt;applet code=TrackEvent</font>
<font color=#009900>//  width=700 height=500&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.util.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> TrackEvent <font color=#0000ff>extends</font> JApplet {
  HashMap h = <font color=#0000ff>new</font> HashMap();
  String[] event = {
    <font color=#004488>"focusGained"</font>, <font color=#004488>"focusLost"</font>, <font color=#004488>"keyPressed"</font>,
    <font color=#004488>"keyReleased"</font>, <font color=#004488>"keyTyped"</font>, <font color=#004488>"mouseClicked"</font>,
    <font color=#004488>"mouseEntered"</font>, <font color=#004488>"mouseExited"</font>,<font color=#004488>"mousePressed"</font>,
    <font color=#004488>"mouseReleased"</font>, <font color=#004488>"mouseDragged"</font>, <font color=#004488>"mouseMoved"</font>
  };
  MyButton
    b1 = <font color=#0000ff>new</font> MyButton(Color.blue, <font color=#004488>"test1"</font>),
    b2 = <font color=#0000ff>new</font> MyButton(Color.red, <font color=#004488>"test2"</font>);
  <font color=#0000ff>class</font> MyButton <font color=#0000ff>extends</font> JButton {
    <font color=#0000ff>void</font> report(String field, String msg) {
      ((JTextField)h.get(field)).setText(msg);
    }    
    FocusListener fl = <font color=#0000ff>new</font> FocusListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> focusGained(FocusEvent e) {
        report(<font color=#004488>"focusGained"</font>, e.paramString());
      }
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> focusLost(FocusEvent e) {
        report(<font color=#004488>"focusLost"</font>, e.paramString());
      }
    };
    KeyListener kl = <font color=#0000ff>new</font> KeyListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> keyPressed(KeyEvent e) {
        report(<font color=#004488>"keyPressed"</font>, e.paramString());
      }
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> keyReleased(KeyEvent e) {
        report(<font color=#004488>"keyReleased"</font>, e.paramString());
      }
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> keyTyped(KeyEvent e) {
        report(<font color=#004488>"keyTyped"</font>, e.paramString());
      }
    };
    MouseListener ml = <font color=#0000ff>new</font> MouseListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> mouseClicked(MouseEvent e) {
        report(<font color=#004488>"mouseClicked"</font>, e.paramString());
      }
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> mouseEntered(MouseEvent e) {
        report(<font color=#004488>"mouseEntered"</font>, e.paramString());
      }
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> mouseExited(MouseEvent e) {
        report(<font color=#004488>"mouseExited"</font>, e.paramString());
      }
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> mousePressed(MouseEvent e) {
        report(<font color=#004488>"mousePressed"</font>, e.paramString());
      }
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> mouseReleased(MouseEvent e) {
        report(<font color=#004488>"mouseReleased"</font>, e.paramString());
      }
    };
    MouseMotionListener mml = 
      <font color=#0000ff>new</font> MouseMotionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> mouseDragged(MouseEvent e) {
        report(<font color=#004488>"mouseDragged"</font>, e.paramString());
      }
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> mouseMoved(MouseEvent e) {
        report(<font color=#004488>"mouseMoved"</font>, e.paramString());
      }
    };
    <font color=#0000ff>public</font> MyButton(Color color, String label) {
      <font color=#0000ff>super</font>(label);
      setBackground(color);
      addFocusListener(fl);
      addKeyListener(kl);
      addMouseListener(ml);
      addMouseMotionListener(mml);
    }
  }  
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container c = getContentPane();
    c.setLayout(<font color=#0000ff>new</font> GridLayout(event.length+1,2));
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; event.length; i++) {
      JTextField t = <font color=#0000ff>new</font> JTextField();
      t.setEditable(<font color=#0000ff>false</font>);
      c.add(<font color=#0000ff>new</font> JLabel(event[i], JLabel.RIGHT));
      c.add(t);
      h.put(event[i], t);
    }
    c.add(b1);
    c.add(b2);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> TrackEvent(), 700, 500);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">In the <B>MyButton</B> constructor, the
button&#8217;s color is set with a call to <B>SetBackground(&#160;)</B>. The
listeners are all installed with simple method calls.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I103' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I104>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The <B>TrackEvent</B> class contains a
<A NAME="Index1657"></A><B>HashMap</B> to hold the strings representing the type
of event and <B>JTextField</B>s where information about that event is held. Of
course, these could have been created statically rather than putting them in a
<B>HashMap</B>, but I think you&#8217;ll agree that it&#8217;s a lot easier to
use and change. In particular, if you need to add or remove a new type of event
in <B>TrackEvent</B>, you simply add or remove a string in the <B>event</B>
array&#8212;everything else happens automatically.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I104' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I105>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">When <B>report(&#160;)</B> is called it
is given the name of the event and the parameter string from the event. It uses
the <B>HashMap h </B>in the outer class to look up the actual <B>JTextField
</B>associated with that event name, and then places the parameter string into
that field. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I105' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I106>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This example is fun to play with since
you can really see what&#8217;s going on with the events in your program.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I106' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I107>
</FONT><A NAME="_Toc481064806"></A><BR></P></DIV>
<A NAME="Heading440"></A><FONT FACE = "Verdana"><H2 ALIGN="LEFT">
A catalog of Swing components<BR><A NAME="Index1658"></A></H2></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Now that you understand layout managers
and the event model, you&#8217;re ready to see how Swing components can be used.
This section is a nonexhaustive tour of the Swing components and features that
you&#8217;ll probably use most of the time. Each example is intended to be
reasonably small so that you can easily lift the code and use it in your own
programs. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I107' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I108>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You can easily see what each of these
examples looks like while running by viewing the HTML pages in the downloadable
source code for this chapter.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I108' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I109>
</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>Keep in mind: </PRE></FONT></BLOCKQUOTE><OL>
<LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">The HTML documentation
from <I>java.sun.com</I> contains all of the Swing classes and methods (only a
few are shown here). 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I109' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I110>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Because
of the naming convention used for Swing events, it&#8217;s fairly easy to guess
how to write and install a handler for a particular type of event. Use the
lookup program <B>ShowAddListeners.java</B> from earlier in this chapter to aid
in your investigation of a particular component.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I110' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I111>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">When
things start to get complicated you should graduate to a GUI builder.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I111' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I112>
</FONT><A NAME="_Toc481064807"></A></OL><A NAME="Heading441"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Buttons</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Swing includes a number of different
types of <A NAME="Index1659"></A>buttons. All buttons, check boxes, radio
buttons, and even menu items are inherited from
<A NAME="Index1660"></A><B>AbstractButton</B> (which, since menu items are
included, would probably have been better named &#8220;AbstractChooser&#8221; or
something equally general). You&#8217;ll see the use of menu items shortly, but
the following example shows the various types of buttons available:

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I112' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I113>
</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:Buttons.java</font>
<font color=#009900>// Various Swing buttons.</font>
<font color=#009900>// &lt;applet code=Buttons</font>
<font color=#009900>//  width=350 height=100&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> javax.swing.plaf.basic.*;
<font color=#0000ff>import</font> javax.swing.border.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Buttons <font color=#0000ff>extends</font> JApplet {
  JButton jb = <font color=#0000ff>new</font> JButton(<font color=#004488>"JButton"</font>);
  BasicArrowButton
    up = <font color=#0000ff>new</font> BasicArrowButton(
      BasicArrowButton.NORTH),
    down = <font color=#0000ff>new</font> BasicArrowButton(
      BasicArrowButton.SOUTH),
    right = <font color=#0000ff>new</font> BasicArrowButton(
      BasicArrowButton.EAST),
    left = <font color=#0000ff>new</font> BasicArrowButton(
      BasicArrowButton.WEST);
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    cp.add(jb);
    cp.add(<font color=#0000ff>new</font> JToggleButton(<font color=#004488>"JToggleButton"</font>));
    cp.add(<font color=#0000ff>new</font> JCheckBox(<font color=#004488>"JCheckBox"</font>));
    cp.add(<font color=#0000ff>new</font> JRadioButton(<font color=#004488>"JRadioButton"</font>));
    JPanel jp = <font color=#0000ff>new</font> JPanel();
    jp.setBorder(<font color=#0000ff>new</font> TitledBorder(<font color=#004488>"Directions"</font>));
    jp.add(up);
    jp.add(down);
    jp.add(left);
    jp.add(right);
    cp.add(jp);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> Buttons(), 350, 100);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This begins with the
<A NAME="Index1661"></A><B>BasicArrowButton</B> from
<B>javax.swing.plaf.basic</B>, then continues with the various specific types of
buttons. When you run the example, you&#8217;ll see that the toggle button holds
its last position, in or out. But the check boxes and radio buttons behave
identically to each other, just clicking on or off (they are inherited from
<A NAME="Index1662"></A><B>JToggleButton</B>). 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I113' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I114>
</FONT><BR></P></DIV>
<A NAME="Heading442"></A><FONT FACE = "Verdana"><H4 ALIGN="LEFT">
Button groups<BR><A NAME="Index1663"></A></H4></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">If you want radio buttons to behave in an
&#8220;exclusive or&#8221; fashion, you must add them to a &#8220;button
group.&#8221; But, as the example below demonstrates, any <B>AbstractButton</B>
can be added to a <B>ButtonGroup</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I114' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I115>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">To avoid repeating a lot of code, this
example uses <A NAME="Index1664"></A>reflection to generate the groups of
different types of buttons. This is seen in <B>makeBPanel(&#160;)</B>, which
creates a button group and a <A NAME="Index1665"></A><B>JPanel</B>. The second
argument to <B>makeBPanel(&#160;)</B> is an array of <B>String</B>. For each
<B>String</B>, a button of the class represented by the first argument is added
to the <B>JPanel</B>:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:ButtonGroups.java</font>
<font color=#009900>// Uses reflection to create groups </font>
<font color=#009900>// of different types of AbstractButton.</font>
<font color=#009900>// &lt;applet code=ButtonGroups</font>
<font color=#009900>//  width=500 height=300&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> javax.swing.border.*;
<font color=#0000ff>import</font> java.lang.reflect.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> ButtonGroups <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>static</font> String[] ids = { 
    <font color=#004488>"June"</font>, <font color=#004488>"Ward"</font>, <font color=#004488>"Beaver"</font>, 
    <font color=#004488>"Wally"</font>, <font color=#004488>"Eddie"</font>, <font color=#004488>"Lumpy"</font>,
  };
  <font color=#0000ff>static</font> JPanel 
  makeBPanel(Class bClass, String[] ids) {
    ButtonGroup bg = <font color=#0000ff>new</font> ButtonGroup();
    JPanel jp = <font color=#0000ff>new</font> JPanel();
    String title = bClass.getName();
    title = title.substring(
      title.lastIndexOf('.') + 1);
    jp.setBorder(<font color=#0000ff>new</font> TitledBorder(title));
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; ids.length; i++) {
      AbstractButton ab = <font color=#0000ff>new</font> JButton(<font color=#004488>"failed"</font>);
      <font color=#0000ff>try</font> {
        <font color=#009900>// Get the dynamic constructor method</font>
        <font color=#009900>// that takes a String argument:</font>
        Constructor ctor = bClass.getConstructor(
          <font color=#0000ff>new</font> Class[] { String.<font color=#0000ff>class</font> });
        <font color=#009900>// Create a new object:</font>
        ab = (AbstractButton)ctor.newInstance(
          <font color=#0000ff>new</font> Object[]{ids[i]});
      } <font color=#0000ff>catch</font>(Exception ex) {
        System.err.println(<font color=#004488>"can't create "</font> + 
          bClass);
      }
      bg.add(ab);
      jp.add(ab);
    }
    <font color=#0000ff>return</font> jp;
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    cp.add(makeBPanel(JButton.<font color=#0000ff>class</font>, ids));
    cp.add(makeBPanel(JToggleButton.<font color=#0000ff>class</font>, ids));
    cp.add(makeBPanel(JCheckBox.<font color=#0000ff>class</font>, ids));
    cp.add(makeBPanel(JRadioButton.<font color=#0000ff>class</font>, ids));
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> ButtonGroups(), 500, 300);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The title for the border is taken from
the name of the class, stripping off all the path information. The
<B>AbstractButton</B> is initialized to a <B>JButton</B> that has the label
&#8220;Failed&#8221; so if you ignore the exception message, you&#8217;ll still
see the problem on screen. The
<A NAME="Index1666"></A><A NAME="Index1667"></A><B>getConstructor(&#160;)</B>
method produces a <B>Constructor</B> object that takes the array of arguments of
the types in the <A NAME="Index1668"></A><A NAME="Index1669"></A><B>Class
</B>array passed to <B>getConstructor(&#160;)</B>. Then all you do is call
<A NAME="Index1670"></A><A NAME="Index1671"></A><B>newInstance(&#160;)</B>,
passing it an array of <B>Object</B> containing your actual arguments&#8212;in
this case, just the <B>String</B> from the <B>ids</B> array.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I115' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I116>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This adds a little complexity to what is
a simple process. To get &#8220;exclusive or&#8221; behavior with buttons, you
create a button group and add each button for which you want that behavior to
the group. When you run the program, you&#8217;ll see that all the buttons
except <B>JButton</B> exhibit this &#8220;exclusive or&#8221; behavior.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I116' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I117>
</FONT><A NAME="_Toc481064808"></A><BR></P></DIV>
<A NAME="Heading443"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Icons</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You can use an
<A NAME="Index1672"></A><B>Icon</B> inside a <B>JLabel</B> or anything that
inherits from <B>AbstractButton</B> (including
<A NAME="Index1673"></A><B>JButton</B>,
<A NAME="Index1674"></A><B>JCheckBox</B>,
<A NAME="Index1675"></A><B>JRadioButton,</B> and the different kinds of
<A NAME="Index1676"></A><B>JMenuItem</B>). Using <B>Icon</B>s with
<B>JLabel</B>s is quite straightforward (you&#8217;ll see an example later). The
following example explores all the additional ways you can use <B>Icon</B>s with
buttons and their descendants.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I117' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I118>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You can use any <B>gif</B> files you
want, but the ones used in this example are part of this book&#8217;s code
distribution, available at <I>www.BruceEckel.com</I>. To open a file and bring
in the image, simply create an <A NAME="Index1677"></A><B>ImageIcon</B> and hand
it the file name. From then on, you can use the resulting <B>Icon</B> in your
program. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I118' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I119>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Note that path information is hard-coded
into this example; you will need to change the path to correspond to the
location of the image files.</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:Faces.java</font>
<font color=#009900>// Icon behavior in Jbuttons.</font>
<font color=#009900>// &lt;applet code=Faces</font>
<font color=#009900>//  width=250 height=100&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Faces <font color=#0000ff>extends</font> JApplet {
  <font color=#009900>// The following path information is necessary</font>
  <font color=#009900>// to run via an applet directly from the disk:</font>
  <font color=#0000ff>static</font> String path = 
    <font color=#004488>"C:</font><font color=#004488>/aaa-TIJ2-distribution</font><font color=#004488>/code</font><font color=#004488>/c13</font><font color=#004488>/"</font>;
  <font color=#0000ff>static</font> Icon[] faces = {
    <font color=#0000ff>new</font> ImageIcon(path + <font color=#004488>"face0.gif"</font>),
    <font color=#0000ff>new</font> ImageIcon(path + <font color=#004488>"face1.gif"</font>),
    <font color=#0000ff>new</font> ImageIcon(path + <font color=#004488>"face2.gif"</font>),
    <font color=#0000ff>new</font> ImageIcon(path + <font color=#004488>"face3.gif"</font>),
    <font color=#0000ff>new</font> ImageIcon(path + <font color=#004488>"face4.gif"</font>),
  };
  JButton 
    jb = <font color=#0000ff>new</font> JButton(<font color=#004488>"JButton"</font>, faces[3]),
    jb2 = <font color=#0000ff>new</font> JButton(<font color=#004488>"Disable"</font>);
  <font color=#0000ff>boolean</font> mad = <font color=#0000ff>false</font>;
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    jb.addActionListener(<font color=#0000ff>new</font> ActionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e){
        <font color=#0000ff>if</font>(mad) {
          jb.setIcon(faces[3]);
          mad = <font color=#0000ff>false</font>;
        } <font color=#0000ff>else</font> {
          jb.setIcon(faces[0]);
          mad = <font color=#0000ff>true</font>;
        }
        jb.setVerticalAlignment(JButton.TOP);
        jb.setHorizontalAlignment(JButton.LEFT);
      }
    });
    jb.setRolloverEnabled(<font color=#0000ff>true</font>);
    jb.setRolloverIcon(faces[1]);
    jb.setPressedIcon(faces[2]);
    jb.setDisabledIcon(faces[4]);
    jb.setToolTipText(<font color=#004488>"Yow!"</font>);
    cp.add(jb);
    jb2.addActionListener(<font color=#0000ff>new</font> ActionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e){
        <font color=#0000ff>if</font>(jb.isEnabled()) {
          jb.setEnabled(<font color=#0000ff>false</font>);
          jb2.setText(<font color=#004488>"Enable"</font>);
        } <font color=#0000ff>else</font> {
          jb.setEnabled(<font color=#0000ff>true</font>);
          jb2.setText(<font color=#004488>"Disable"</font>);
        }
      }
    });
    cp.add(jb2);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> Faces(), 400, 200);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">An <B>Icon</B> can be used in many
constructors, but you can also use
<A NAME="Index1678"></A><B>setIcon(&#160;)</B> to add or change an <B>Icon</B>.
This example also shows how a <B>JButton</B> (or any <B>AbstractButton</B>) can
set the various different sorts of icons that appear when things happen to that
button: when it&#8217;s pressed, disabled, or &#8220;rolled
<A NAME="Index1679"></A>over&#8221; (the mouse moves over it without clicking).
You&#8217;ll see that this gives the button a nice animated feel.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I119' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I120>
</FONT><A NAME="_Toc481064809"></A><BR></P></DIV>
<A NAME="Heading444"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Tool tips<BR><A NAME="Index1680"></A></H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The previous example added a &#8220;tool
tip&#8221; to the button. Almost all of the classes that you&#8217;ll be using
to create your user interfaces are derived from
<A NAME="Index1681"></A><B>JComponent</B>, which contains a method called
<A NAME="Index1682"></A><B>setToolTipText(String)</B>. So, for virtually
anything you place on your form, all you need to do is say (for an object <B>jc
</B>of any <B>JComponent</B>-derived class):</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>jc.setToolTipText(<font color=#004488>"My tip"</font>);</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">and when the mouse stays over that
<B>JComponent</B> for a predetermined period of time, a tiny box containing your
text will pop up next to the mouse.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I120' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I121>
</FONT><A NAME="_Toc481064810"></A><BR></P></DIV>
<A NAME="Heading445"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Text fields<BR><A NAME="Index1683"></A></H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This example shows the extra behavior
that <B>JTextField</B>s are capable of:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:TextFields.java</font>
<font color=#009900>// Text fields and Java events.</font>
<font color=#009900>// &lt;applet code=TextFields width=375</font>
<font color=#009900>// height=125&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> javax.swing.event.*;
<font color=#0000ff>import</font> javax.swing.text.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> TextFields <font color=#0000ff>extends</font> JApplet {
  JButton
    b1 = <font color=#0000ff>new</font> JButton(<font color=#004488>"Get Text"</font>),
    b2 = <font color=#0000ff>new</font> JButton(<font color=#004488>"Set Text"</font>);
  JTextField
    t1 = <font color=#0000ff>new</font> JTextField(30),
    t2 = <font color=#0000ff>new</font> JTextField(30),
    t3 = <font color=#0000ff>new</font> JTextField(30);
  String s = <font color=#0000ff>new</font> String();
  UpperCaseDocument
    ucd = <font color=#0000ff>new</font> UpperCaseDocument();
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    t1.setDocument(ucd);
    ucd.addDocumentListener(<font color=#0000ff>new</font> T1());
    b1.addActionListener(<font color=#0000ff>new</font> B1());
    b2.addActionListener(<font color=#0000ff>new</font> B2());
    DocumentListener dl = <font color=#0000ff>new</font> T1();
    t1.addActionListener(<font color=#0000ff>new</font> T1A());
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    cp.add(b1);
    cp.add(b2);
    cp.add(t1);
    cp.add(t2);
    cp.add(t3);
  }
  <font color=#0000ff>class</font> T1 <font color=#0000ff>implements</font> DocumentListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> changedUpdate(DocumentEvent e){}
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> insertUpdate(DocumentEvent e){
      t2.setText(t1.getText());
      t3.setText(<font color=#004488>"Text: "</font>+ t1.getText());
    }
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> removeUpdate(DocumentEvent e){
      t2.setText(t1.getText());
    }
  }
  <font color=#0000ff>class</font> T1A <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>private</font> <font color=#0000ff>int</font> count = 0;
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      t3.setText(<font color=#004488>"t1 Action Event "</font> + count++);
    }
  }
  <font color=#0000ff>class</font> B1 <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      <font color=#0000ff>if</font>(t1.getSelectedText() == <font color=#0000ff>null</font>)
        s = t1.getText();
      <font color=#0000ff>else</font>
        s = t1.getSelectedText();
      t1.setEditable(<font color=#0000ff>true</font>);
    }
  }
  <font color=#0000ff>class</font> B2 <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      ucd.setUpperCase(<font color=#0000ff>false</font>);
      t1.setText(<font color=#004488>"Inserted by Button 2: "</font> + s);
      ucd.setUpperCase(<font color=#0000ff>true</font>);
      t1.setEditable(<font color=#0000ff>false</font>);
    }
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> TextFields(), 375, 125);
  }
}

<font color=#0000ff>class</font> UpperCaseDocument <font color=#0000ff>extends</font> PlainDocument {
  <font color=#0000ff>boolean</font> upperCase = <font color=#0000ff>true</font>;
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> setUpperCase(<font color=#0000ff>boolean</font> flag) {
    upperCase = flag;
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> insertString(<font color=#0000ff>int</font> offset, 
    String string, AttributeSet attributeSet)
    <font color=#0000ff>throws</font> BadLocationException {
      <font color=#0000ff>if</font>(upperCase)
        string = string.toUpperCase();
      <font color=#0000ff>super</font>.insertString(offset, 
        string, attributeSet);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The <B>JTextField t3</B> is included as a
place to report when the action listener for the<B> JTextField</B> <B>t1</B> is
fired. You&#8217;ll see that the action listener for a<B> JTextField</B> is
fired only when you press the &#8220;enter&#8221; key.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I121' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I122>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The<B> JTextField t1</B> has several
listeners attached to it. The <B>T1</B> listener is a <B>DocumentListener
</B>that responds to any change in the &#8220;document&#8221; (the contents of
the <B>JTextField</B>, in this case).<B> </B>It automatically copies all text
from <B>t1</B> into <B>t2</B>. In addition, <B>t1</B>&#8217;s document is set to
a derived class of <B>PlainDocument</B>, called <B>UpperCaseDocument</B>, which
forces all characters to uppercase. It automatically detects backspaces and
performs the deletion, adjusting the caret and handling everything as you would
expect.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I122' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I123>
</FONT><A NAME="_Toc481064811"></A><BR></P></DIV>
<A NAME="Heading446"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Borders</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>JComponent</B> contains a method
called <A NAME="Index1684"></A><B>setBorder(&#160;)</B>, which allows you to
place various interesting borders on any visible component. The following
example demonstrates a number of the different borders that are available, using
a method called <B>showBorder(&#160;)</B> that creates a <B>JPanel</B> and puts
on the border in each case. Also, it uses RTTI to find the name of the border
that you&#8217;re using (stripping off all the path information), then puts that
name in a <A NAME="Index1685"></A><B>JLabel</B> in the middle of the
panel:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:Borders.java</font>
<font color=#009900>// Different Swing borders.</font>
<font color=#009900>// &lt;applet code=Borders</font>
<font color=#009900>//  width=500 height=300&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> javax.swing.border.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Borders <font color=#0000ff>extends</font> JApplet {
  <font color=#0000ff>static</font> JPanel showBorder(Border b) {
    JPanel jp = <font color=#0000ff>new</font> JPanel();
    jp.setLayout(<font color=#0000ff>new</font> BorderLayout());
    String nm = b.getClass().toString();
    nm = nm.substring(nm.lastIndexOf('.') + 1);
    jp.add(<font color=#0000ff>new</font> JLabel(nm, JLabel.CENTER), 
      BorderLayout.CENTER);
    jp.setBorder(b);
    <font color=#0000ff>return</font> jp;
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    cp.setLayout(<font color=#0000ff>new</font> GridLayout(2,4));
    cp.add(showBorder(<font color=#0000ff>new</font> TitledBorder(<font color=#004488>"Title"</font>)));
    cp.add(showBorder(<font color=#0000ff>new</font> EtchedBorder()));
    cp.add(showBorder(<font color=#0000ff>new</font> LineBorder(Color.blue)));
    cp.add(showBorder(
      <font color=#0000ff>new</font> MatteBorder(5,5,30,30,Color.green)));
    cp.add(showBorder(
      <font color=#0000ff>new</font> BevelBorder(BevelBorder.RAISED)));
    cp.add(showBorder(
      <font color=#0000ff>new</font> SoftBevelBorder(BevelBorder.LOWERED)));
    cp.add(showBorder(<font color=#0000ff>new</font> CompoundBorder(
      <font color=#0000ff>new</font> EtchedBorder(),
      <font color=#0000ff>new</font> LineBorder(Color.red))));
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> Borders(), 500, 300);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You can also create your own borders and
put them inside buttons, labels, etc.&#8212;anything derived from
<B>JComponent</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I123' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I124>
</FONT><A NAME="_Toc481064812"></A><BR></P></DIV>
<A NAME="Heading447"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
JScrollPanes<BR><A NAME="Index1686"></A></H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Most of the time you&#8217;ll just want
to let a <B>JScrollPane</B> do it&#8217;s job, but you can also control which
scroll bars are allowed&#8212;vertical, horizontal, both, or
neither:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:JScrollPanes.java</font>
<font color=#009900>// Controlling the scrollbars in a JScrollPane.</font>
<font color=#009900>// &lt;applet code=JScrollPanes width=300 height=725&gt;</font>
<font color=#009900>// &lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> javax.swing.border.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> JScrollPanes <font color=#0000ff>extends</font> JApplet {
  JButton 
    b1 = <font color=#0000ff>new</font> JButton(<font color=#004488>"Text Area 1"</font>),
    b2 = <font color=#0000ff>new</font> JButton(<font color=#004488>"Text Area 2"</font>),
    b3 = <font color=#0000ff>new</font> JButton(<font color=#004488>"Replace Text"</font>),
    b4 = <font color=#0000ff>new</font> JButton(<font color=#004488>"Insert Text"</font>);
  JTextArea 
    t1 = <font color=#0000ff>new</font> JTextArea(<font color=#004488>"t1"</font>, 1, 20),
    t2 = <font color=#0000ff>new</font> JTextArea(<font color=#004488>"t2"</font>, 4, 20),
    t3 = <font color=#0000ff>new</font> JTextArea(<font color=#004488>"t3"</font>, 1, 20),
    t4 = <font color=#0000ff>new</font> JTextArea(<font color=#004488>"t4"</font>, 10, 10),
    t5 = <font color=#0000ff>new</font> JTextArea(<font color=#004488>"t5"</font>, 4, 20),
    t6 = <font color=#0000ff>new</font> JTextArea(<font color=#004488>"t6"</font>, 10, 10);
  JScrollPane 
    sp3 = <font color=#0000ff>new</font> JScrollPane(t3,
      JScrollPane.VERTICAL_SCROLLBAR_NEVER,
      JScrollPane.HORIZONTAL_SCROLLBAR_NEVER),
    sp4 = <font color=#0000ff>new</font> JScrollPane(t4,
      JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
      JScrollPane.HORIZONTAL_SCROLLBAR_NEVER),
    sp5 = <font color=#0000ff>new</font> JScrollPane(t5,
      JScrollPane.VERTICAL_SCROLLBAR_NEVER,
      JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS),
    sp6 = <font color=#0000ff>new</font> JScrollPane(t6,
      JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
      JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
  <font color=#0000ff>class</font> B1L <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      t5.append(t1.getText() + <font color=#004488>"\n"</font>);
    }
  }
  <font color=#0000ff>class</font> B2L <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      t2.setText(<font color=#004488>"Inserted by Button 2"</font>);
      t2.append(<font color=#004488>": "</font> + t1.getText());
      t5.append(t2.getText() + <font color=#004488>"\n"</font>);
    }
  }
  <font color=#0000ff>class</font> B3L <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      String s = <font color=#004488>" Replacement "</font>;
      t2.replaceRange(s, 3, 3 + s.length());
    }
  }
  <font color=#0000ff>class</font> B4L <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      t2.insert(<font color=#004488>" Inserted "</font>, 10);
    }
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    <font color=#009900>// Create Borders for components:</font>
    Border brd = BorderFactory.createMatteBorder(
      1, 1, 1, 1, Color.black);
    t1.setBorder(brd);
    t2.setBorder(brd);
    sp3.setBorder(brd);
    sp4.setBorder(brd);
    sp5.setBorder(brd);
    sp6.setBorder(brd);
    <font color=#009900>// Initialize listeners and add components:</font>
    b1.addActionListener(<font color=#0000ff>new</font> B1L());
    cp.add(b1);
    cp.add(t1);
    b2.addActionListener(<font color=#0000ff>new</font> B2L());
    cp.add(b2);
    cp.add(t2);
    b3.addActionListener(<font color=#0000ff>new</font> B3L());
    cp.add(b3);
    b4.addActionListener(<font color=#0000ff>new</font> B4L());
    cp.add(b4);
    cp.add(sp3); 
    cp.add(sp4); 
    cp.add(sp5);
    cp.add(sp6);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> JScrollPanes(), 300, 725);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Using different arguments in the
<B>JScrollPane</B> constructor controls the scrollbars that are available. This
example also dresses things up a bit using borders.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I124' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I125>
</FONT><A NAME="_Toc481064813"></A><BR></P></DIV>
<A NAME="Heading448"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
A mini-editor<BR><A NAME="Index1687"></A></H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The
<A NAME="Index1688"></A><B>JTextPane</B> control provides a great deal of
support for editing, without much effort. The following example makes very
simple use of this, ignoring the bulk of the functionality of the
class:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:TextPane.java</font>
<font color=#009900>// The JTextPane control is a little editor.</font>
<font color=#009900>// &lt;applet code=TextPane width=475 height=425&gt;</font>
<font color=#009900>// &lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;
<font color=#0000ff>import</font> com.bruceeckel.util.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> TextPane <font color=#0000ff>extends</font> JApplet {
  JButton b = <font color=#0000ff>new</font> JButton(<font color=#004488>"Add Text"</font>);
  JTextPane tp = <font color=#0000ff>new</font> JTextPane();
  <font color=#0000ff>static</font> Generator sg = 
    <font color=#0000ff>new</font> Arrays2.RandStringGenerator(7);  
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    b.addActionListener(<font color=#0000ff>new</font> ActionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e){
        <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 1; i &lt; 10; i++)
          tp.setText(tp.getText() + 
            sg.next() + <font color=#004488>"\n"</font>);
      }
    });
    Container cp = getContentPane();
    cp.add(<font color=#0000ff>new</font> JScrollPane(tp));
    cp.add(BorderLayout.SOUTH, b);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> TextPane(), 475, 425);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The button just adds randomly generated
text. The intent of the <B>JTextPane</B> is to allow text to be edited in place,
so you will see that there is no <B>append(&#160;)</B> method. In this case
(admittedly, a poor use of the capabilities of <B>JTextPane</B>), the text must
be captured, modified, and placed back into the pane using
<B>setText(&#160;)</B>. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I125' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I126>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">As mentioned before, the default layout
behavior of an applet is to use the <B>BorderLayout</B>. If you add something to
the pane without specifying any details, it just fills the center of the pane
out to the edges. However, if you specify one of the surrounding regions (NORTH,
SOUTH, EAST, or WEST) as is done here, the component will fit itself into that
region&#8212;in this case, the button will nest down at the bottom of the
screen. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I126' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I127>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Notice the built-in features of
<B>JTextPane</B>, such as automatic line wrapping. There are lots of other
features that you can look up using the JDK documentation.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I127' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I128>
</FONT><A NAME="_Toc481064814"></A><BR></P></DIV>
<A NAME="Heading449"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Check boxes</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">A <A NAME="Index1689"></A>check box
provides a way to make a single on/off choice; it consists of a tiny box and a
label. The box typically holds a little &#8220;x&#8221; (or some other
indication that it is set) or is empty, depending on whether that item was
selected. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I128' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I129>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You&#8217;ll normally create a
<A NAME="Index1690"></A><B>JCheckBox</B> using a constructor that takes the
label as an argument. You can get and set the state, and also get and set the
label if you want to read or change it after the <B>JCheckBox</B> has been
created. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I129' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I130>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Whenever a <B>JCheckBox</B> is set or
cleared, an event occurs, which you can capture the same way you do a button, by
using an <B>ActionListener</B>. The following example uses a<B> JTextArea</B> to
enumerate all the check boxes that have been checked:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:CheckBoxes.java</font>
<font color=#009900>// Using JCheckBoxes.</font>
<font color=#009900>// &lt;applet code=CheckBoxes width=200 height=200&gt;</font>
<font color=#009900>// &lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> CheckBoxes <font color=#0000ff>extends</font> JApplet {
  JTextArea t = <font color=#0000ff>new</font> JTextArea(6, 15);
  JCheckBox 
    cb1 = <font color=#0000ff>new</font> JCheckBox(<font color=#004488>"Check Box 1"</font>),
    cb2 = <font color=#0000ff>new</font> JCheckBox(<font color=#004488>"Check Box 2"</font>),
    cb3 = <font color=#0000ff>new</font> JCheckBox(<font color=#004488>"Check Box 3"</font>);
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    cb1.addActionListener(<font color=#0000ff>new</font> ActionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e){
        trace(<font color=#004488>"1"</font>, cb1);
      }
    });
    cb2.addActionListener(<font color=#0000ff>new</font> ActionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e){
        trace(<font color=#004488>"2"</font>, cb2);
      }
    });
    cb3.addActionListener(<font color=#0000ff>new</font> ActionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e){
        trace(<font color=#004488>"3"</font>, cb3);
      }
    });
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    cp.add(<font color=#0000ff>new</font> JScrollPane(t));
    cp.add(cb1); 
    cp.add(cb2); 
    cp.add(cb3);
  }
  <font color=#0000ff>void</font> trace(String b, JCheckBox cb) {
    <font color=#0000ff>if</font>(cb.isSelected())
      t.append(<font color=#004488>"Box "</font> + b + <font color=#004488>" Set\n"</font>);
    <font color=#0000ff>else</font>
      t.append(<font color=#004488>"Box "</font> + b + <font color=#004488>" Cleared\n"</font>);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> CheckBoxes(), 200, 200);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The <B>trace(&#160;)</B> method sends the
name of the selected <B>JCheckBox</B> and its current state to the<B>
JTextArea</B> using <B>append(&#160;)</B>, so you&#8217;ll see a cumulative list
of the checkboxes that were selected and what their state is.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I130' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I131>
</FONT><A NAME="_Toc375545453"></A><A NAME="_Toc481064815"></A><BR></P></DIV>
<A NAME="Heading450"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Radio buttons</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The concept of a
<A NAME="Index1691"></A><A NAME="Index1692"></A>radio button in GUI programming
comes from pre-electronic car radios with mechanical buttons: when you push one
in, any other button that was pressed pops out. Thus, it allows you to force a
single choice among many.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I131' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I132>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">All you need to do to set up an
associated group of <A NAME="Index1693"></A><B>JRadioButton</B>s is to add them
to a <A NAME="Index1694"></A><B>ButtonGroup</B> (you can have any number of
<B>ButtonGroup</B>s on a form). One of the buttons can optionally have its
starting state set to <B>true</B> (using the second argument in the
constructor). If you try to set more than one radio button to <B>true</B> then
only the final one set will be <B>true</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I132' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I133>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Here&#8217;s a simple example of the use
of radio buttons. Note that you capture radio button events like all
others:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:RadioButtons.java</font>
<font color=#009900>// Using JRadioButtons.</font>
<font color=#009900>// &lt;applet code=RadioButtons </font>
<font color=#009900>// width=200 height=100&gt; &lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> RadioButtons <font color=#0000ff>extends</font> JApplet {
  JTextField t = <font color=#0000ff>new</font> JTextField(15);
  ButtonGroup g = <font color=#0000ff>new</font> ButtonGroup();
  JRadioButton 
    rb1 = <font color=#0000ff>new</font> JRadioButton(<font color=#004488>"one"</font>, <font color=#0000ff>false</font>),
    rb2 = <font color=#0000ff>new</font> JRadioButton(<font color=#004488>"two"</font>, <font color=#0000ff>false</font>),
    rb3 = <font color=#0000ff>new</font> JRadioButton(<font color=#004488>"three"</font>, <font color=#0000ff>false</font>);
  ActionListener al = <font color=#0000ff>new</font> ActionListener() {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      t.setText(<font color=#004488>"Radio button "</font> + 
        ((JRadioButton)e.getSource()).getText());
    }
  };
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    rb1.addActionListener(al);
    rb2.addActionListener(al);
    rb3.addActionListener(al);
    g.add(rb1); g.add(rb2); g.add(rb3);
    t.setEditable(<font color=#0000ff>false</font>);
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    cp.add(t); 
    cp.add(rb1); 
    cp.add(rb2); 
    cp.add(rb3); 
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> RadioButtons(), 200, 100);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">To display the state, a text field is
used. This field is set to noneditable because it&#8217;s used only to display
data, not to collect it. Thus it is an alternative to using a <B>JLabel</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I133' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I134>
</FONT><A NAME="AAAIndexingCurrentPoint"></A><A NAME="_Toc375545454"></A><A NAME="_Toc481064816"></A><BR></P></DIV>
<A NAME="Heading451"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Combo boxes (drop-down lists)</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Like a group of radio buttons, a
<A NAME="Index1695"></A><A NAME="Index1696"></A>drop-down list is a way to force
the user to select only one element from a group of possibilities. However,
it&#8217;s a more compact way to accomplish this, and it&#8217;s easier to
change the elements of the list without surprising the user. (You can change
radio buttons dynamically, but that tends to be visibly jarring).

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I134' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I135>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><A NAME="Index1697"></A><A NAME="Index1698"></A><FONT FACE="Georgia">Java&#8217;s
<B>JComboBox</B> box is not like the combo box in Windows, which lets you select
from a list <I>or</I> type in your own selection. With a <B>JComboBox</B> box
you choose one and only one element from the list. In the following example, the
<B>JComboBox</B> box starts with a certain number of entries and then new
entries are added to the box when a button is pressed.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I135' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I136>
</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:ComboBoxes.java</font>
<font color=#009900>// Using drop-down lists.</font>
<font color=#009900>// &lt;applet code=ComboBoxes</font>
<font color=#009900>// width=200 height=100&gt; &lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> ComboBoxes <font color=#0000ff>extends</font> JApplet {
  String[] description = { <font color=#004488>"Ebullient"</font>, <font color=#004488>"Obtuse"</font>,
    <font color=#004488>"Recalcitrant"</font>, <font color=#004488>"Brilliant"</font>, <font color=#004488>"Somnescent"</font>,
    <font color=#004488>"Timorous"</font>, <font color=#004488>"Florid"</font>, <font color=#004488>"Putrescent"</font> };
  JTextField t = <font color=#0000ff>new</font> JTextField(15);
  JComboBox c = <font color=#0000ff>new</font> JComboBox();
  JButton b = <font color=#0000ff>new</font> JButton(<font color=#004488>"Add items"</font>);
  <font color=#0000ff>int</font> count = 0;
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; 4; i++)
      c.addItem(description[count++]);
    t.setEditable(<font color=#0000ff>false</font>);
    b.addActionListener(<font color=#0000ff>new</font> ActionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e){
        <font color=#0000ff>if</font>(count &lt; description.length)
          c.addItem(description[count++]);
      }
    });
    c.addActionListener(<font color=#0000ff>new</font> ActionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e){
        t.setText(<font color=#004488>"index: "</font>+ c.getSelectedIndex()
          + <font color=#004488>"   "</font> + ((JComboBox)e.getSource())
          .getSelectedItem());
      }
    });
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    cp.add(t);
    cp.add(c);
    cp.add(b);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> ComboBoxes(), 200, 100);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The<B> JTextField</B> displays the
&#8220;selected index,&#8221; which is the sequence number of the currently
selected element, as well as the label on the radio button.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I136' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I137>
</FONT><A NAME="_Toc375545455"></A><A NAME="_Toc481064817"></A><BR></P></DIV>
<A NAME="Heading452"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
List boxes<BR><A NAME="Index1699"></A><A NAME="Index1700"></A></H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">List boxes are significantly different
from <B>JComboBox</B> boxes, and not just in appearance. While a
<B>JComboBox</B> box drops down when you activate it, a
<A NAME="Index1701"></A><B>JList</B> occupies some fixed number of lines on a
screen all the time and doesn&#8217;t change. If you want to see the items in a
list, you simply call <A NAME="Index1702"></A><B>getSelectedValues(&#160;),
</B>which produces an array of <B>String</B> of the items that have been
selected. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I137' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I138>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">A <B>JList</B> allows multiple selection:
if you control-click on more than one item (holding down the
&#8220;control&#8221; key while performing additional mouse clicks) the original
item stays highlighted and you can select as many as you want. If you select an
item, then shift-click on another item, all the items in the span between the
two are selected. To remove an item from a group you can control-click it.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I138' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I139>
</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:List.java</font>
<font color=#009900>// &lt;applet code=List width=250</font>
<font color=#009900>// height=375&gt; &lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> javax.swing.event.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> javax.swing.border.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> List <font color=#0000ff>extends</font> JApplet {
  String[] flavors = { <font color=#004488>"Chocolate"</font>, <font color=#004488>"Strawberry"</font>,
    <font color=#004488>"Vanilla Fudge Swirl"</font>, <font color=#004488>"Mint Chip"</font>,
    <font color=#004488>"Mocha Almond Fudge"</font>, <font color=#004488>"Rum Raisin"</font>,
    <font color=#004488>"Praline Cream"</font>, <font color=#004488>"Mud Pie"</font> };
  DefaultListModel lItems=<font color=#0000ff>new</font> DefaultListModel();
  JList lst = <font color=#0000ff>new</font> JList(lItems);
  JTextArea t = <font color=#0000ff>new</font> JTextArea(flavors.length,20);
  JButton b = <font color=#0000ff>new</font> JButton(<font color=#004488>"Add Item"</font>);
  ActionListener bl = <font color=#0000ff>new</font> ActionListener() {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      <font color=#0000ff>if</font>(count &lt; flavors.length) {
        lItems.add(0, flavors[count++]);
      } <font color=#0000ff>else</font> {
        <font color=#009900>// Disable, since there are no more</font>
        <font color=#009900>// flavors left to be added to the List</font>
        b.setEnabled(<font color=#0000ff>false</font>);
      }
    }
  };
  ListSelectionListener ll =
    <font color=#0000ff>new</font> ListSelectionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> valueChanged(
        ListSelectionEvent e) {
          t.setText(<font color=#004488>""</font>);
          Object[] items=lst.getSelectedValues();
          <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; items.length; i++)
            t.append(items[i] + <font color=#004488>"\n"</font>);
        }
    };
  <font color=#0000ff>int</font> count = 0;
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    t.setEditable(<font color=#0000ff>false</font>);
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    <font color=#009900>// Create Borders for components:</font>
    Border brd = BorderFactory.createMatteBorder(
      1, 1, 2, 2, Color.black);
    lst.setBorder(brd);
    t.setBorder(brd);
    <font color=#009900>// Add the first four items to the List</font>
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; 4; i++)
      lItems.addElement(flavors[count++]);
    <font color=#009900>// Add items to the Content Pane for Display</font>
    cp.add(t);
    cp.add(lst);
    cp.add(b);
    <font color=#009900>// Register event listeners</font>
    lst.addListSelectionListener(ll);
    b.addActionListener(bl);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> List(), 250, 375);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">When you press the button it adds items
to the <I>top</I> of the list (because <B>addItem(&#160;)</B>&#8217;s<B>
</B>second argument is 0). 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I139' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I140>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You can see that borders have also been
added to the lists. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I140' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I141>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">If you just want to put an array of
<B>String</B>s into a <B>JList</B>, there&#8217;s a much simpler solution: you
pass the array to the <B>JList </B>constructor, and it builds the list
automatically. The only reason for using the &#8220;list model&#8221; in the
above example is so that the list could be manipulated during the execution of
the program. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I141' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I142>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>JList</B>s do not automatically
provide direct support for scrolling. Of course, all you need to do is wrap the
<B>JList</B> in a <A NAME="Index1703"></A><B>JScrollPane</B> and all the details
are automatically managed for you.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I142' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I143>
</FONT><A NAME="_Toc375545457"></A><A NAME="_Toc481064818"></A><BR></P></DIV>
<A NAME="Heading453"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Tabbed
panes<BR><A NAME="Index1704"></A><A NAME="Index1705"></A><A NAME="Index1706"></A></H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The <B>JTabbedPane</B> allows you to
create a &#8220;tabbed dialog,&#8221; which has file-folder tabs running across
one edge, and all you have to do is press a tab to bring forward a different
dialog.</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:TabbedPane1.java</font>
<font color=#009900>// Demonstrates the Tabbed Pane.</font>
<font color=#009900>// &lt;applet code=TabbedPane1 </font>
<font color=#009900>// width=350 height=200&gt; &lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> javax.swing.event.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> TabbedPane1 <font color=#0000ff>extends</font> JApplet {
  String[] flavors = { <font color=#004488>"Chocolate"</font>, <font color=#004488>"Strawberry"</font>,
    <font color=#004488>"Vanilla Fudge Swirl"</font>, <font color=#004488>"Mint Chip"</font>, 
    <font color=#004488>"Mocha Almond Fudge"</font>, <font color=#004488>"Rum Raisin"</font>, 
    <font color=#004488>"Praline Cream"</font>, <font color=#004488>"Mud Pie"</font> };
  JTabbedPane tabs = <font color=#0000ff>new</font> JTabbedPane();
  JTextField txt = <font color=#0000ff>new</font> JTextField(20);
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; flavors.length; i++)
      tabs.addTab(flavors[i], 
        <font color=#0000ff>new</font> JButton(<font color=#004488>"Tabbed pane "</font> + i));
    tabs.addChangeListener(<font color=#0000ff>new</font> ChangeListener(){
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> stateChanged(ChangeEvent e) {
        txt.setText(<font color=#004488>"Tab selected: "</font> + 
          tabs.getSelectedIndex());
      }
    });
    Container cp = getContentPane();
    cp.add(BorderLayout.SOUTH, txt);
    cp.add(tabs);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> TabbedPane1(), 350, 200);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">In Java, the use of some sort of
&#8220;tabbed panel&#8221; mechanism is quite important because in applet
programming the use of pop-up dialogs is discouraged by automatically adding a
little warning to any dialog that pops up out of an applet. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I143' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I144>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">When you run the program you&#8217;ll see
that the <B>JTabbedPane</B> automatically stacks the tabs if there are too many
of them to fit on one row. You can see this by resizing the window when you run
the program from the console command line.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I144' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I145>
</FONT><A NAME="_Toc481064819"></A><BR></P></DIV>
<A NAME="Heading454"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Message boxes</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Windowing environments commonly contain a
standard set of <A NAME="Index1707"></A>message boxes that allow you to quickly
post information to the user or to capture information from the user. In Swing,
these message boxes are contained in <A NAME="Index1708"></A><B>JOptionPane</B>.
You have many different possibilities (some quite sophisticated), but the ones
you&#8217;ll most commonly use are probably the message dialog and confirmation
dialog, invoked using the <B>static</B>
<B>JOptionPane.showMessageDialog(&#160;)</B> and <B>JOptionPane.
showConfirmDialog(&#160;)</B>. The following example shows a subset of the
message boxes available with <B>JOptionPane</B>:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:MessageBoxes.java</font>
<font color=#009900>// Demonstrates JoptionPane.</font>
<font color=#009900>// &lt;applet code=MessageBoxes </font>
<font color=#009900>// width=200 height=150&gt; &lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> MessageBoxes <font color=#0000ff>extends</font> JApplet {
  JButton[] b = { <font color=#0000ff>new</font> JButton(<font color=#004488>"Alert"</font>), 
    <font color=#0000ff>new</font> JButton(<font color=#004488>"Yes</font><font color=#004488>/No"</font>), <font color=#0000ff>new</font> JButton(<font color=#004488>"Color"</font>),
    <font color=#0000ff>new</font> JButton(<font color=#004488>"Input"</font>), <font color=#0000ff>new</font> JButton(<font color=#004488>"3 Vals"</font>)
  };
  JTextField txt = <font color=#0000ff>new</font> JTextField(15);
  ActionListener al = <font color=#0000ff>new</font> ActionListener() {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e){
      String id = 
        ((JButton)e.getSource()).getText();
      <font color=#0000ff>if</font>(id.equals(<font color=#004488>"Alert"</font>))
        JOptionPane.showMessageDialog(<font color=#0000ff>null</font>, 
          <font color=#004488>"There's a bug on you!"</font>, <font color=#004488>"Hey!"</font>, 
          JOptionPane.ERROR_MESSAGE);
      <font color=#0000ff>else</font> <font color=#0000ff>if</font>(id.equals(<font color=#004488>"Yes</font><font color=#004488>/No"</font>))
        JOptionPane.showConfirmDialog(<font color=#0000ff>null</font>, 
          <font color=#004488>"or no"</font>, <font color=#004488>"choose yes"</font>, 
          JOptionPane.YES_NO_OPTION);
      <font color=#0000ff>else</font> <font color=#0000ff>if</font>(id.equals(<font color=#004488>"Color"</font>)) {
        Object[] options = { <font color=#004488>"Red"</font>, <font color=#004488>"Green"</font> };
        <font color=#0000ff>int</font> sel = JOptionPane.showOptionDialog(
          <font color=#0000ff>null</font>, <font color=#004488>"Choose a Color!"</font>, <font color=#004488>"Warning"</font>, 
          JOptionPane.DEFAULT_OPTION, 
          JOptionPane.WARNING_MESSAGE, <font color=#0000ff>null</font>, 
          options, options[0]);
          <font color=#0000ff>if</font>(sel != JOptionPane.CLOSED_OPTION)
            txt.setText(
              <font color=#004488>"Color Selected: "</font> + options[sel]);
      } <font color=#0000ff>else</font> <font color=#0000ff>if</font>(id.equals(<font color=#004488>"Input"</font>)) {
        String val = JOptionPane.showInputDialog(
            <font color=#004488>"How many fingers do you see?"</font>); 
        txt.setText(val);
      } <font color=#0000ff>else</font> <font color=#0000ff>if</font>(id.equals(<font color=#004488>"3 Vals"</font>)) {
        Object[] selections = {
          <font color=#004488>"First"</font>, <font color=#004488>"Second"</font>, <font color=#004488>"Third"</font> };
        Object val = JOptionPane.showInputDialog(
          <font color=#0000ff>null</font>, <font color=#004488>"Choose one"</font>, <font color=#004488>"Input"</font>,
          JOptionPane.INFORMATION_MESSAGE, 
          <font color=#0000ff>null</font>, selections, selections[0]);
        <font color=#0000ff>if</font>(val != <font color=#0000ff>null</font>)
          txt.setText(
            val.toString());
      }
    }
  };
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; b.length; i++) {
      b[i].addActionListener(al);
      cp.add(b[i]);
    }
    cp.add(txt);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> MessageBoxes(), 200, 200);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">To be able to write a single
<B>ActionListener</B>, I&#8217;ve used the somewhat risky approach of checking
the <B>String</B> labels on the buttons. The problem with this is that
it&#8217;s easy to get the label a little bit wrong, typically in
capitalization, and this bug can be hard to spot.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I145' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I146>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Note that <B>showOptionDialog(&#160;)</B>
and <B>showInputDialog(&#160;)</B> provide return objects that contain the value
entered by the user.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I146' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I147>
</FONT><A NAME="_Toc481064820"></A><BR></P></DIV>
<A NAME="Heading455"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Menus<BR><A NAME="Index1709"></A><A NAME="Index1710"></A><A NAME="Index1711"></A><A NAME="Index1712"></A><A NAME="Index1713"></A><A NAME="Index1714"></A><A NAME="Index1715"></A></H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Each component capable of holding a menu,
including <B>JApplet</B>, <B>JFrame</B>, <B>JDialog</B>, and their descendants,
has a <B>setJMenuBar(&#160;) </B>method that accepts a <B>JMenuBar</B> (you can
have only one <B>JMenuBar</B> on a particular component). You add <B>JMenu</B>s
to the <B>JMenuBar</B>, and <B>JMenuItem</B>s to the <B>JMenu</B>s. Each
<B>JMenuItem</B> can have an <B>ActionListener</B> attached to it, to be fired
when that menu item is selected.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I147' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I148>
</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>Unlike a system that uses resources, with Java and Swing you must hand assemble all the menus in source code. Here is a very simple menu example:
<font color=#009900>//: c13:SimpleMenus.java</font>
<font color=#009900>// &lt;applet code=SimpleMenus </font>
<font color=#009900>// width=200 height=75&gt; &lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> SimpleMenus <font color=#0000ff>extends</font> JApplet {
  JTextField t = <font color=#0000ff>new</font> JTextField(15);
  ActionListener al = <font color=#0000ff>new</font> ActionListener() {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e){
      t.setText(
        ((JMenuItem)e.getSource()).getText());
    }
  };
  JMenu[] menus = { <font color=#0000ff>new</font> JMenu(<font color=#004488>"Winken"</font>), 
    <font color=#0000ff>new</font> JMenu(<font color=#004488>"Blinken"</font>), <font color=#0000ff>new</font> JMenu(<font color=#004488>"Nod"</font>) };
  JMenuItem[] items = {
    <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Fee"</font>), <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Fi"</font>),
    <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Fo"</font>),  <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Zip"</font>),
    <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Zap"</font>), <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Zot"</font>), 
    <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Olly"</font>), <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Oxen"</font>),
    <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Free"</font>) };
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; items.length; i++) {
      items[i].addActionListener(al);
      menus[i%3].add(items[i]);
    }
    JMenuBar mb = <font color=#0000ff>new</font> JMenuBar();
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; menus.length; i++)
      mb.add(menus[i]);
    setJMenuBar(mb);
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    cp.add(t); 
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> SimpleMenus(), 200, 75);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The use of the modulus operator in
&#8220;<B>i%3</B>&#8221; distributes the menu items among the three
<B>JMenu</B>s. Each <B>JMenuItem</B> must have an <B>ActionListener</B> attached
to it; here, the same <B>ActionListener</B> is used everywhere but you&#8217;ll
usually need an individual one for each <B>JMenuItem</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I148' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I149>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><A NAME="Index1716"></A><FONT FACE="Georgia"><B>JMenuItem
</B>inherits <B>AbstractButton</B>, so it has some buttonlike behaviors. By
itself, it provides an item that can be placed on a drop-down menu. There are
also three types inherited from <B>JMenuItem</B>: <B>JMenu</B> to hold other
<B>JMenuItem</B>s (so you can have cascading menus),  <B>JCheckBoxMenuItem</B>,
which produces a checkmark to indicate whether that menu item is selected, and
<B>JRadioButtonMenuItem</B>, which contains a radio button.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I149' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I150>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">As a more sophisticated example, here are
the ice cream flavors again, used to create menus. This example also shows
cascading menus, keyboard mnemonics, &#160;<B>JCheckBoxMenuItem</B>s, and the
way you can dynamically change menus:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:Menus.java</font>
<font color=#009900>// Submenus, checkbox menu items, swapping menus,</font>
<font color=#009900>// mnemonics (shortcuts) and action commands.</font>
<font color=#009900>// &lt;applet code=Menus width=300</font>
<font color=#009900>// height=100&gt; &lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Menus <font color=#0000ff>extends</font> JApplet {
  String[] flavors = { <font color=#004488>"Chocolate"</font>, <font color=#004488>"Strawberry"</font>,
    <font color=#004488>"Vanilla Fudge Swirl"</font>, <font color=#004488>"Mint Chip"</font>, 
    <font color=#004488>"Mocha Almond Fudge"</font>, <font color=#004488>"Rum Raisin"</font>, 
    <font color=#004488>"Praline Cream"</font>, <font color=#004488>"Mud Pie"</font> };
  JTextField t = <font color=#0000ff>new</font> JTextField(<font color=#004488>"No flavor"</font>, 30);
  JMenuBar mb1 = <font color=#0000ff>new</font> JMenuBar();
  JMenu 
    f = <font color=#0000ff>new</font> JMenu(<font color=#004488>"File"</font>),
    m = <font color=#0000ff>new</font> JMenu(<font color=#004488>"Flavors"</font>),
    s = <font color=#0000ff>new</font> JMenu(<font color=#004488>"Safety"</font>);
  <font color=#009900>// Alternative approach:</font>
  JCheckBoxMenuItem[] safety = {
    <font color=#0000ff>new</font> JCheckBoxMenuItem(<font color=#004488>"Guard"</font>),
    <font color=#0000ff>new</font> JCheckBoxMenuItem(<font color=#004488>"Hide"</font>)
  };
  JMenuItem[] file = {
    <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Open"</font>),
  };
  <font color=#009900>// A second menu bar to swap to:</font>
  JMenuBar mb2 = <font color=#0000ff>new</font> JMenuBar();
  JMenu fooBar = <font color=#0000ff>new</font> JMenu(<font color=#004488>"fooBar"</font>);
  JMenuItem[] other = {
    <font color=#009900>// Adding a menu shortcut (mnemonic) is very </font>
    <font color=#009900>// simple, but only JMenuItems can have them </font>
    <font color=#009900>// in their constructors:</font>
    <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Foo"</font>, KeyEvent.VK_F),
    <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Bar"</font>, KeyEvent.VK_A),
    <font color=#009900>// No shortcut:</font>
    <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Baz"</font>),
  };
  JButton b = <font color=#0000ff>new</font> JButton(<font color=#004488>"Swap Menus"</font>);
  <font color=#0000ff>class</font> BL <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      JMenuBar m = getJMenuBar();
      setJMenuBar(m == mb1 ? mb2 : mb1);
      validate(); <font color=#009900>// Refresh the frame</font>
    }
  }
  <font color=#0000ff>class</font> ML <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      JMenuItem target = (JMenuItem)e.getSource();
      String actionCommand = 
        target.getActionCommand();
      <font color=#0000ff>if</font>(actionCommand.equals(<font color=#004488>"Open"</font>)) {
        String s = t.getText();
        <font color=#0000ff>boolean</font> chosen = <font color=#0000ff>false</font>;
        <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; flavors.length; i++)
          <font color=#0000ff>if</font>(s.equals(flavors[i])) chosen = <font color=#0000ff>true</font>;
        <font color=#0000ff>if</font>(!chosen)
          t.setText(<font color=#004488>"Choose a flavor first!"</font>);
        <font color=#0000ff>else</font>
          t.setText(<font color=#004488>"Opening "</font>+ s +<font color=#004488>". Mmm, mm!"</font>);
      }
    }
  }
  <font color=#0000ff>class</font> FL <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      JMenuItem target = (JMenuItem)e.getSource();
      t.setText(target.getText());
    }
  }
  <font color=#009900>// Alternatively, you can create a different</font>
  <font color=#009900>// class for each different MenuItem. Then you</font>
  <font color=#009900>// Don't have to figure out which one it is:</font>
  <font color=#0000ff>class</font> FooL <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      t.setText(<font color=#004488>"Foo selected"</font>);
    }
  }
  <font color=#0000ff>class</font> BarL <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      t.setText(<font color=#004488>"Bar selected"</font>);
    }
  }
  <font color=#0000ff>class</font> BazL <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      t.setText(<font color=#004488>"Baz selected"</font>);
    }
  }
  <font color=#0000ff>class</font> CMIL <font color=#0000ff>implements</font> ItemListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> itemStateChanged(ItemEvent e) {
      JCheckBoxMenuItem target = 
        (JCheckBoxMenuItem)e.getSource();
      String actionCommand = 
        target.getActionCommand();
      <font color=#0000ff>if</font>(actionCommand.equals(<font color=#004488>"Guard"</font>))
        t.setText(<font color=#004488>"Guard the Ice Cream! "</font> +
          <font color=#004488>"Guarding is "</font> + target.getState());
      <font color=#0000ff>else</font> <font color=#0000ff>if</font>(actionCommand.equals(<font color=#004488>"Hide"</font>))
        t.setText(<font color=#004488>"Hide the Ice Cream! "</font> +
          <font color=#004488>"Is it cold? "</font> + target.getState());
    }
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    ML ml = <font color=#0000ff>new</font> ML();
    CMIL cmil = <font color=#0000ff>new</font> CMIL();
    safety[0].setActionCommand(<font color=#004488>"Guard"</font>);
    safety[0].setMnemonic(KeyEvent.VK_G);
    safety[0].addItemListener(cmil);
    safety[1].setActionCommand(<font color=#004488>"Hide"</font>);
    safety[0].setMnemonic(KeyEvent.VK_H);
    safety[1].addItemListener(cmil);
    other[0].addActionListener(<font color=#0000ff>new</font> FooL());
    other[1].addActionListener(<font color=#0000ff>new</font> BarL());
    other[2].addActionListener(<font color=#0000ff>new</font> BazL());
    FL fl = <font color=#0000ff>new</font> FL();
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; flavors.length; i++) {
      JMenuItem mi = <font color=#0000ff>new</font> JMenuItem(flavors[i]);
      mi.addActionListener(fl);
      m.add(mi);
      <font color=#009900>// Add separators at intervals:</font>
      <font color=#0000ff>if</font>((i+1) % 3 == 0) 
        m.addSeparator();
    }
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; safety.length; i++)
      s.add(safety[i]);
    s.setMnemonic(KeyEvent.VK_A);
    f.add(s);
    f.setMnemonic(KeyEvent.VK_F);
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; file.length; i++) {
      file[i].addActionListener(fl);
      f.add(file[i]);
    }
    mb1.add(f);
    mb1.add(m);
    setJMenuBar(mb1);
    t.setEditable(<font color=#0000ff>false</font>);
    Container cp = getContentPane();
    cp.add(t, BorderLayout.CENTER);
    <font color=#009900>// Set up the system for swapping menus:</font>
    b.addActionListener(<font color=#0000ff>new</font> BL());
    b.setMnemonic(KeyEvent.VK_S);
    cp.add(b, BorderLayout.NORTH);
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; other.length; i++)
      fooBar.add(other[i]);
    fooBar.setMnemonic(KeyEvent.VK_B);
    mb2.add(fooBar);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> Menus(), 300, 100);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">In this program I placed the menu items
into arrays and then stepped through each array calling <B>add(&#160;)</B> for
each <B>JMenuItem</B>. This makes adding or subtracting a menu item somewhat
less tedious. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I150' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I151>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This program creates not one but two<B>
JMenuBar</B>s to demonstrate that menu bars can be actively swapped while the
program is running. You can see how a<B> JMenuBar</B> is made up of
<B>JMenus</B>, and each <B>JMenu</B> is made up of <B>JMenuItems</B>,<B>
JCheckBoxMenuItem</B>s, or even other <B>JMenu</B>s (which produce submenus).
When a<B> JMenuBar</B> is assembled it can be installed into the current program
with the <B>setJMenuBar(&#160;)</B> method. Note that when the button is
pressed, it checks to see which menu is currently installed by calling
<B>getJMenuBar(&#160;)</B>, then it puts the other menu bar in its place.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I151' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I152>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">When testing for &#8220;Open,&#8221;
notice that spelling and capitalization are critical, but Java signals no error
if there is no match with &#8220;Open.&#8221; This kind of string comparison is
a source of programming errors.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I152' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I153>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The checking and unchecking of the menu
items is taken care of automatically. The code handling the
<B>JCheckBoxMenuItem</B>s shows two different ways to determine what was
checked: string matching (which, as mentioned above, isn&#8217;t a very safe
approach although you&#8217;ll see it used) and matching on the event target
object. As shown, the <A NAME="Index1717"></A><B>getState(&#160;) </B>method can
be used to reveal the state. You can also change the state of a
<B>JCheckBoxMenuItem</B> with <B>setState(&#160;)</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I153' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I154>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The events for menus are a bit
inconsistent and can lead to confusion:
<A NAME="Index1718"></A><B>JMenuItem</B>s use <B>ActionListener</B>s, but
<A NAME="Index1719"></A><B>JCheckboxMenuItem</B>s use <B>ItemListener</B>s. The
<A NAME="Index1720"></A><B>JMenu</B> objects can also support
<B>ActionListener</B>s, but that&#8217;s not usually helpful. In general,
you&#8217;ll attach listeners to each <B>JMenuItem</B>,
<B>JCheckBoxMenuItem</B>, or <B>JRadioButtonMenuItem</B>, but the example shows
<B>ItemListener</B>s and <B>ActionListener</B>s attached to the various menu
components. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I154' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I155>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><A NAME="Index1721"></A><A NAME="Index1722"></A><A NAME="Index1723"></A><FONT FACE="Georgia">Swing
supports mnemonics, or &#8220;keyboard shortcuts,&#8221; so you can select
anything derived from <B>AbstractButton</B> (button, menu item, etc.) using the
keyboard instead of the mouse. These are quite simple: for <B>JMenuItem</B> you
can use the overloaded constructor that takes as a second argument the
identifier for the key. However, most <B>AbstractButton</B>s do not have
constructors like this so the more general way to solve the problem is to use
the <A NAME="Index1724"></A><B>setMnemonic(&#160;) </B>method. The example above
adds mnemonics to the button and some of the menu items; shortcut indicators
automatically appear on the components.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I155' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I156>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><A NAME="Index1725"></A><A NAME="Index1726"></A><FONT FACE="Georgia">You
can also see the use of <B>setActionCommand(&#160;)</B>. This seems a bit
strange because in each case the &#8220;action command&#8221; is exactly the
same as the label on the menu component. Why not just use the label instead of
this alternative string? The problem is internationalization. If you retarget
this program to another language, you want to change only the label in the menu,
and not change the code (which would no doubt introduce new errors). So to make
this easy for code that checks the text string associated with a menu component,
the &#8220;action command&#8221; can be immutable while the menu label can
change. All the code works with the &#8220;action command,&#8221; so it&#8217;s
unaffected by changes to the menu labels. Note that in this program, not all the
menu components are examined for their action commands, so those that
aren&#8217;t don&#8217;t have their action command set.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I156' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I157>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The bulk of the work happens in the
listeners. <B>BL</B> performs the <A NAME="Index1727"></A><B>JMenuBar</B>
swapping. In <B>ML</B>, the &#8220;figure out who rang&#8221; approach is taken
by getting the source of the <A NAME="Index1728"></A><B>ActionEvent</B> and
casting it to a <A NAME="Index1729"></A><B>JMenuItem</B>, then getting the
action command string to pass it through a cascaded <B>if</B> statement.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I157' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I158>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The <B>FL</B> listener is simple even
though it&#8217;s handling all the different flavors in the flavor menu. This
approach is useful if you have enough simplicity in your logic, but in general,
you&#8217;ll want to take the approach used with <B>FooL</B>, <B>BarL,</B> and
<B>BazL</B>, in which they are each attached to only a single menu component so
no extra detection logic is necessary and you know exactly who called the
listener. Even with the profusion of classes generated this way, the code inside
tends to be smaller and the process is more foolproof.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I158' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I159>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You can see that menu code quickly gets
long-winded and messy. This is another case where the use of a GUI builder is
the appropriate solution. A good tool will also handle the maintenance of the
menus.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I159' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I160>
</FONT><A NAME="_Toc481064821"></A><BR></P></DIV>
<A NAME="Heading456"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Pop-up menus<BR><A NAME="Index1730"></A><A NAME="Index1731"></A></H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The most straightforward way to implement
a <B>JPopupMenu</B> is to create an inner class that extends
<B>MouseAdapter</B>, then add an object of that inner class to each component
that you want to produce pop-up behavior:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:Popup.java</font>
<font color=#009900>// Creating popup menus with Swing.</font>
<font color=#009900>// &lt;applet code=Popup</font>
<font color=#009900>//  width=300 height=200&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Popup <font color=#0000ff>extends</font> JApplet {
  JPopupMenu popup = <font color=#0000ff>new</font> JPopupMenu();
  JTextField t = <font color=#0000ff>new</font> JTextField(10);
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    cp.add(t);
    ActionListener al = <font color=#0000ff>new</font> ActionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e){
        t.setText(
          ((JMenuItem)e.getSource()).getText());
      }
    };
    JMenuItem m = <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Hither"</font>);
    m.addActionListener(al);
    popup.add(m);
    m = <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Yon"</font>);
    m.addActionListener(al);
    popup.add(m);
    m = <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Afar"</font>);
    m.addActionListener(al);
    popup.add(m);
    popup.addSeparator();
    m = <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Stay Here"</font>);
    m.addActionListener(al);
    popup.add(m);
    PopupListener pl = <font color=#0000ff>new</font> PopupListener();
    addMouseListener(pl);
    t.addMouseListener(pl);
  }
  <font color=#0000ff>class</font> PopupListener <font color=#0000ff>extends</font> MouseAdapter {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> mousePressed(MouseEvent e) {
      maybeShowPopup(e);
    }
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> mouseReleased(MouseEvent e) {
      maybeShowPopup(e);
    }
    <font color=#0000ff>private</font> <font color=#0000ff>void</font> maybeShowPopup(MouseEvent e) {
      <font color=#0000ff>if</font>(e.isPopupTrigger()) {
        popup.show(
          e.getComponent(), e.getX(), e.getY());
      }
    }
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> Popup(), 300, 200);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><A NAME="Index1732"></A><FONT FACE="Georgia">The same
<B>ActionListener</B> is added to each <B>JMenuItem</B>, so that it fetches the
text from the menu label and inserts it into the <B>JTextField</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I160' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I161>
</FONT><A NAME="_Toc481064822"></A><BR></P></DIV>
<A NAME="Heading457"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Drawing<BR><A NAME="Index1733"></A><A NAME="Index1734"></A><A NAME="Index1735"></A></H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">In a good GUI framework, drawing should
be reasonably easy&#8212;and it is, in the Swing library. The problem with any
drawing example is that the calculations that determine where things go are
typically a lot more complicated that the calls to the drawing routines, and
these calculations are often mixed together with the drawing calls so it can
seem that the interface is more complicated than it actually is.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I161' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I162>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">For simplicity, consider the problem of
representing data on the screen&#8212;here, the data will be provided by the
built-in <B>Math.sin(&#160;)</B> method which is a mathematical sine function.
To make things a little more interesting, and to further demonstrate how easy it
is to use Swing components, a slider will be placed at the bottom of the form to
dynamically control the number of sine wave cycles that are displayed. In
addition, if you resize the window, you&#8217;ll see that the sine wave refits
itself to the new window size. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I162' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I163>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Although any
<A NAME="Index1736"></A><B>JComponent</B> may be painted and thus used as a
canvas, if you just want a straightforward drawing surface you will typically
inherit from a <A NAME="Index1737"></A><B>JPanel</B>. The only method you need
to override is <A NAME="Index1738"></A><B>paintComponent(&#160;)</B>, which is
called whenever that component must be repainted (you normally don&#8217;t need
to worry about this, as the decision is managed by Swing). When it is called,
Swing passes a <A NAME="Index1739"></A><B>Graphics</B> object to the method, and
you can then use this object to draw or paint on the surface.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I163' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I164>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">In the following example, all the
intelligence concerning painting is in the <B>SineDraw</B> class; the
<B>SineWave</B> class simply configures the program and the slider control.
Inside <B>SineDraw</B>, the <B>setCycles(&#160;)</B> method provides a hook to
allow another object&#8212;the slider control, in this case&#8212;to control the
number of cycles.</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:SineWave.java</font>
<font color=#009900>// Drawing with Swing, using a JSlider.</font>
<font color=#009900>// &lt;applet code=SineWave</font>
<font color=#009900>//  width=700 height=400&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> javax.swing.event.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>class</font> SineDraw <font color=#0000ff>extends</font> JPanel {
  <font color=#0000ff>static</font> <font color=#0000ff>final</font> <font color=#0000ff>int</font> SCALEFACTOR = 200;
  <font color=#0000ff>int</font> cycles;
  <font color=#0000ff>int</font> points;
  <font color=#0000ff>double</font>[] sines;
  <font color=#0000ff>int</font>[] pts;
  SineDraw() { setCycles(5); }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> setCycles(<font color=#0000ff>int</font> newCycles) {
    cycles = newCycles;
    points = SCALEFACTOR * cycles * 2;
    sines = <font color=#0000ff>new</font> <font color=#0000ff>double</font>[points];
    pts = <font color=#0000ff>new</font> <font color=#0000ff>int</font>[points];
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; points; i++) {
      <font color=#0000ff>double</font> radians = (Math.PI/SCALEFACTOR) * i;
      sines[i] = Math.sin(radians);
    }
    repaint();
  }    
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> paintComponent(Graphics g) {
    <font color=#0000ff>super</font>.paintComponent(g);
    <font color=#0000ff>int</font> maxWidth = getWidth();
    <font color=#0000ff>double</font> hstep = (<font color=#0000ff>double</font>)maxWidth/(<font color=#0000ff>double</font>)points;
    <font color=#0000ff>int</font> maxHeight = getHeight();
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; points; i++)
      pts[i] = (<font color=#0000ff>int</font>)(sines[i] * maxHeight/2 * .95
                     + maxHeight/2);
    g.setColor(Color.red);
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 1; i &lt; points; i++) {
      <font color=#0000ff>int</font> x1 = (<font color=#0000ff>int</font>)((i - 1) * hstep);
      <font color=#0000ff>int</font> x2 = (<font color=#0000ff>int</font>)(i * hstep);
      <font color=#0000ff>int</font> y1 = pts[i-1];
      <font color=#0000ff>int</font> y2 = pts[i];
      g.drawLine(x1, y1, x2, y2);
    }
  }
}

<font color=#0000ff>public</font> <font color=#0000ff>class</font> SineWave <font color=#0000ff>extends</font> JApplet {
  SineDraw sines = <font color=#0000ff>new</font> SineDraw();
  JSlider cycles = <font color=#0000ff>new</font> JSlider(1, 30, 5);
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    cp.add(sines);
    cycles.addChangeListener(<font color=#0000ff>new</font> ChangeListener(){
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> stateChanged(ChangeEvent e) {
        sines.setCycles(
          ((JSlider)e.getSource()).getValue());
      }
    });
    cp.add(BorderLayout.SOUTH, cycles);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> SineWave(), 700, 400);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">All of the data members and arrays are
used in the calculation of the sine wave points: <B>cycles</B> indicates the
number of complete sine waves desired, <B>points</B> contains the total number
of points that will be graphed, <B>sines</B> contains the sine function values,
and <B>pts</B> contains the y-coordinates of the points that will be drawn on
the <B>JPanel</B>. The <B>setCycles(&#160;)</B> method creates the arrays
according to the number of points needed and fills the <B>sines</B> array with
numbers. By calling <B>repaint(&#160;)</B> , <B>setCycles(&#160;)</B> forces
<B>paintComponent(&#160;)</B> to be called so the rest of the calculation and
redraw will take place. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I164' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I165>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The first thing you must do when you
override <B>paintComponent(&#160;)</B> is to call the base-class version of the
method. Then you are free to do whatever you like; normally, this means using
the <B>Graphics</B> methods that you can find in the documentation for
<B>java.awt.Graphics</B> (in the HTML documentation from <I>java.sun.com</I>) to
draw and paint pixels onto the <B>JPanel</B>. Here, you can see that almost all
the code is involved in performing the calculations; the only two method calls
that actually manipulate the screen are <B>setColor(&#160;)</B> and
<B>drawLine(&#160;)</B>. You will probably have a similar experience when
creating your own program that displays graphical data&#8212;you&#8217;ll spend
most of your time figuring out what it is you want to draw, but the actual
drawing process will be quite simple.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I165' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I166>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">When I created this program, the bulk of
my time was spent in getting the sine wave to display. Once I did that, I
thought it would be nice to be able to dynamically change the number of cycles.
My programming experiences when trying to do such things in other languages made
me a bit reluctant to try this, but it turned out to be the easiest part of the
project. I created a <B>JSlider</B> (the arguments are the left-most value of
the <B>JSlider</B>, the right-most value, and the starting value, respectively,
but there are other constructors as well) and dropped it into the
<B>JApplet</B>. Then I looked at the HTML documentation and noticed that the
only listener was the <A NAME="Index1740"></A><B>addChangeListener</B>, which
was triggered whenever the slider was changed enough for it to produce a
different value. The only method for this was the obviously named
<A NAME="Index1741"></A><B>stateChanged(&#160;)</B>, which provided a
<B>ChangeEvent</B> object so that I could look backward to the source of the
change and find the new value. By calling the <B>sines</B> object&#8217;s
<B>setCycles(&#160;)</B>, the new value was incorporated and the <B>JPanel</B>
redrawn. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I166' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I167>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">In general, you will find that most of
your Swing problems can be solved by following a similar process, and
you&#8217;ll find that it&#8217;s generally quite simple, even if you
haven&#8217;t used a particular component before.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I167' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I168>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">If your problem is more complex, there
are other more sophisticated alternatives for drawing, including third-party
JavaBeans components and the Java 2D API. These solutions are beyond the scope
of this book, but you should look them up if your drawing code becomes too
onerous.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I168' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I169>
</FONT><A NAME="_Toc481064823"></A><BR></P></DIV>
<A NAME="Heading458"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Dialog Boxes<BR><A NAME="Index1742"></A><A NAME="Index1743"></A></H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">A dialog box is a window that pops up out
of another window. Its purpose is to deal with some specific issue without
cluttering the original window with those details. Dialog boxes are heavily used
in windowed programming environments, but less frequently used in applets.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I169' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I170>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">To create a dialog box, you inherit from
<B>JDialog</B>, which is just another kind of <B>Window</B>, like a
<B>JFrame</B>. A <B>JDialog</B> has a layout manager (which defaults to
<B>BorderLayout</B>) and you add event listeners to deal with events. One
significant difference when <A NAME="Index1744"></A><B>windowClosing(&#160;)</B>
is called is that you don&#8217;t want to shut down the application. Instead,
you release the resources used by the dialog&#8217;s window by calling
<A NAME="Index1745"></A><B>dispose(&#160;)</B>. Here&#8217;s a very simple
example:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:Dialogs.java</font>
<font color=#009900>// Creating and using Dialog Boxes.</font>
<font color=#009900>// &lt;applet code=Dialogs width=125 height=75&gt;</font>
<font color=#009900>// &lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>class</font> MyDialog <font color=#0000ff>extends</font> JDialog {
  <font color=#0000ff>public</font> MyDialog(JFrame parent) {
    <font color=#0000ff>super</font>(parent, <font color=#004488>"My dialog"</font>, <font color=#0000ff>true</font>);
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    cp.add(<font color=#0000ff>new</font> JLabel(<font color=#004488>"Here is my dialog"</font>));
    JButton ok = <font color=#0000ff>new</font> JButton(<font color=#004488>"OK"</font>);
    ok.addActionListener(<font color=#0000ff>new</font> ActionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e){
        dispose(); <font color=#009900>// Closes the dialog</font>
      }
    });
    cp.add(ok);
    setSize(150,125);
  }
}

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Dialogs <font color=#0000ff>extends</font> JApplet {
  JButton b1 = <font color=#0000ff>new</font> JButton(<font color=#004488>"Dialog Box"</font>);
  MyDialog dlg = <font color=#0000ff>new</font> MyDialog(<font color=#0000ff>null</font>);
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    b1.addActionListener(<font color=#0000ff>new</font> ActionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e){
        dlg.show();
      }
    });
    getContentPane().add(b1);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> Dialogs(), 125, 75);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Once the <B>JDialog</B> is created, the
<A NAME="Index1746"></A><B>show(&#160;)</B> method must be called to display and
activate it. For the dialog to close, it must call <B>dispose(&#160;)</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I170' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I171>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You&#8217;ll see that anything that pops
up out of an applet, including dialog boxes, is &#8220;untrusted.&#8221; That
is, you get a warning in the window that&#8217;s been popped up. This is
because, in theory, it would be possible to fool the user into thinking that
they&#8217;re dealing with a regular native application and to get them to type
in their credit card number, which then goes across the Web. An applet is always
attached to a Web page and visible within your Web browser, while a dialog box
is detached&#8212;so in theory, it could be possible. As a result it is not so
common to see an applet that uses a dialog box.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I171' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I172>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The following example is more complex;
the dialog box is made up of a grid (using <B>GridLayout</B>) of a special kind
of button that is defined here as class <B>ToeButton</B>. This button draws a
frame around itself and, depending on its state, a blank, an &#8220;x,&#8221; or
an &#8220;o&#8221; in the middle. It starts out blank, and then depending on
whose turn it is, changes to an &#8220;x&#8221; or an &#8220;o.&#8221; However,
it will also flip back and forth between &#8220;x&#8221; and &#8220;o&#8221;
when you click on the button. (This makes the tic-tac-toe concept only slightly
more annoying than it already is.) In addition, the dialog box can be set up for
any number of rows and columns by changing numbers in the main application
window.</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:TicTacToe.java</font>
<font color=#009900>// Demonstration of dialog boxes</font>
<font color=#009900>// and creating your own components.</font>
<font color=#009900>// &lt;applet code=TicTacToe</font>
<font color=#009900>//  width=200 height=100&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> TicTacToe <font color=#0000ff>extends</font> JApplet {
  JTextField 
    rows = <font color=#0000ff>new</font> JTextField(<font color=#004488>"3"</font>),
    cols = <font color=#0000ff>new</font> JTextField(<font color=#004488>"3"</font>);
  <font color=#0000ff>static</font> <font color=#0000ff>final</font> <font color=#0000ff>int</font> BLANK = 0, XX = 1, OO = 2;
  <font color=#0000ff>class</font> ToeDialog <font color=#0000ff>extends</font> JDialog {
    <font color=#0000ff>int</font> turn = XX; <font color=#009900>// Start with x's turn</font>
    <font color=#009900>// w = number of cells wide</font>
    <font color=#009900>// h = number of cells high</font>
    <font color=#0000ff>public</font> ToeDialog(<font color=#0000ff>int</font> w, <font color=#0000ff>int</font> h) {
      setTitle(<font color=#004488>"The game itself"</font>);
      Container cp = getContentPane();
      cp.setLayout(<font color=#0000ff>new</font> GridLayout(w, h));
      <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; w * h; i++)
        cp.add(<font color=#0000ff>new</font> ToeButton());
      setSize(w * 50, h * 50);
      <font color=#009900>// JDK 1.3 close dialog:</font>
      <font color=#009900>//#setDefaultCloseOperation(</font>
      <font color=#009900>//#  DISPOSE_ON_CLOSE);</font>
      <font color=#009900>// JDK 1.2 close dialog:</font>
      addWindowListener(<font color=#0000ff>new</font> WindowAdapter() {
        <font color=#0000ff>public</font> <font color=#0000ff>void</font> windowClosing(WindowEvent e){
          dispose();
        }
      });    
    }
    <font color=#0000ff>class</font> ToeButton <font color=#0000ff>extends</font> JPanel {
      <font color=#0000ff>int</font> state = BLANK;
      <font color=#0000ff>public</font> ToeButton() {
        addMouseListener(<font color=#0000ff>new</font> ML());
      }
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> paintComponent(Graphics g) {
        <font color=#0000ff>super</font>.paintComponent(g);
        <font color=#0000ff>int</font> x1 = 0;
        <font color=#0000ff>int</font> y1 = 0;
        <font color=#0000ff>int</font> x2 = getSize().width - 1;
        <font color=#0000ff>int</font> y2 = getSize().height - 1;
        g.drawRect(x1, y1, x2, y2);
        x1 = x2/4;
        y1 = y2/4;
        <font color=#0000ff>int</font> wide = x2/2;
        <font color=#0000ff>int</font> high = y2/2;
        <font color=#0000ff>if</font>(state == XX) {
          g.drawLine(x1, y1, 
            x1 + wide, y1 + high);
          g.drawLine(x1, y1 + high, 
            x1 + wide, y1);
        }
        <font color=#0000ff>if</font>(state == OO) {
          g.drawOval(x1, y1, 
            x1 + wide/2, y1 + high/2);
        }
      }
      <font color=#0000ff>class</font> ML <font color=#0000ff>extends</font> MouseAdapter {
        <font color=#0000ff>public</font> <font color=#0000ff>void</font> mousePressed(MouseEvent e) {
          <font color=#0000ff>if</font>(state == BLANK) {
            state = turn;
            turn = (turn == XX ? OO : XX);
          } 
          <font color=#0000ff>else</font>
            state = (state == XX ? OO : XX);
          repaint();
        }
      }
    }
  }
  <font color=#0000ff>class</font> BL <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      JDialog d = <font color=#0000ff>new</font> ToeDialog(
        Integer.parseInt(rows.getText()),
        Integer.parseInt(cols.getText()));
      d.setVisible(<font color=#0000ff>true</font>);
    }
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    JPanel p = <font color=#0000ff>new</font> JPanel();
    p.setLayout(<font color=#0000ff>new</font> GridLayout(2,2));
    p.add(<font color=#0000ff>new</font> JLabel(<font color=#004488>"Rows"</font>, JLabel.CENTER));
    p.add(rows);
    p.add(<font color=#0000ff>new</font> JLabel(<font color=#004488>"Columns"</font>, JLabel.CENTER));
    p.add(cols);
    Container cp = getContentPane();
    cp.add(p, BorderLayout.NORTH);
    JButton b = <font color=#0000ff>new</font> JButton(<font color=#004488>"go"</font>);
    b.addActionListener(<font color=#0000ff>new</font> BL());
    cp.add(b, BorderLayout.SOUTH);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> TicTacToe(), 200, 100);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Because <B>static</B>s can only be at the
outer level of the class, inner classes cannot have <B>static</B> data or
<B>static</B> inner classes.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I172' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I173>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><A NAME="Index1747"></A><A NAME="Index1748"></A><FONT FACE="Georgia">The
<B>paintComponent(&#160;)</B> method draws the square around the panel, and the
&#8220;x&#8221; or the &#8220;o.&#8221; This is full of tedious calculations,
but it&#8217;s straightforward. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I173' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I174>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">A mouse click is captured by the
<B>MouseListener</B>, which first checks to see if the panel has anything
written on it. If not, the parent window is queried to find out whose turn it is
and that is used to establish the state of the <B>ToeButton</B>. Via the inner
class mechanism, the <B>ToeButton</B> then reaches back into the parent and
changes the turn. If the button is already displaying an &#8220;x&#8221; or an
&#8220;o&#8221; then that is flopped. You can see in these calculations the
convenient use of the ternary if-else described in Chapter 3. After a state
change, the <B>ToeButton</B> is repainted.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I174' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I175>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The constructor for <B>ToeDialog</B> is
quite simple: it adds into a <B>GridLayout</B> as many buttons as you request,
then resizes it for 50 pixels on a side for each button.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I175' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I176>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>TicTacToe</B> sets up the whole
application by creating the<B> JTextField</B>s (for inputting the rows and
columns of the button grid) and the &#8220;go&#8221; button with its
<B>ActionListener</B>. When the button is pressed, the data in the<B>
JTextField</B>s must be fetched, and, since they are in <B>String</B> form,
turned into <B>int</B>s using the <B>static</B>
<A NAME="Index1749"></A><A NAME="Index1750"></A><B>Integer.parseInt(&#160;)</B>
method. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I176' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I177>
</FONT><A NAME="_Toc481064824"></A><BR></P></DIV>
<A NAME="Heading459"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
File dialogs<BR><A NAME="Index1751"></A><A NAME="Index1752"></A></H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Some operating systems have a number of
special built-in dialog boxes to handle the selection of things such as fonts,
colors, printers, and the like. Virtually all graphical operating systems
support the opening and saving of files, however, and so Java&#8217;s
<A NAME="Index1753"></A><B>JFileChooser</B> encapsulates these for easy use.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I177' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I178>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The following application exercises two
forms of <B>JFileChooser</B> dialogs, one for opening and one for saving. Most
of the code should by now be familiar, and all the interesting activities happen
in the action listeners for the two different button clicks:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:FileChooserTest.java</font>
<font color=#009900>// Demonstration of File dialog boxes.</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> FileChooserTest <font color=#0000ff>extends</font> JFrame {
  JTextField 
    filename = <font color=#0000ff>new</font> JTextField(),
    dir = <font color=#0000ff>new</font> JTextField();
  JButton 
    open = <font color=#0000ff>new</font> JButton(<font color=#004488>"Open"</font>),
    save = <font color=#0000ff>new</font> JButton(<font color=#004488>"Save"</font>);
  <font color=#0000ff>public</font> FileChooserTest() {
    JPanel p = <font color=#0000ff>new</font> JPanel();
    open.addActionListener(<font color=#0000ff>new</font> OpenL());
    p.add(open);
    save.addActionListener(<font color=#0000ff>new</font> SaveL());
    p.add(save);
    Container cp = getContentPane();
    cp.add(p, BorderLayout.SOUTH);
    dir.setEditable(<font color=#0000ff>false</font>);
    filename.setEditable(<font color=#0000ff>false</font>);
    p = <font color=#0000ff>new</font> JPanel();
    p.setLayout(<font color=#0000ff>new</font> GridLayout(2,1));
    p.add(filename);
    p.add(dir);
    cp.add(p, BorderLayout.NORTH);
  }
  <font color=#0000ff>class</font> OpenL <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      JFileChooser c = <font color=#0000ff>new</font> JFileChooser();
      <font color=#009900>// Demonstrate "Open" dialog:</font>
      <font color=#0000ff>int</font> rVal = 
        c.showOpenDialog(FileChooserTest.<font color=#0000ff>this</font>);
      <font color=#0000ff>if</font>(rVal == JFileChooser.APPROVE_OPTION) {
        filename.setText(
          c.getSelectedFile().getName());
          dir.setText(
            c.getCurrentDirectory().toString());
      }
      <font color=#0000ff>if</font>(rVal == JFileChooser.CANCEL_OPTION) {
        filename.setText(<font color=#004488>"You pressed cancel"</font>);
        dir.setText(<font color=#004488>""</font>);
      }
    }
  }
  <font color=#0000ff>class</font> SaveL <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      JFileChooser c = <font color=#0000ff>new</font> JFileChooser();
      <font color=#009900>// Demonstrate "Save" dialog:</font>
      <font color=#0000ff>int</font> rVal = 
        c.showSaveDialog(FileChooserTest.<font color=#0000ff>this</font>);
      <font color=#0000ff>if</font>(rVal == JFileChooser.APPROVE_OPTION) {
        filename.setText(
          c.getSelectedFile().getName());
          dir.setText(
            c.getCurrentDirectory().toString());
      }
      <font color=#0000ff>if</font>(rVal == JFileChooser.CANCEL_OPTION) {
        filename.setText(<font color=#004488>"You pressed cancel"</font>);
        dir.setText(<font color=#004488>""</font>);
      }
    }
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> FileChooserTest(), 250, 110);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Note that there are many variations you
can apply to <B>JFileChooser</B>, including filters to narrow the file names
that you will allow. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I178' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I179>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">For an &#8220;open file&#8221; dialog,
you call <B>showOpenDialog(&#160;)</B>, and for a &#8220;save file&#8221; dialog
you call <B>showSaveDialog(&#160;)</B>. These commands don&#8217;t return until
the dialog is closed. The <B>JFileChooser</B> object still exists, so you can
read data from it. The methods <B>getSelectedFile(&#160;)</B> and
<B>getCurrentDirectory(&#160;)</B> are two ways you can interrogate the results
of the operation. If these return <B>null</B> it means the user canceled out of
the dialog.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I179' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I180>
</FONT><A NAME="_Toc481064825"></A><BR></P></DIV>
<A NAME="Heading460"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
HTML on Swing
components<BR><A NAME="Index1754"></A><A NAME="Index1755"></A></H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Any component that can take text can also
take HTML text, which it will reformat according to HTML rules. This means you
can very easily add fancy text to a Swing component. For
example,</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:HTMLButton.java</font>
<font color=#009900>// Putting HTML text on Swing components.</font>
<font color=#009900>// &lt;applet code=HTMLButton width=200 height=500&gt;</font>
<font color=#009900>// &lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> HTMLButton <font color=#0000ff>extends</font> JApplet {
  JButton b = <font color=#0000ff>new</font> JButton(<font color=#004488>"&lt;html&gt;&lt;b&gt;&lt;font size=+2&gt;"</font> +
    <font color=#004488>"&lt;center&gt;Hello!&lt;br&gt;&lt;i&gt;Press me now!"</font>);
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    b.addActionListener(<font color=#0000ff>new</font> ActionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e){
        getContentPane().add(<font color=#0000ff>new</font> JLabel(<font color=#004488>"&lt;html&gt;"</font>+
          <font color=#004488>"&lt;i&gt;&lt;font size=+4&gt;Kapow!"</font>));
        <font color=#009900>// Force a re-layout to</font>
        <font color=#009900>// include the new label:</font>
        validate();
      }
    });
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    cp.add(b);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> HTMLButton(), 200, 500);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You must start the text with
&#8220;&lt;html&gt;,&#8221; and then you can use normal HTML tags. Note that you
are not forced to include the normal closing tags.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I180' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I181>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The <B>ActionListener</B> adds a new
<B>JLabel</B> to the form, which also contains HTML text. However, this label is
not added during <B>init(&#160;)</B> so you must call the container&#8217;s
<B>validate(&#160;)</B> method in order to force a re-layout of the components
(and thus the display of the new label).

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I181' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I182>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You can also use HTML text for
<B>JTabbedPane</B>, <B>JMenuItem</B>, <B>JToolTip</B>, <B>JRadioButton</B> and
<B>JCheckBox</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I182' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I183>
</FONT><A NAME="_Toc481064826"></A><BR></P></DIV>
<A NAME="Heading461"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Sliders and progress bars</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">A <A NAME="Index1756"></A>slider (which
has already been used in the sine wave example) allows the user to input data by
moving a point back and forth, which is intuitive in some situations (volume
controls, for example). A <A NAME="Index1757"></A>progress bar displays data in
a relative fashion from &#8220;full&#8221; to &#8220;empty&#8221; so the user
gets a perspective. My favorite example for these is to simply hook the slider
to the progress bar so when you move the slider the progress bar changes
accordingly:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:Progress.java</font>
<font color=#009900>// Using progress bars and sliders.</font>
<font color=#009900>// &lt;applet code=Progress</font>
<font color=#009900>//  width=300 height=200&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> javax.swing.event.*;
<font color=#0000ff>import</font> javax.swing.border.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Progress <font color=#0000ff>extends</font> JApplet {
  JProgressBar pb = <font color=#0000ff>new</font> JProgressBar();
  JSlider sb = 
    <font color=#0000ff>new</font> JSlider(JSlider.HORIZONTAL, 0, 100, 60);
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> GridLayout(2,1));
    cp.add(pb);
    sb.setValue(0);
    sb.setPaintTicks(<font color=#0000ff>true</font>);
    sb.setMajorTickSpacing(20);
    sb.setMinorTickSpacing(5);
    sb.setBorder(<font color=#0000ff>new</font> TitledBorder(<font color=#004488>"Slide Me"</font>));
    pb.setModel(sb.getModel()); <font color=#009900>// Share model</font>
    cp.add(sb);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> Progress(), 300, 200);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The key to hooking the two components
together is in sharing their model, in the line:

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I183' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I184>
</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>pb.setModel(sb.getModel());</PRE></FONT></BLOCKQUOTE>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>Of course, you could also control the two using a listener, but <font color=#0000ff>this</font> is more straightforward <font color=#0000ff>for</font> simple situations.</PRE></FONT></BLOCKQUOTE><DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The
<A NAME="Index1758"></A><B>JProgressBar </B>is fairly straightforward, but the
<A NAME="Index1759"></A><B>JSlider</B> has a lot of options, such as the
orientation and major and minor tick marks. Notice how straightforward it is to
add a titled border.<B>

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I184' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I185>
</B></FONT><A NAME="_Toc481064827"></A><BR></P></DIV>
<A NAME="Heading462"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Trees</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Using a <A NAME="Index1760"></A><B>JTree
</B>can be as simple as saying:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>add(<font color=#0000ff>new</font> JTree(
  <font color=#0000ff>new</font> Object[] {<font color=#004488>"this"</font>, <font color=#004488>"that"</font>, <font color=#004488>"other"</font>}));</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This displays a primitive
<A NAME="Index1761"></A>tree. The API for trees is vast, however&#8212;certainly
one of the largest in Swing. It appears that you can do just about anything with
trees, but more sophisticated tasks might require quite a bit of research and
experimentation.  
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I185' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I186>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Fortunately, there is a middle ground
provided in the library: the &#8220;default&#8221; tree components, which
generally do what you need. So most of the time you can use these components,
and only in special cases will you need to delve in and understand trees more
deeply. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I186' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I187>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The following example uses the
&#8220;default&#8221; tree components to display a tree in an applet. When you
press the button, a new subtree is added under the currently selected node (if
no node is selected, the root node is used):

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I187' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I188>
</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:Trees.java</font>
<font color=#009900>// Simple Swing tree example. Trees can </font>
<font color=#009900>// be made vastly more complex than this.</font>
<font color=#009900>// &lt;applet code=Trees</font>
<font color=#009900>//  width=250 height=250&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> javax.swing.tree.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#009900>// Takes an array of Strings and makes the first</font>
<font color=#009900>// element a node and the rest leaves:</font>
<font color=#0000ff>class</font> Branch {
  DefaultMutableTreeNode r;
  <font color=#0000ff>public</font> Branch(String[] data) {
    r = <font color=#0000ff>new</font> DefaultMutableTreeNode(data[0]);
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 1; i &lt; data.length; i++)
      r.add(<font color=#0000ff>new</font> DefaultMutableTreeNode(data[i]));
  }
  <font color=#0000ff>public</font> DefaultMutableTreeNode node() { 
    <font color=#0000ff>return</font> r; 
  }
}  

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Trees <font color=#0000ff>extends</font> JApplet {
  String[][] data = {
    { <font color=#004488>"Colors"</font>, <font color=#004488>"Red"</font>, <font color=#004488>"Blue"</font>, <font color=#004488>"Green"</font> },
    { <font color=#004488>"Flavors"</font>, <font color=#004488>"Tart"</font>, <font color=#004488>"Sweet"</font>, <font color=#004488>"Bland"</font> },
    { <font color=#004488>"Length"</font>, <font color=#004488>"Short"</font>, <font color=#004488>"Medium"</font>, <font color=#004488>"Long"</font> },
    { <font color=#004488>"Volume"</font>, <font color=#004488>"High"</font>, <font color=#004488>"Medium"</font>, <font color=#004488>"Low"</font> },
    { <font color=#004488>"Temperature"</font>, <font color=#004488>"High"</font>, <font color=#004488>"Medium"</font>, <font color=#004488>"Low"</font> },
    { <font color=#004488>"Intensity"</font>, <font color=#004488>"High"</font>, <font color=#004488>"Medium"</font>, <font color=#004488>"Low"</font> },
  };
  <font color=#0000ff>static</font> <font color=#0000ff>int</font> i = 0;
  DefaultMutableTreeNode root, child, chosen;
  JTree tree;
  DefaultTreeModel model;
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    root = <font color=#0000ff>new</font> DefaultMutableTreeNode(<font color=#004488>"root"</font>);
    tree = <font color=#0000ff>new</font> JTree(root);
    <font color=#009900>// Add it and make it take care of scrolling:</font>
    cp.add(<font color=#0000ff>new</font> JScrollPane(tree), 
      BorderLayout.CENTER);
    <font color=#009900>// Capture the tree's model:</font>
    model =(DefaultTreeModel)tree.getModel();
    JButton test = <font color=#0000ff>new</font> JButton(<font color=#004488>"Press me"</font>);
    test.addActionListener(<font color=#0000ff>new</font> ActionListener() {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e){
        <font color=#0000ff>if</font>(i &lt; data.length) {
          child = <font color=#0000ff>new</font> Branch(data[i++]).node();
          <font color=#009900>// What's the last one you clicked?</font>
          chosen = (DefaultMutableTreeNode)
            tree.getLastSelectedPathComponent();
          <font color=#0000ff>if</font>(chosen == <font color=#0000ff>null</font>) chosen = root;
          <font color=#009900>// The model will create the </font>
          <font color=#009900>// appropriate event. In response, the</font>
          <font color=#009900>// tree will update itself:</font>
          model.insertNodeInto(child, chosen, 0);
          <font color=#009900>// This puts the new node on the </font>
          <font color=#009900>// currently chosen node.</font>
        }
      }
    });
    <font color=#009900>// Change the button's colors:</font>
    test.setBackground(Color.blue);
    test.setForeground(Color.white);
    JPanel p = <font color=#0000ff>new</font> JPanel();
    p.add(test);
    cp.add(p, BorderLayout.SOUTH);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> Trees(), 250, 250);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The first class, <B>Branch</B>, is a tool
to take an array of <B>String</B> and build a
<A NAME="Index1762"></A><B>DefaultMutableTreeNode</B> with the first
<B>String</B> as the root and the rest of the <B>String</B>s in the array as
leaves. Then <B>node(&#160;)</B> can be called to produce the root of this
&#8220;branch.&#8221; 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I188' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I189>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The <B>Trees</B> class contains a
two-dimensional array of <B>String</B>s from which <B>Branch</B>es can be made
and a <B>static int i</B> to count through this array. The
<B>DefaultMutableTreeNode</B> objects hold the nodes, but the physical
representation on screen is controlled by the <B>JTree</B> and its associated
model, the <A NAME="Index1763"></A><B>DefaultTreeModel</B>. Note that when the
<B>JTree</B> is added to the applet, it is wrapped in a
<A NAME="Index1764"></A><B>JScrollPane</B>&#8212;this is all it takes to provide
automatic scrolling. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I189' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I190>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The <B>JTree</B> is controlled through
its <I>model</I>. When you make a change to the model, the model generates an
event that causes the <B>JTree</B> to perform any necessary updates to the
visible representation of the tree. In <B>init(&#160;)</B>, the model is
captured by calling <A NAME="Index1765"></A><B>getModel(&#160;)</B>. When the
button is pressed, a new &#8220;branch&#8221; is created. Then the currently
selected component is found (or the root is used if nothing is selected) and the
model&#8217;s <A NAME="Index1766"></A><B>insertNodeInto(&#160;)</B> method does
all the work of changing the tree and causing it to be updated.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I190' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I191>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">An example like the one above may give
you what you need in a tree. However, trees have the power to do just about
anything you can imagine&#8212;everywhere you see the word &#8220;default&#8221;
in the example above, you can substitute your own class to get different
behavior. But beware: almost all of these classes have a large interface, so you
could spend a lot of time struggling to understand the intricacies of trees.
Despite this, it&#8217;s a good design and the alternatives are usually much
worse.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I191' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I192>
</FONT><A NAME="_Toc481064828"></A><BR></P></DIV>
<A NAME="Heading463"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Tables</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Like trees,
<A NAME="Index1767"></A>tables in Swing are vast and powerful. They are
primarily intended to be the popular &#8220;grid&#8221; interface to databases
via Java Database Connectivity (JDBC, discussed in Chapter 15) and thus they
have a tremendous amount of flexibility, which you pay for in complexity.
There&#8217;s easily enough here to be the basis of a full-blown spreadsheet and
could probably justify an entire book. However, it is also possible to create a
relatively simple <A NAME="Index1768"></A><B>JTable</B> if you understand the
basics. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I192' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I193>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The <B>JTable</B> controls how the data
is displayed, but the <B>TableModel</B> controls the data itself. So to create a
<B>JTable</B> you&#8217;ll typically create a <B>TableModel</B> first. You can
fully implement the <B>TableModel</B> interface, but it&#8217;s usually simpler
to inherit from the helper class <B>AbstractTableModel</B>:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:Table.java</font>
<font color=#009900>// Simple demonstration of JTable.</font>
<font color=#009900>// &lt;applet code=Table</font>
<font color=#009900>//  width=350 height=200&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> javax.swing.table.*;
<font color=#0000ff>import</font> javax.swing.event.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Table <font color=#0000ff>extends</font> JApplet {
  JTextArea txt = <font color=#0000ff>new</font> JTextArea(4, 20);
  <font color=#009900>// The TableModel controls all the data:</font>
  <font color=#0000ff>class</font> DataModel <font color=#0000ff>extends</font> AbstractTableModel {
    Object[][] data = {
      {<font color=#004488>"one"</font>, <font color=#004488>"two"</font>, <font color=#004488>"three"</font>, <font color=#004488>"four"</font>},
      {<font color=#004488>"five"</font>, <font color=#004488>"six"</font>, <font color=#004488>"seven"</font>, <font color=#004488>"eight"</font>},
      {<font color=#004488>"nine"</font>, <font color=#004488>"ten"</font>, <font color=#004488>"eleven"</font>, <font color=#004488>"twelve"</font>},
    };
    <font color=#009900>// Prints data when table changes:</font>
    <font color=#0000ff>class</font> TML <font color=#0000ff>implements</font> TableModelListener {
      <font color=#0000ff>public</font> <font color=#0000ff>void</font> tableChanged(TableModelEvent e){
        txt.setText(<font color=#004488>""</font>); <font color=#009900>// Clear it</font>
        <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; data.length; i++) {
          <font color=#0000ff>for</font>(<font color=#0000ff>int</font> j = 0; j &lt; data[0].length; j++)
            txt.append(data[i][j] + <font color=#004488>" "</font>);
          txt.append(<font color=#004488>"\n"</font>);
        }
      }
    }
    <font color=#0000ff>public</font> DataModel() {
      addTableModelListener(<font color=#0000ff>new</font> TML());
    }
    <font color=#0000ff>public</font> <font color=#0000ff>int</font> getColumnCount() { 
      <font color=#0000ff>return</font> data[0].length; 
    }
    <font color=#0000ff>public</font> <font color=#0000ff>int</font> getRowCount() { 
      <font color=#0000ff>return</font> data.length;
    }
    <font color=#0000ff>public</font> Object getValueAt(<font color=#0000ff>int</font> row, <font color=#0000ff>int</font> col) {
      <font color=#0000ff>return</font> data[row][col]; 
    }
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> 
    setValueAt(Object val, <font color=#0000ff>int</font> row, <font color=#0000ff>int</font> col) {
      data[row][col] = val;
      <font color=#009900>// Indicate the change has happened:</font>
      fireTableDataChanged();
    }
    <font color=#0000ff>public</font> <font color=#0000ff>boolean</font> 
    isCellEditable(<font color=#0000ff>int</font> row, <font color=#0000ff>int</font> col) { 
      <font color=#0000ff>return</font> <font color=#0000ff>true</font>; 
    }
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    JTable table = <font color=#0000ff>new</font> JTable(<font color=#0000ff>new</font> DataModel());
    cp.add(<font color=#0000ff>new</font> JScrollPane(table));
    cp.add(BorderLayout.SOUTH, txt);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> Table(), 350, 200);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>DataModel</B> contains an array of
data, but you could also get the data from some other source such as a database.
The constructor adds a <B>TableModelListener</B> that prints the array every
time the table is changed. The rest of the methods follow the Beans naming
convention, and are used by <B>JTable</B> when it wants to present the
information in <B>DataModel</B>. <B>AbstractTableModel</B> provides default
methods for <B>setValueAt(&#160;)</B> and <B>isCellEditable(&#160;)</B> that
prevent changes to the data, so if you want to be able to edit the data, you
must override these methods.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I193' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I194>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Once you have a <B>TableModel</B>, you
only need to hand it to the <B>JTable</B> constructor. All the details of
displaying, editing, and updating will be taken care of for you. This example
also puts the <B>JTable</B> in a <B>JScrollPane</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I194' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I195>
</FONT><A NAME="_Toc481064829"></A><BR></P></DIV>
<A NAME="Heading464"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Selecting Look &amp; Feel</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">One of the very interesting aspects of
Swing is the &#8220;<A NAME="Index1769"></A><A NAME="Index1770"></A>Pluggable
Look &amp; Feel.&#8221; This allows your program to emulate the look and feel of
various operating environments. You can even do all sorts of fancy things like
dynamically changing the look and feel while the program is executing. However,
you generally just want to do one of two things, either select the &#8220;cross
platform&#8221; look and feel (which is Swing&#8217;s &#8220;metal&#8221;), or
select the look and feel for the system you are currently on, so your Java
program looks like it was created specifically for that system. The code to
select either of these behaviors is quite simple&#8212;but you must execute it
<I>before</I> you create any visual components, because the components will be
made based on the current look and feel and will not be changed just because you
happen to change the look and feel midway during the program (that process is
more complicated and uncommon, and is relegated to Swing-specific books).

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I195' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I196>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Actually, if you want to use the
cross-platform (&#8220;metal&#8221;) look and feel that is characteristic of
Swing programs, you don&#8217;t have to do anything&#8212;it&#8217;s the
default. But if you want instead to use the current operating
environment&#8217;s look and feel, you just insert the following code, typically
at the beginning of your <B>main(&#160;)</B> but somehow before any components
are added:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#0000ff>try</font> {
  UIManager.setLookAndFeel(UIManager.
    getSystemLookAndFeelClassName());
} <font color=#0000ff>catch</font>(Exception e) {}</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You don&#8217;t need anything in the
<B>catch</B> clause because the <B>UIManager</B> will default to the
cross-platform look and feel if your attempts to set up any of the alternatives
fail. However, during debugging the exception can be quite useful so you may at
least want to put a print statement in the catch clause.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I196' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I197>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Here is a program that takes a
command-line argument to select a look and feel, and shows how several different
components look under the chosen look and feel:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:LookAndFeel.java</font>
<font color=#009900>// Selecting different looks &amp; feels.</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.util.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> LookAndFeel <font color=#0000ff>extends</font> JFrame {
  String[] choices = { 
    <font color=#004488>"eeny"</font>, <font color=#004488>"meeny"</font>, <font color=#004488>"minie"</font>, <font color=#004488>"moe"</font>, <font color=#004488>"toe"</font>, <font color=#004488>"you"</font>
  };
  Component[] samples = {
    <font color=#0000ff>new</font> JButton(<font color=#004488>"JButton"</font>),
    <font color=#0000ff>new</font> JTextField(<font color=#004488>"JTextField"</font>),
    <font color=#0000ff>new</font> JLabel(<font color=#004488>"JLabel"</font>),
    <font color=#0000ff>new</font> JCheckBox(<font color=#004488>"JCheckBox"</font>),
    <font color=#0000ff>new</font> JRadioButton(<font color=#004488>"Radio"</font>),
    <font color=#0000ff>new</font> JComboBox(choices),
    <font color=#0000ff>new</font> JList(choices),
  };
  <font color=#0000ff>public</font> LookAndFeel() {
    <font color=#0000ff>super</font>(<font color=#004488>"Look And Feel"</font>);
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; samples.length; i++)
      cp.add(samples[i]);
  }
  <font color=#0000ff>private</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> usageError() {
    System.out.println(
      <font color=#004488>"Usage:LookAndFeel [cross|system|motif]"</font>);
    System.exit(1);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    <font color=#0000ff>if</font>(args.length == 0) usageError();
    <font color=#0000ff>if</font>(args[0].equals(<font color=#004488>"cross"</font>)) {
      <font color=#0000ff>try</font> {
        UIManager.setLookAndFeel(UIManager.
          getCrossPlatformLookAndFeelClassName());
      } <font color=#0000ff>catch</font>(Exception e) {
          e.printStackTrace(System.err);
      }
    } <font color=#0000ff>else</font> <font color=#0000ff>if</font>(args[0].equals(<font color=#004488>"system"</font>)) {
      <font color=#0000ff>try</font> {
        UIManager.setLookAndFeel(UIManager.
          getSystemLookAndFeelClassName());
      } <font color=#0000ff>catch</font>(Exception e) {
          e.printStackTrace(System.err);
      }
    } <font color=#0000ff>else</font> <font color=#0000ff>if</font>(args[0].equals(<font color=#004488>"motif"</font>)) {
      <font color=#0000ff>try</font> {
        UIManager.setLookAndFeel(<font color=#004488>"com.sun.java."</font>+
          <font color=#004488>"swing.plaf.motif.MotifLookAndFeel"</font>);
      } <font color=#0000ff>catch</font>(Exception e) {
          e.printStackTrace(System.err);
      }
    } <font color=#0000ff>else</font> usageError();
    <font color=#009900>// Note the look &amp; feel must be set before</font>
    <font color=#009900>// any components are created.</font>
    Console.run(<font color=#0000ff>new</font> LookAndFeel(), 300, 200);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You can see that one option is to
explicitly specify a string for a look and feel, as seen with
<B>MotifLookAndFeel</B>. However, that one and the default &#8220;metal&#8221;
look and feel are the only ones that can legally be used on any platform; even
though there are strings for Windows and Macintosh look and feels, those can
only be used on their respective platforms (these are produced when you call
<B>getSystemLookAndFeelClassName(&#160;)</B> and you&#8217;re on that particular
platform). 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I197' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I198>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">It is also possible to create a custom
look and feel package, for example, if you are building a framework for a
company that wants a distinctive appearance. This is a big job and is far beyond
the scope of this book (in fact, you&#8217;ll discover it is beyond the scope of
many dedicated Swing books!).

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I198' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I199>
</FONT><A NAME="_Toc481064830"></A><BR></P></DIV>
<A NAME="Heading465"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
The clipboard</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The JFC supports limited operations with
the <A NAME="Index1771"></A><A NAME="Index1772"></A>system clipboard (in the
<B>java.awt.datatransfer </B>package). You can copy <B>String</B> objects to the
clipboard as text, and you can paste text from the clipboard into <B>String</B>
objects. Of course, the clipboard is designed to hold any type of data, but how
this data is represented on the clipboard is up to the program doing the cutting
and pasting. The Java clipboard API provides for extensibility through the
concept of a &#8220;flavor.&#8221; When data comes off the clipboard, it has an
associated set of <A NAME="Index1773"></A>flavors that it can be converted to
(for example, a graph might be represented as a string of numbers or as an
image) and you can see if that particular clipboard data supports the flavor
you&#8217;re interested in.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I199' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I200>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The following program is a simple
demonstration of cut, copy, and paste with <B>String</B> data in a
<A NAME="Index1774"></A><B>JTextArea</B>. One thing you&#8217;ll notice is that
the keyboard sequences you normally use for cutting, copying, and pasting also
work. But if you look at any<B> JTextField</B> or<B> JTextArea</B> in any other
program you&#8217;ll find that they also automatically support the clipboard key
sequences. This example simply adds programmatic control of the clipboard, and
you could use these techniques if you want to capture clipboard text into
something other than a <B>JTextComponent</B>.</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:CutAndPaste.java</font>
<font color=#009900>// Using the clipboard.</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.awt.datatransfer.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> CutAndPaste <font color=#0000ff>extends</font> JFrame  {
  JMenuBar mb = <font color=#0000ff>new</font> JMenuBar();
  JMenu edit = <font color=#0000ff>new</font> JMenu(<font color=#004488>"Edit"</font>);
  JMenuItem
    cut = <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Cut"</font>),
    copy = <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Copy"</font>),
    paste = <font color=#0000ff>new</font> JMenuItem(<font color=#004488>"Paste"</font>);
  JTextArea text = <font color=#0000ff>new</font> JTextArea(20, 20);
  Clipboard clipbd = 
    getToolkit().getSystemClipboard();
  <font color=#0000ff>public</font> CutAndPaste()  {
    cut.addActionListener(<font color=#0000ff>new</font> CutL());
    copy.addActionListener(<font color=#0000ff>new</font> CopyL());
    paste.addActionListener(<font color=#0000ff>new</font> PasteL());
    edit.add(cut);
    edit.add(copy);
    edit.add(paste);
    mb.add(edit);
    setJMenuBar(mb);
    getContentPane().add(text);
  }
  <font color=#0000ff>class</font> CopyL <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      String selection = text.getSelectedText();
      <font color=#0000ff>if</font> (selection == <font color=#0000ff>null</font>)
        <font color=#0000ff>return</font>;
      StringSelection clipString =
        <font color=#0000ff>new</font> StringSelection(selection);
      clipbd.setContents(clipString,clipString);
    }
  }
  <font color=#0000ff>class</font> CutL <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      String selection = text.getSelectedText();
      <font color=#0000ff>if</font> (selection == <font color=#0000ff>null</font>)
        <font color=#0000ff>return</font>;
      StringSelection clipString =
        <font color=#0000ff>new</font> StringSelection(selection);
      clipbd.setContents(clipString, clipString);
      text.replaceRange(<font color=#004488>""</font>,
        text.getSelectionStart(),
        text.getSelectionEnd());
    }
  }
  <font color=#0000ff>class</font> PasteL <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      Transferable clipData =
        clipbd.getContents(CutAndPaste.<font color=#0000ff>this</font>);
      <font color=#0000ff>try</font> {
        String clipString =
          (String)clipData.
            getTransferData(
              DataFlavor.stringFlavor);
        text.replaceRange(clipString,
          text.getSelectionStart(),
          text.getSelectionEnd());
      } <font color=#0000ff>catch</font>(Exception ex) {
        System.err.println(<font color=#004488>"Not String flavor"</font>);
      }
    }
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> CutAndPaste(), 300, 200);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The creation and addition of the menu
and<B> JTextArea</B> should by now seem a pedestrian activity. What&#8217;s
different is the creation of the <B>Clipboard</B> field <B>clipbd</B>, which is
done through the <B>Toolkit</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I200' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I201>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">All the action takes place in the
listeners. The <B>CopyL</B> and <B>CutL</B> listeners are the same except for
the last line of <B>CutL</B>, which erases the line that&#8217;s been copied.
The special two lines are the creation of a
<A NAME="Index1775"></A><B>StringSelection</B> object from the <B>String</B> and
the call to <A NAME="Index1776"></A><B>setContents(&#160;)</B> with this
<B>StringSelection</B>. That&#8217;s all there is to putting a <B>String</B> on
the clipboard. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I201' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I202>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">In <B>PasteL,</B> data is pulled off the
clipboard using <A NAME="Index1777"></A><B>getContents(&#160;)</B>. What comes
back is a fairly anonymous <A NAME="Index1778"></A><B>Transferable</B> object,
and you don&#8217;t really know what it contains. One way to find out is to call
<A NAME="Index1779"></A><B>getTransferDataFlavors(&#160;)</B>, which returns an
array of <A NAME="Index1780"></A><B>DataFlavor</B> objects indicating which
flavors are supported by this particular object. You can also ask it directly
with <A NAME="Index1781"></A><B>isDataFlavorSupported(&#160;)</B>, passing in
the flavor you&#8217;re interested in. Here, however, the bold approach is
taken: <A NAME="Index1782"></A><B>getTransferData(&#160;)</B> is called assuming
that the contents supports the <B>String</B> flavor, and if it doesn&#8217;t the
problem is sorted out in the exception handler.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I202' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I203>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">In the future you can expect more data
flavors to be
supported.</FONT><A NAME="_Toc375545469"></A><A NAME="_Toc481064831"></A><BR></P></DIV>
<A NAME="Heading466"></A><FONT FACE = "Verdana"><H2 ALIGN="LEFT">
Packaging an applet into a JAR
file<BR><A NAME="Index1783"></A><A NAME="Index1784"></A></H2></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">An important use of the JAR utility is to
optimize applet loading. In Java 1.0, people tended to try to cram all their
code into a single applet class so the client would need only a single server
hit to download the applet code. Not only did this result in messy, hard to read
(and maintain) programs, but the <B>.class</B> file was still uncompressed so
downloading wasn&#8217;t as fast as it could have been.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I203' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I204>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">JAR files solve the problem by
compressing all of your <B>.class</B> files into a single file that is
downloaded by the browser. Now you can create the right design without worrying
about how many <B>.class </B>files it will generate, and the user will get a
much faster download time.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I204' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I205>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Consider <B>TicTacToe.java</B>. It looks
like a single class, but in fact it contains five inner classes, so that&#8217;s
six in all. Once you&#8217;ve compiled the program, you package it into a JAR
file with the line:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>jar cf TicTacToe.jar *.<font color=#0000ff>class</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This assumes that the only <B>.class</B>
files in the current directory are the ones from <B>TicTacToe.java</B>
(otherwise you&#8217;ll get extra baggage).

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I205' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I206>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Now you can create an HTML page with the
new
<A NAME="Index1785"></A><A NAME="Index1786"></A><A NAME="Index1787"></A><B>archive</B>
tag to indicate the name of the JAR file. Here is the tag using the old form of
the HTML tag, as an illustration:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>&lt;head&gt;&lt;title&gt;TicTacToe Example Applet
&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;
&lt;applet code=TicTacToe.<font color=#0000ff>class</font>
        archive=TicTacToe.jar
        width=200 height=100&gt;
&lt;/applet&gt;
&lt;/body&gt;</PRE></FONT></BLOCKQUOTE>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>You&#8217;ll need to put it into the <font color=#0000ff>new</font> (messy, complicated) form shown earlier in the chapter in order to get it to work.<A NAME=<font color=#004488>"_Toc481064832"</font>></A></PRE></FONT></BLOCKQUOTE><A NAME="Heading467"></A><FONT FACE = "Verdana"><H2 ALIGN="LEFT">
Programming techniques</H2></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Because GUI programming in Java has been
an evolving technology with some very significant changes between Java 1.0/1.1
and the Swing library in Java 2, there have been some old programming idioms
that have seeped through to examples that you might see given for Swing. In
addition, Swing allows you to program in more and better ways than were allowed
by the old models. In this section, some of these issues will be demonstrated by
introducing and examining some programming idioms.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I206' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I207>
</FONT><A NAME="_Toc481064833"></A><BR></P></DIV>
<A NAME="Heading468"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Binding events dynamically</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">One of the benefits of the
<A NAME="Index1788"></A><A NAME="Index1789"></A>Swing event model is
flexibility. You can add and remove event behavior with single method calls. The
following example demonstrates this:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:DynamicEvents.java</font>
<font color=#009900>// You can change event behavior dynamically.</font>
<font color=#009900>// Also shows multiple actions for an event.</font>
<font color=#009900>// &lt;applet code=DynamicEvents</font>
<font color=#009900>//  width=250 height=400&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.util.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> DynamicEvents <font color=#0000ff>extends</font> JApplet {
  ArrayList v = <font color=#0000ff>new</font> ArrayList();
  <font color=#0000ff>int</font> i = 0;
  JButton
    b1 = <font color=#0000ff>new</font> JButton(<font color=#004488>"Button1"</font>),
    b2 = <font color=#0000ff>new</font> JButton(<font color=#004488>"Button2"</font>);
  JTextArea txt = <font color=#0000ff>new</font> JTextArea();
  <font color=#0000ff>class</font> B <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      txt.append(<font color=#004488>"A button was pressed\n"</font>);
    }
  }
  <font color=#0000ff>class</font> CountListener <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>int</font> index;
    <font color=#0000ff>public</font> CountListener(<font color=#0000ff>int</font> i) { index = i; }
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      txt.append(<font color=#004488>"Counted Listener "</font>+index+<font color=#004488>"\n"</font>);
    }
  }
  <font color=#0000ff>class</font> B1 <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      txt.append(<font color=#004488>"Button 1 pressed\n"</font>);
      ActionListener a = <font color=#0000ff>new</font> CountListener(i++);
      v.add(a);
      b2.addActionListener(a);
    }
  }
  <font color=#0000ff>class</font> B2 <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      txt.append(<font color=#004488>"Button2 pressed\n"</font>);
      <font color=#0000ff>int</font> end = v.size() - 1;
      <font color=#0000ff>if</font>(end &gt;= 0) {
        b2.removeActionListener(
          (ActionListener)v.get(end));
        v.remove(end);
      }
    }
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    b1.addActionListener(<font color=#0000ff>new</font> B());
    b1.addActionListener(<font color=#0000ff>new</font> B1());
    b2.addActionListener(<font color=#0000ff>new</font> B());
    b2.addActionListener(<font color=#0000ff>new</font> B2());
    JPanel p = <font color=#0000ff>new</font> JPanel();
    p.add(b1);
    p.add(b2);
    cp.add(BorderLayout.NORTH, p);
    cp.add(<font color=#0000ff>new</font> JScrollPane(txt));
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> DynamicEvents(), 250, 400);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The new twists in this example are:
<A NAME="Index1790"></A><A NAME="Index1791"></A><A NAME="Index1792"></A><A NAME="Index1793"></A><A NAME="Index1794"></A>

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I207' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I208>
</FONT><BR></P></DIV>
<OL>
<LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">There is more than one
listener attached to each <B>Button</B>. Usually, components handle events as
<I>multicast</I>, meaning that you can register many listeners for a single
event. In the special components in which an event is handled as <I>unicast</I>,
you&#8217;ll get a <B>TooManyListenersException</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I208' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I209>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">During
the execution of the program, listeners are dynamically added and removed from
the <B>Button b2</B>. Adding is accomplished in the way you&#8217;ve seen
before, but each component also has a <B>removeXXXListener(&#160;)</B> method to
remove each type of listener.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I209' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I210>
</FONT></OL><DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This
kind of flexibility provides much greater power in your programming.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I210' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I211>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You should notice that
<A NAME="Index1795"></A>event listeners are not guaranteed to be called in the
order they are added (although most implementations do in fact work that way).

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I211' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I212>
</FONT><A NAME="_Toc481064834"></A><BR></P></DIV>
<A NAME="Heading469"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Separating business logic <BR>from UI logic<BR><A NAME="Index1796"></A></H3></FONT>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>In general you&#8217;ll want to design your classes so that each one does &#8220;only one thing.&#8221; This is particularly important when user-<font color=#0000ff>interface</font> code is concerned, since it&#8217;s easy to tie up &#8220;what you&#8217;re doing&#8221; with &#8220;how you&#8217;re displaying it.&#8221; This kind of coupling prevents code reuse. It&#8217;s much more desirable to separate your &#8220;business logic&#8221; from the GUI. This way, you can not only reuse the business logic more easily, it&#8217;s also easier to reuse the GUI.</PRE></FONT></BLOCKQUOTE><DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Another
issue is <A NAME="Index1797"></A><I>multitiered</I> systems, where the
&#8220;<A NAME="Index1798"></A><A NAME="Index1799"></A>business objects&#8221;
reside on a completely separate machine. This central location of the business
rules allows changes to be instantly effective for all new transactions, and is
thus a compelling way to set up a system. However, these business objects can be
used in many different applications and so should not be tied to any particular
mode of display. They should just perform the business operations and nothing
more. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I212' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I213>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The following example shows how easy it
is to separate the business logic from the GUI code:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:Separation.java</font>
<font color=#009900>// Separating GUI logic and business objects.</font>
<font color=#009900>// &lt;applet code=Separation</font>
<font color=#009900>// width=250 height=150&gt; &lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> javax.swing.event.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.applet.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>class</font> BusinessLogic {
  <font color=#0000ff>private</font> <font color=#0000ff>int</font> modifier;
  <font color=#0000ff>public</font> BusinessLogic(<font color=#0000ff>int</font> mod) {
    modifier = mod;
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> setModifier(<font color=#0000ff>int</font> mod) {
    modifier = mod;
  }
  <font color=#0000ff>public</font> <font color=#0000ff>int</font> getModifier() {
    <font color=#0000ff>return</font> modifier;
  }
  <font color=#009900>// Some business operations:</font>
  <font color=#0000ff>public</font> <font color=#0000ff>int</font> calculation1(<font color=#0000ff>int</font> arg) {
    <font color=#0000ff>return</font> arg * modifier;
  }
  <font color=#0000ff>public</font> <font color=#0000ff>int</font> calculation2(<font color=#0000ff>int</font> arg) {
    <font color=#0000ff>return</font> arg + modifier;
  }
}

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Separation <font color=#0000ff>extends</font> JApplet {
  JTextField 
    t = <font color=#0000ff>new</font> JTextField(15),
    mod = <font color=#0000ff>new</font> JTextField(15);
  BusinessLogic bl = <font color=#0000ff>new</font> BusinessLogic(2);
  JButton
    calc1 = <font color=#0000ff>new</font> JButton(<font color=#004488>"Calculation 1"</font>),
    calc2 = <font color=#0000ff>new</font> JButton(<font color=#004488>"Calculation 2"</font>);
  <font color=#0000ff>static</font> <font color=#0000ff>int</font> getValue(JTextField tf) {
    <font color=#0000ff>try</font> {
      <font color=#0000ff>return</font> Integer.parseInt(tf.getText());
    } <font color=#0000ff>catch</font>(NumberFormatException e) {
      <font color=#0000ff>return</font> 0;
    }
  }
  <font color=#0000ff>class</font> Calc1L <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      t.setText(Integer.toString(
        bl.calculation1(getValue(t))));
    }
  }
  <font color=#0000ff>class</font> Calc2L <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      t.setText(Integer.toString(
        bl.calculation2(getValue(t))));
    }
  }
  <font color=#009900>// If you want something to happen whenever</font>
  <font color=#009900>// a JTextField changes, add this listener:</font>
  <font color=#0000ff>class</font> ModL <font color=#0000ff>implements</font> DocumentListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> changedUpdate(DocumentEvent e) {}
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> insertUpdate(DocumentEvent e) {
      bl.setModifier(getValue(mod));
    }
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> removeUpdate(DocumentEvent e) {
      bl.setModifier(getValue(mod));
    }
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    cp.add(t);
    calc1.addActionListener(<font color=#0000ff>new</font> Calc1L());
    calc2.addActionListener(<font color=#0000ff>new</font> Calc2L());
    JPanel p1 = <font color=#0000ff>new</font> JPanel();
    p1.add(calc1); 
    p1.add(calc2);
    cp.add(p1);
    mod.getDocument().
      addDocumentListener(<font color=#0000ff>new</font> ModL());
    JPanel p2 = <font color=#0000ff>new</font> JPanel();
    p2.add(<font color=#0000ff>new</font> JLabel(<font color=#004488>"Modifier:"</font>));
    p2.add(mod);
    cp.add(p2);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> Separation(), 250, 100);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You can see that <B>BusinessLogic</B> is
a straightforward class that performs its operations without even a hint that it
might be used in a GUI environment. It just does its job.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I213' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I214>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>Separation</B> keeps track of all the
UI details, and it talks to <B>BusinessLogic</B> only through its <B>public</B>
interface. All the operations are centered around getting information back and
forth through the UI and the <B>BusinessLogic</B> object. So <B>Separation</B>,
in turn, just does its job. Since <B>Separation</B> knows only that it&#8217;s
talking to a <B>BusinessLogic</B> object (that is, it isn&#8217;t highly
coupled), it could be massaged into talking to other types of objects without
much trouble. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I214' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I215>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Thinking in terms of separating UI from
business logic also makes life easier when you&#8217;re adapting legacy code to
work with Java.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I215' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I216>
</FONT><A NAME="_Toc481064835"></A><BR></P></DIV>
<A NAME="Heading470"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
A canonical form</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Inner classes, the Swing event model, and
the fact that the old event model is still supported along with new library
features that rely on old-style programming has added a new element of confusion
to the code design process. Now there are even more different ways for people to
write unpleasant code.  
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I216' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I217>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Except in extenuating circumstances you
can always use the simplest and clearest approach:
<A NAME="Index1800"></A>listener classes (typically written as
<A NAME="Index1801"></A><A NAME="Index1802"></A>inner classes) to solve your
event-handling needs. This is the form used in most of the examples in this
chapter. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I217' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I218>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">By following this model you should be
able to reduce the statements in your programs that say: &#8220;I wonder what
caused this event.&#8221; Each piece of code is concerned with <I>doing</I>, not
type-checking. This is the best way to write your code; not only is it easier to
conceptualize, but much easier to read and maintain.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I218' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I219>
</FONT><A NAME="_Toc481064836"></A><BR></P></DIV>
<A NAME="Heading471"></A><FONT FACE = "Verdana"><H2 ALIGN="LEFT">
Visual programming <BR>and
Beans<BR><A NAME="Index1803"></A><A NAME="Index1804"></A></H2></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">So far in this book you&#8217;ve seen how
valuable Java is for creating reusable pieces of code. The &#8220;most
reusable&#8221; unit of code has been the class, since it comprises a cohesive
unit of characteristics (fields) and behaviors (methods) that can be reused
either directly via composition or through inheritance.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I219' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I220>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Inheritance and polymorphism are
essential parts of object-oriented programming, but in the majority of cases
when you&#8217;re putting together an application, what you really want is
components that do exactly what you need. You&#8217;d like to drop these parts
into your design like the electronic engineer puts together chips on a circuit
board. It seems, too, that there should be some way to accelerate this
&#8220;modular assembly&#8221; style of programming.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I220' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I221>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><A NAME="Index1805"></A><A NAME="Index1806"></A><A NAME="Index1807"></A><A NAME="Index1808"></A><A NAME="Index1809"></A><A NAME="Index1810"></A><A NAME="Index1811"></A><A NAME="Index1812"></A><A NAME="Index1813"></A><FONT FACE="Georgia">&#8220;Visual
programming&#8221; first became successful&#8212;<I>very</I>
successful&#8212;with Microsoft&#8217;s Visual Basic (VB), followed by a
second-generation design in Borland&#8217;s Delphi (the primary inspiration for
the JavaBeans design). With these programming tools the components are
represented visually, which makes sense since they usually display some kind of
visual component such as a button or a text field. The visual representation, in
fact, is often exactly the way the component will look in the running program.
So part of the process of visual programming involves dragging a component from
a palette and dropping it onto your form. The
<A NAME="Index1814"></A><A NAME="Index1815"></A>application builder tool writes
code as you do this, and that code will cause the component to be created in the
running program. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I221' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I222>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Simply dropping the component onto a form
is usually not enough to complete the program. Often, you must change the
characteristics of a component, such as what color it is, what text is on it,
what database it&#8217;s connected to, etc. Characteristics that can be modified
at design time are referred to as
<A NAME="Index1816"></A><A NAME="Index1817"></A><I>properties</I>. You can
manipulate the properties of your component inside the application builder tool,
and when you create the program this configuration data is saved so that it can
be rejuvenated when the program is started.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I222' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I223>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">By now you&#8217;re probably used to the
idea that an object is more than characteristics; it&#8217;s also a set of
behaviors. At design-time, the behaviors of a visual component are partially
represented by <A NAME="Index1818"></A><A NAME="Index1819"></A><I>events</I>,
meaning &#8220;Here&#8217;s something that can happen to the component.&#8221;
Ordinarily, you decide what you want to happen when an event occurs by tying
code to that event. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I223' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I224>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><A NAME="Index1820"></A><A NAME="Index1821"></A><FONT FACE="Georgia">Here&#8217;s
the critical part: the application builder tool uses reflection to dynamically
interrogate the component and find out which properties and events the component
supports. Once it knows what they are, it can display the properties and allow
you to change those (saving the state when you build the program), and also
display the events. In general, you do something like double-clicking on an
event and the application builder tool creates a code body and ties it to that
particular event. All you have to do at that point is write the code that
executes when the event occurs.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I224' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I225>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">All this adds up to a lot of work
that&#8217;s done for you by the application builder tool. As a result you can
focus on what the program looks like and what it is supposed to do, and rely on
the application builder tool to manage the connection details for you. The
reason that visual programming tools have been so successful is that they
dramatically speed up the process of building an application&#8212;certainly the
user interface, but often other portions of the application as well.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I225' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I226>
</FONT><A NAME="_Toc481064837"></A><BR></P></DIV>
<A NAME="Heading472"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
What is a Bean?<BR><A NAME="Index1822"></A><A NAME="Index1823"></A></H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">After the dust settles, then, a component
is really just a block of code, typically embodied in a class. The key issue is
the ability for the application builder tool to discover the properties and
events for that component. To create a VB component, the programmer had to write
a fairly complicated piece of code following certain conventions to expose the
properties and events. Delphi was a second-generation visual programming tool
and the language was actively designed around visual programming so it is much
easier to create a visual component. However, Java has brought the creation of
visual components to its most advanced state with JavaBeans, because a Bean is
just a class. You don&#8217;t have to write any extra code or use special
language extensions in order to make something a Bean. The only thing you need
to do, in fact, is slightly modify the way that you name your methods. It is the
method name that tells the application builder tool whether this is a property,
an event, or just an ordinary method.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I226' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I227>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><A NAME="Index1824"></A><FONT FACE="Georgia">In the Java
documentation, this naming convention is mistakenly termed a &#8220;design
pattern.&#8221; This is unfortunate, since design patterns (see <I>Thinking in
Patterns with Java</I>, downloadable at <I>www.BruceEckel.com</I>) are
challenging enough without this sort of confusion. It&#8217;s not a design
pattern, it&#8217;s just a naming convention and it&#8217;s fairly
simple:</FONT><BR></P></DIV>
<OL>
<LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">For a property named
<B>xxx</B>, you typically create two methods: <B>getXxx(&#160;)</B> and
<B>setXxx(&#160;)</B>. Note that the first letter after &#8220;get&#8221; or
&#8220;set&#8221; is automatically lowercased to produce the property name. The
type produced by the &#8220;get&#8221; method is the same as the type of the
argument to the &#8220;set&#8221; method. The name of the property and the type
for the &#8220;get&#8221; and &#8220;set&#8221; are not related.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I227' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I228>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">For
a <B>boolean</B> property, you can use the &#8220;get&#8221; and
&#8220;set&#8221; approach above, but you can also use &#8220;is&#8221; instead
of &#8220;get.&#8221;

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I228' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I229>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Ordinary
methods of the Bean don&#8217;t conform to the above naming convention, but
they&#8217;re <B>public</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I229' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I230>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">For
events, you use the Swing &#8220;listener&#8221; approach. It&#8217;s exactly
the same as you&#8217;ve been seeing: <B>addFooBarListener(FooBarListener)</B>
and <B>removeFooBarListener(FooBarListener)</B> to handle a <B>FooBarEvent</B>.
Most of the time the built-in events and listeners will satisfy your needs, but
you can also create your own events and listener interfaces.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I230' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I231>
</FONT></OL><DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Point
1 above answers a question about something you might have noticed when looking
at older code vs. newer code: a number of method names have had small,
apparently meaningless name changes. Now you can see that most of those changes
had to do with adapting to the &#8220;get&#8221; and &#8220;set&#8221; naming
conventions in order to make that particular component into a Bean.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I231' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I232>
</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>We can use these guidelines to create a simple Bean:
<font color=#009900>//: frogbean:Frog.java</font>
<font color=#009900>// A trivial JavaBean.</font>
<font color=#0000ff>package</font> frogbean;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;

<font color=#0000ff>class</font> Spots {}

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Frog {
  <font color=#0000ff>private</font> <font color=#0000ff>int</font> jumps;
  <font color=#0000ff>private</font> Color color;
  <font color=#0000ff>private</font> Spots spots;
  <font color=#0000ff>private</font> <font color=#0000ff>boolean</font> jmpr;
  <font color=#0000ff>public</font> <font color=#0000ff>int</font> getJumps() { <font color=#0000ff>return</font> jumps; }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> setJumps(<font color=#0000ff>int</font> newJumps) { 
    jumps = newJumps;
  }
  <font color=#0000ff>public</font> Color getColor() { <font color=#0000ff>return</font> color; }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> setColor(Color newColor) { 
    color = newColor; 
  }
  <font color=#0000ff>public</font> Spots getSpots() { <font color=#0000ff>return</font> spots; }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> setSpots(Spots newSpots) {
    spots = newSpots; 
  }
  <font color=#0000ff>public</font> <font color=#0000ff>boolean</font> isJumper() { <font color=#0000ff>return</font> jmpr; }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> setJumper(<font color=#0000ff>boolean</font> j) { jmpr = j; }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> addActionListener(
      ActionListener l) {
    <font color=#009900>//...</font>
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> removeActionListener(
      ActionListener l) {
    <font color=#009900>// ...</font>
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> addKeyListener(KeyListener l) {
    <font color=#009900>// ...</font>
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> removeKeyListener(KeyListener l) {
    <font color=#009900>// ...</font>
  }
  <font color=#009900>// An "ordinary" public method:</font>
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> croak() {
    System.out.println(<font color=#004488>"Ribbet!"</font>);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">First, you can see that it&#8217;s just a
class. Usually, all your fields will be <B>private</B>, and accessible only
through methods. Following the naming convention, the properties are
<B>jumps</B>, <B>color</B>, <B>spots</B>, and <B>jumper</B> (notice the case
change of the first letter in the property name). Although the name of the
internal identifier is the same as the name of the property in the first three
cases, in <B>jumper</B> you can see that the property name does not force you to
use any particular identifier for internal variables (or, indeed, to even
<I>have</I> any internal variables for that property).

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I232' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I233>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The events this Bean handles are
<B>ActionEvent</B> and <B>KeyEvent</B>, based on the naming of the
&#8220;add&#8221; and &#8220;remove&#8221; methods for the associated listener.
Finally, you can see that the ordinary method <B>croak(&#160;)</B> is still part
of the Bean simply because it&#8217;s a <B>public</B> method, not because it
conforms to any naming scheme.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I233' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I234>
</FONT><A NAME="_Toc481064838"></A><BR></P></DIV>
<A NAME="Heading473"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Extracting BeanInfo <BR>with the Introspector</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">One of the most critical parts of the
Bean scheme occurs when you drag a Bean off a palette and plop it onto a form.
The application builder tool must be able to create the Bean (which it can do if
there&#8217;s a default constructor) and then, without access to the
Bean&#8217;s source code, extract all the necessary information to create the
property sheet and event handlers.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I234' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I235>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Part of the solution is already evident
from the end of Chapter 12: Java
<A NAME="Index1825"></A><A NAME="Index1826"></A><I>reflection</I> allows all the
methods of an anonymous class to be discovered. This is perfect for solving the
Bean problem without requiring you to use any extra language keywords like those
required in other visual programming languages. In fact, one of the prime
reasons that reflection was added to Java was to support Beans (although
reflection also supports object serialization and remote method invocation). So
you might expect that the creator of the application builder tool would have to
reflect each Bean and hunt through its methods to find the properties and events
for that Bean. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I235' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I236>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This is certainly possible, but the Java
designers wanted to provide a standard tool, not only to make Beans simpler to
use but also to provide a standard gateway to the creation of more complex
Beans. This tool is the
<A NAME="Index1827"></A><A NAME="Index1828"></A><B>Introspector</B> class, and
the most important method in this class is the <B>static
<A NAME="Index1829"></A><A NAME="Index1830"></A>getBeanInfo(&#160;)</B>. You
pass a <B>Class</B> reference to this method and it fully interrogates that
class and returns a <B>BeanInfo</B> object that you can then dissect to find
properties, methods, and events.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I236' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I237>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Usually you won&#8217;t care about any of
this&#8212;you&#8217;ll probably get most of your Beans off the shelf from
vendors, and you don&#8217;t need to know all the magic that&#8217;s going on
underneath. You&#8217;ll simply drag your Beans onto your form, then configure
their properties and write handlers for the events you&#8217;re interested in.
However, it&#8217;s an interesting and educational exercise to use the
<B>Introspector</B> to display information about a Bean, so here&#8217;s a tool
that does it:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:BeanDumper.java</font>
<font color=#009900>// Introspecting a Bean.</font>
<font color=#009900>// &lt;applet code=BeanDumper width=600 height=500&gt;</font>
<font color=#009900>// &lt;/applet&gt;</font>
<font color=#0000ff>import</font> java.beans.*;
<font color=#0000ff>import</font> java.lang.reflect.*;
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> BeanDumper <font color=#0000ff>extends</font> JApplet {
  JTextField query = 
    <font color=#0000ff>new</font> JTextField(20);
  JTextArea results = <font color=#0000ff>new</font> JTextArea();
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> prt(String s) {
    results.append(s + <font color=#004488>"\n"</font>);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> dump(Class bean){
    results.setText(<font color=#004488>""</font>);
    BeanInfo bi = <font color=#0000ff>null</font>;
    <font color=#0000ff>try</font> {
      bi = Introspector.getBeanInfo(
        bean, java.lang.Object.<font color=#0000ff>class</font>);
    } <font color=#0000ff>catch</font>(IntrospectionException e) {
      prt(<font color=#004488>"Couldn't introspect "</font> + 
        bean.getName());
      <font color=#0000ff>return</font>;
    }
    PropertyDescriptor[] properties = 
      bi.getPropertyDescriptors();
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; properties.length; i++) {
      Class p = properties[i].getPropertyType();
      prt(<font color=#004488>"Property type:\n  "</font> + p.getName() +
        <font color=#004488>"Property name:\n  "</font> + 
        properties[i].getName());
      Method readMethod = 
        properties[i].getReadMethod();
      <font color=#0000ff>if</font>(readMethod != <font color=#0000ff>null</font>)
        prt(<font color=#004488>"Read method:\n  "</font> + readMethod);
      Method writeMethod = 
        properties[i].getWriteMethod();
      <font color=#0000ff>if</font>(writeMethod != <font color=#0000ff>null</font>)
        prt(<font color=#004488>"Write method:\n  "</font> + writeMethod);
      prt(<font color=#004488>"===================="</font>);
    }
    prt(<font color=#004488>"Public methods:"</font>);
    MethodDescriptor[] methods =
      bi.getMethodDescriptors();
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; methods.length; i++)
      prt(methods[i].getMethod().toString());
    prt(<font color=#004488>"======================"</font>);
    prt(<font color=#004488>"Event support:"</font>);
    EventSetDescriptor[] events = 
      bi.getEventSetDescriptors();
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; events.length; i++) {
      prt(<font color=#004488>"Listener type:\n  "</font> +
        events[i].getListenerType().getName());
      Method[] lm = 
        events[i].getListenerMethods();
      <font color=#0000ff>for</font>(<font color=#0000ff>int</font> j = 0; j &lt; lm.length; j++)
        prt(<font color=#004488>"Listener method:\n  "</font> +
          lm[j].getName());
      MethodDescriptor[] lmd = 
        events[i].getListenerMethodDescriptors();
      <font color=#0000ff>for</font>(<font color=#0000ff>int</font> j = 0; j &lt; lmd.length; j++)
        prt(<font color=#004488>"Method descriptor:\n  "</font> +
          lmd[j].getMethod());
      Method addListener = 
        events[i].getAddListenerMethod();
      prt(<font color=#004488>"Add Listener Method:\n  "</font> +
          addListener);
      Method removeListener =
        events[i].getRemoveListenerMethod();
      prt(<font color=#004488>"Remove Listener Method:\n  "</font> +
        removeListener);
      prt(<font color=#004488>"===================="</font>);
    }
  }
  <font color=#0000ff>class</font> Dumper <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      String name = query.getText();
      Class c = <font color=#0000ff>null</font>;
      <font color=#0000ff>try</font> {
        c = Class.forName(name);
      } <font color=#0000ff>catch</font>(ClassNotFoundException ex) {
        results.setText(<font color=#004488>"Couldn't find "</font> + name);
        <font color=#0000ff>return</font>;
      }
      dump(c);
    }
  }      
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    JPanel p = <font color=#0000ff>new</font> JPanel();
    p.setLayout(<font color=#0000ff>new</font> FlowLayout());
    p.add(<font color=#0000ff>new</font> JLabel(<font color=#004488>"Qualified bean name:"</font>));
    p.add(query);
    cp.add(BorderLayout.NORTH, p);
    cp.add(<font color=#0000ff>new</font> JScrollPane(results));
    Dumper dmpr = <font color=#0000ff>new</font> Dumper();
    query.addActionListener(dmpr);
    query.setText(<font color=#004488>"frogbean.Frog"</font>);
    <font color=#009900>// Force evaluation</font>
    dmpr.actionPerformed(
      <font color=#0000ff>new</font> ActionEvent(dmpr, 0, <font color=#004488>""</font>));
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> BeanDumper(), 600, 500);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>BeanDumper.dump(&#160;)</B> is the
method that does all the work. First it tries to create a <B>BeanInfo</B>
object, and if successful calls the methods of <B>BeanInfo</B> that produce
information about properties, methods, and events. In
<B>Introspector.getBeanInfo(&#160;)</B>, you&#8217;ll see there is a second
argument. This tells the <B>Introspector</B> where to stop in the inheritance
hierarchy. Here, it stops before it parses all the methods from <B>Object</B>,
since we&#8217;re not interested in seeing those.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I237' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I238>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">For properties,
<A NAME="Index1831"></A><A NAME="Index1832"></A><B>getPropertyDescriptors(&#160;)</B>
returns an array of
<A NAME="Index1833"></A><A NAME="Index1834"></A><B>PropertyDescriptor</B>s. For
each <B>PropertyDescriptor</B> you can call
<A NAME="Index1835"></A><A NAME="Index1836"></A><B>getPropertyType(&#160;)</B>
to find the class of object that is passed in and out via the property methods.
Then, for each property you can get its pseudonym (extracted from the method
names) with
<A NAME="Index1837"></A><A NAME="Index1838"></A><B>getName(&#160;)</B>, the
method for reading with
<A NAME="Index1839"></A><A NAME="Index1840"></A><B>getReadMethod(&#160;)</B>,
and the method for writing with
<A NAME="Index1841"></A><A NAME="Index1842"></A><B>getWriteMethod(&#160;)</B>.
These last two methods return a <B>Method</B> object that can actually be used
to invoke the corresponding method on the object (this is part of reflection).

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I238' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I239>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">For the <B>public</B> methods (including
the property methods),
<A NAME="Index1843"></A><A NAME="Index1844"></A><B>getMethodDescriptors(&#160;)</B>
returns an array of
<A NAME="Index1845"></A><A NAME="Index1846"></A><B>MethodDescriptor</B>s. For
each one you can get the associated
<A NAME="Index1847"></A><A NAME="Index1848"></A><B>Method</B> object and print
its name. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I239' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I240>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">For the events,
<A NAME="Index1849"></A><A NAME="Index1850"></A><B>getEventSetDescriptors(&#160;)</B>
returns an array of (what else?)
<A NAME="Index1851"></A><A NAME="Index1852"></A><B>EventSetDescriptor</B>s. Each
of these can be queried to find out the class of the listener, the methods of
that listener class, and the add- and remove-listener methods. The <B>BeanDumper
</B>program prints out all of this information.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I240' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I241>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Upon startup, the program forces the
evaluation of <B>frogbean.Frog</B>. The output, after removing extra details
that are unnecessary here, is:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#0000ff>class</font> name: Frog
Property type:
  Color
Property name:
  color
Read method:
  <font color=#0000ff>public</font> Color getColor()
Write method:
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> setColor(Color)
====================
Property type:
  Spots
Property name:
  spots
Read method:
  <font color=#0000ff>public</font> Spots getSpots()
Write method:
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> setSpots(Spots)
====================
Property type:
  <font color=#0000ff>boolean</font>
Property name:
  jumper
Read method:
  <font color=#0000ff>public</font> <font color=#0000ff>boolean</font> isJumper()
Write method:
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> setJumper(<font color=#0000ff>boolean</font>)
====================
Property type:
  <font color=#0000ff>int</font>
Property name:
  jumps
Read method:
  <font color=#0000ff>public</font> <font color=#0000ff>int</font> getJumps()
Write method:
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> setJumps(<font color=#0000ff>int</font>)
====================
Public methods:
<font color=#0000ff>public</font> <font color=#0000ff>void</font> setJumps(<font color=#0000ff>int</font>)
<font color=#0000ff>public</font> <font color=#0000ff>void</font> croak()
<font color=#0000ff>public</font> <font color=#0000ff>void</font> removeActionListener(ActionListener)
<font color=#0000ff>public</font> <font color=#0000ff>void</font> addActionListener(ActionListener)
<font color=#0000ff>public</font> <font color=#0000ff>int</font> getJumps()
<font color=#0000ff>public</font> <font color=#0000ff>void</font> setColor(Color)
<font color=#0000ff>public</font> <font color=#0000ff>void</font> setSpots(Spots)
<font color=#0000ff>public</font> <font color=#0000ff>void</font> setJumper(<font color=#0000ff>boolean</font>)
<font color=#0000ff>public</font> <font color=#0000ff>boolean</font> isJumper()
<font color=#0000ff>public</font> <font color=#0000ff>void</font> addKeyListener(KeyListener)
<font color=#0000ff>public</font> Color getColor()
<font color=#0000ff>public</font> <font color=#0000ff>void</font> removeKeyListener(KeyListener)
<font color=#0000ff>public</font> Spots getSpots()
======================
Event support:
Listener type:
  KeyListener
Listener method:
  keyTyped
Listener method:
  keyPressed
Listener method:
  keyReleased
Method descriptor:
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> keyTyped(KeyEvent)
Method descriptor:
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> keyPressed(KeyEvent)
Method descriptor:
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> keyReleased(KeyEvent)
Add Listener Method:
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> addKeyListener(KeyListener)
Remove Listener Method:
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> removeKeyListener(KeyListener)
====================
Listener type:
  ActionListener
Listener method:
  actionPerformed
Method descriptor:
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent)
Add Listener Method:
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> addActionListener(ActionListener)
Remove Listener Method:
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> removeActionListener(ActionListener)
====================</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This reveals most of what the
<B>Introspector</B> sees as it produces a <B>BeanInfo</B> object from your Bean.
You can see that the type of the property and its name are independent. Notice
the lowercasing of the property name. (The only time this doesn&#8217;t occur is
when the property name begins with more than one capital letter in a row.) And
remember that the method names you&#8217;re seeing here (such as the read and
write methods) are actually produced from a <B>Method</B> object that can be
used to invoke the associated method on the object.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I241' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I242>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The <B>public</B> method list includes
the methods that are not associated with a property or event, such as
<B>croak(&#160;)</B>, as well as those that are. These are all the methods that
you can call programmatically for a Bean, and the application builder tool can
choose to list all of these while you&#8217;re making method calls, to ease your
task. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I242' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I243>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Finally, you can see that the events are
fully parsed out into the listener, its methods, and the add- and
remove-listener methods. Basically, once you have the <B>BeanInfo</B>, you can
find out everything of importance for the Bean. You can also call the methods
for that Bean, even though you don&#8217;t have any other information except the
object (again, a feature of reflection).

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I243' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I244>
</FONT><A NAME="_Toc481064839"></A><BR></P></DIV>
<A NAME="Heading474"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
A more sophisticated Bean</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This next example is slightly more
sophisticated, albeit frivolous. It&#8217;s a <B>JPanel</B> that draws a little
circle around the mouse whenever the mouse is moved. When you press the mouse,
the word &#8220;Bang!&#8221; appears in the middle of the screen, and an action
listener is fired. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I244' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I245>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The properties you can change are the
size of the circle as well as the color, size, and text of the word that is
displayed when you press the mouse. A <B>BangBean</B> also has its own
<A NAME="Index1853"></A><B>addActionListener(&#160;)</B> and
<A NAME="Index1854"></A><B>removeActionListener(&#160;)</B> so you can attach
your own listener that will be fired when the user clicks on the
<B>BangBean</B>. You should be able to recognize the property and event
support:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: bangbean:BangBean.java</font>
<font color=#009900>// A graphical Bean.</font>
<font color=#0000ff>package</font> bangbean;
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.io.*;
<font color=#0000ff>import</font> java.util.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> BangBean <font color=#0000ff>extends</font> JPanel
     <font color=#0000ff>implements</font> Serializable {
  <font color=#0000ff>protected</font> <font color=#0000ff>int</font> xm, ym;
  <font color=#0000ff>protected</font> <font color=#0000ff>int</font> cSize = 20; <font color=#009900>// Circle size</font>
  <font color=#0000ff>protected</font> String text = <font color=#004488>"Bang!"</font>;
  <font color=#0000ff>protected</font> <font color=#0000ff>int</font> fontSize = 48;
  <font color=#0000ff>protected</font> Color tColor = Color.red;
  <font color=#0000ff>protected</font> ActionListener actionListener;
  <font color=#0000ff>public</font> BangBean() {
    addMouseListener(<font color=#0000ff>new</font> ML());
    addMouseMotionListener(<font color=#0000ff>new</font> MML());
  }
  <font color=#0000ff>public</font> <font color=#0000ff>int</font> getCircleSize() { <font color=#0000ff>return</font> cSize; }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> setCircleSize(<font color=#0000ff>int</font> newSize) {
    cSize = newSize;
  }
  <font color=#0000ff>public</font> String getBangText() { <font color=#0000ff>return</font> text; }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> setBangText(String newText) {
    text = newText;
  }
  <font color=#0000ff>public</font> <font color=#0000ff>int</font> getFontSize() { <font color=#0000ff>return</font> fontSize; }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> setFontSize(<font color=#0000ff>int</font> newSize) {
    fontSize = newSize;
  }
  <font color=#0000ff>public</font> Color getTextColor() { <font color=#0000ff>return</font> tColor; }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> setTextColor(Color newColor) {
    tColor = newColor;
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> paintComponent(Graphics g) {
    <font color=#0000ff>super</font>.paintComponent(g);
    g.setColor(Color.black);
    g.drawOval(xm - cSize/2, ym - cSize/2, 
      cSize, cSize);
  }
  <font color=#009900>// This is a unicast listener, which is</font>
  <font color=#009900>// the simplest form of listener management:</font>
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> addActionListener (
      ActionListener l) 
        <font color=#0000ff>throws</font> TooManyListenersException {
    <font color=#0000ff>if</font>(actionListener != <font color=#0000ff>null</font>)
      <font color=#0000ff>throw</font> <font color=#0000ff>new</font> TooManyListenersException();
    actionListener = l;
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> removeActionListener(
      ActionListener l) {
    actionListener = <font color=#0000ff>null</font>;
  }
  <font color=#0000ff>class</font> ML <font color=#0000ff>extends</font> MouseAdapter {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> mousePressed(MouseEvent e) {
      Graphics g = getGraphics();
      g.setColor(tColor);
      g.setFont(
        <font color=#0000ff>new</font> Font(
          <font color=#004488>"TimesRoman"</font>, Font.BOLD, fontSize));
      <font color=#0000ff>int</font> width = 
        g.getFontMetrics().stringWidth(text);
      g.drawString(text, 
        (getSize().width - width) /2,
        getSize().height/2);
      g.dispose();
      <font color=#009900>// Call the listener's method:</font>
      <font color=#0000ff>if</font>(actionListener != <font color=#0000ff>null</font>)
        actionListener.actionPerformed(
          <font color=#0000ff>new</font> ActionEvent(BangBean.<font color=#0000ff>this</font>,
            ActionEvent.ACTION_PERFORMED, <font color=#0000ff>null</font>));
    }
  }
  <font color=#0000ff>class</font> MML <font color=#0000ff>extends</font> MouseMotionAdapter {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> mouseMoved(MouseEvent e) {
      xm = e.getX();
      ym = e.getY();
      repaint();
    }
  }
  <font color=#0000ff>public</font> Dimension getPreferredSize() {
    <font color=#0000ff>return</font> <font color=#0000ff>new</font> Dimension(200, 200);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The first thing you&#8217;ll notice is
that <B>BangBean</B> implements the
<A NAME="Index1855"></A><A NAME="Index1856"></A><B>Serializable</B> interface.
This means that the application builder tool can &#8220;pickle&#8221; all the
information for the <B>BangBean</B> using serialization after the program
designer has adjusted the values of the properties. When the Bean is created as
part of the running application, these &#8220;pickled&#8221; properties are
restored so that you get exactly what you designed.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I245' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I246>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You can see that all the fields are
<B>private</B>, which is what you&#8217;ll usually do with a Bean&#8212;allow
access only through methods, usually using the &#8220;property&#8221; scheme.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I246' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I247>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">When you look at the signature for
<B>addActionListener(&#160;)</B>, you&#8217;ll see that it can throw a
<A NAME="Index1857"></A><B>TooManyListenersException</B>. This indicates that it
is <A NAME="Index1858"></A><I>unicast</I>, which means it notifies only one
listener when the event occurs. Ordinarily, you&#8217;ll use
<A NAME="Index1859"></A><I>multicast</I> events so that many listeners can be
notified of an event. However, that runs into issues that you won&#8217;t be
ready for until the next chapter, so it will be revisited there (under the
heading &#8220;JavaBeans revisited&#8221;). A unicast event sidesteps the
problem. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I247' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I248>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">When you click the mouse, the text is put
in the middle of the <B>BangBean</B>, and if the <B>actionListener</B> field is
not <B>null</B>, its <B>actionPerformed(&#160;)</B> is called, creating a new
<A NAME="Index1860"></A><B>ActionEvent </B>object in the process. Whenever the
mouse is moved, its new coordinates are captured and the canvas is repainted
(erasing any text that&#8217;s on the canvas, as you&#8217;ll see).

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I248' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I249>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Here is the <B>BangBeanTest</B> class to
allow you to test the bean as either an applet or an
application:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c13:BangBeanTest.java</font>
<font color=#009900>// &lt;applet code=BangBeanTest </font>
<font color=#009900>// width=400 height=500&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> bangbean.*;
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.util.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> BangBeanTest <font color=#0000ff>extends</font> JApplet {
  JTextField txt = <font color=#0000ff>new</font> JTextField(20);
  <font color=#009900>// During testing, report actions:</font>
  <font color=#0000ff>class</font> BBL <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>int</font> count = 0;
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e){
      txt.setText(<font color=#004488>"BangBean action "</font>+ count++);
    }
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    BangBean bb = <font color=#0000ff>new</font> BangBean();
    <font color=#0000ff>try</font> {
      bb.addActionListener(<font color=#0000ff>new</font> BBL());
    } <font color=#0000ff>catch</font>(TooManyListenersException e) {
      txt.setText(<font color=#004488>"Too many listeners"</font>);
    }
    Container cp = getContentPane();
    cp.add(bb);
    cp.add(BorderLayout.SOUTH, txt);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> BangBeanTest(), 400, 500);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">When a Bean is in a development
environment, this class will not be used, but it&#8217;s helpful to provide a
rapid testing method for each of your Beans. <B>BangBeanTest</B> places a
<B>BangBean</B> within the applet, attaching a simple <B>ActionListener</B> to
the <B>BangBean</B> to print an event count to the <B>JTextField </B>whenever an
<B>ActionEvent</B> occurs. Usually, of course, the application builder tool
would create most of the code that uses the Bean.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I249' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I250>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">When you run the <B>BangBean</B> through
<B>BeanDumper</B> or put the <B>BangBean</B> inside a Bean-enabled development
environment, you&#8217;ll notice that there are many more properties and actions
than are evident from the above code. That&#8217;s because <B>BangBean</B> is
inherited from <B>JPanel</B>, and <B>JPanel </B>is also Bean, so you&#8217;re
seeing its properties and events as well.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I250' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I251>
</FONT><A NAME="_Toc481064840"></A><BR></P></DIV>
<A NAME="Heading475"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Packaging a
Bean<BR><A NAME="Index1861"></A><A NAME="Index1862"></A><A NAME="Index1863"></A><A NAME="Index1864"></A></H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Before you can bring a Bean into a
Bean-enabled visual builder tool, it must be put into the standard Bean
container, which is a JAR file that includes all the Bean classes as well as a
&#8220;manifest&#8221; file that says &#8220;This is a Bean.&#8221; A manifest
file is simply a text file that follows a particular form. For the
<B>BangBean</B>, the manifest file looks like this (without the first and last
lines):</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//:! :BangBean.mf</font>
Manifest-Version: 1.0

Name: bangbean/BangBean.<font color=#0000ff>class</font>
Java-Bean: True
<font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The first line indicates the version of
the manifest scheme, which until further notice from Sun is 1.0. The second line
(empty lines are ignored) names the <B>BangBean.class</B> file, and the third
says, &#8220;It&#8217;s a Bean.&#8221; Without the third line, the program
builder tool will not recognize the class as a Bean.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I251' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I252>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The only tricky part is that you must
make sure that you get the proper path in the &#8220;Name:&#8221; field. If you
look back at <B>BangBean.java</B>, you&#8217;ll see it&#8217;s in <B>package
bangbean </B>(and thus in a subdirectory called &#8220;bangbean&#8221;
that&#8217;s off of the classpath), and the name in the manifest file must
include this package information. In addition, you must place the manifest file
in the directory <I>above</I> the root of your package path, which in this case
means placing the file in the directory above the &#8220;bangbean&#8221;
subdirectory. Then you must invoke <B>jar</B> from the same directory as the
manifest file, as follows:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>jar cfm BangBean.jar BangBean.mf bangbean</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This assumes that you want the resulting
JAR file to be named <B>BangBean.jar</B> and that you&#8217;ve put the manifest
in a file called <B>BangBean.mf</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I252' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I253>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You might wonder &#8220;What about all
the other classes that were generated when I compiled
<B>BangBean.java</B>?&#8221; Well, they all ended up inside the <B>bangbean</B>
subdirectory, and you&#8217;ll see that the last argument for the above
<B>jar</B> command line is the <B>bangbean</B> subdirectory. When you give
<B>jar</B> the name of a subdirectory, it packages that entire subdirectory into
the jar file (including, in this case, the original <B>BangBean.java</B>
source-code file&#8212;you might not choose to include the source with your own
Beans). In addition, if you turn around and unpack the JAR file you&#8217;ve
just created, you&#8217;ll discover that your manifest file isn&#8217;t inside,
but that <B>jar</B> has created its own manifest file (based partly on yours)
called <B>MANIFEST.MF </B>and placed it inside the subdirectory <B>META-INF</B>
(for &#8220;meta-information&#8221;). If you open this manifest file
you&#8217;ll also notice that digital signature information has been added by
<B>jar </B>for each file, of the form:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>Digest-Algorithms: SHA MD5 
SHA-Digest: pDpEAG9NaeCx8aFtqPI4udSX/O0=
MD5-Digest: O4NcS1hE3Smnzlp2hj6qeg==</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">In general, you don&#8217;t need to worry
about any of this, and if you make changes you can just modify your original
manifest file and reinvoke <B>jar</B> to create a new JAR file for your Bean.
You can also add other Beans to the JAR file simply by adding their information
to your manifest. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I253' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I254>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">One thing to notice is that you&#8217;ll
probably want to put each Bean in its own subdirectory, since when you create a
JAR file you hand the <B>jar</B> utility the name of a subdirectory and it puts
everything in that subdirectory into the JAR file. You can see that both
<B>Frog</B> and <B>BangBean</B> are in their own subdirectories.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I254' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I255>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Once you have your Bean properly inside a
JAR file you can bring it into a Beans-enabled program-builder environment. The
way you do this varies from one tool to the next, but Sun provides a freely
available test bed for JavaBeans in their &#8220;Beans Development Kit&#8221;
(BDK) called the
&#8220;<A NAME="Index1865"></A><A NAME="Index1866"></A>beanbox.&#8221; (Download
the BDK from <I>java.sun.com/beans</I>.) To place your Bean in the beanbox, copy
the JAR file into the BDK&#8217;s &#8220;jars&#8221; subdirectory before you
start up the beanbox.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I255' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I256>
</FONT><A NAME="_Toc481064841"></A><BR></P></DIV>
<A NAME="Heading476"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
More complex Bean support</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You can see how remarkably simple it is
to make a Bean. But you aren&#8217;t limited to what you&#8217;ve seen here. The
JavaBeans architecture provides a simple point of entry but can also scale to
more complex situations. These situations are beyond the scope of this book, but
they will be briefly introduced here. You can find more details at
<I>java.sun.com/beans</I>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I256' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I257>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">One place where you can add
sophistication is with properties. The examples above have shown only single
properties, but it&#8217;s also possible to represent multiple properties in an
array. This is called an
<A NAME="Index1867"></A><A NAME="Index1868"></A><A NAME="Index1869"></A><I>indexed
property</I>. You simply provide the appropriate methods (again following a
naming convention for the method names) and the <B>Introspector</B> recognizes
an indexed property so your application builder tool can respond appropriately.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I257' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I258>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Properties can be
<A NAME="Index1870"></A><A NAME="Index1871"></A><A NAME="Index1872"></A><I>bound</I>,
which means that they will notify other objects via a
<B>PropertyChangeEvent</B>. The other objects can then choose to change
themselves based on the change to the Bean.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I258' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I259>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Properties can be
<A NAME="Index1873"></A><A NAME="Index1874"></A><A NAME="Index1875"></A><I>constrained</I>,
which means that other objects can veto a change to that property if it is
unacceptable. The other objects are notified using a
<A NAME="Index1876"></A><A NAME="Index1877"></A><B>PropertyChangeEvent</B>, and
they can throw a
<A NAME="Index1878"></A><A NAME="Index1879"></A><B>PropertyVetoException</B> to
prevent the change from happening and to restore the old values.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I259' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I260>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><A NAME="Index1880"></A><A NAME="Index1881"></A><A NAME="Index1882"></A><A NAME="Index1883"></A><A NAME="Index1884"></A><A NAME="Index1885"></A><A NAME="Index1886"></A><A NAME="Index1887"></A><FONT FACE="Georgia">You
can also change the way your Bean is represented at design time:

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I260' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I261>
</FONT><BR></P></DIV>
<OL>
<LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">You can provide a custom
property sheet for your particular Bean. The ordinary property sheet will be
used for all other Beans, but yours is automatically invoked when your Bean is
selected.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I261' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I262>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">You
can create a custom editor for a particular property, so the ordinary property
sheet is used, but when your special property is being edited, your editor will
automatically be invoked.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I262' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I263>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">You
can provide a custom <B>BeanInfo</B> class for your Bean that produces
information that&#8217;s different from the default created by the
<B>Introspector</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I263' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I264>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">It&#8217;s
also possible to turn &#8220;expert&#8221; mode on and off in all
<B>FeatureDescriptor</B>s to distinguish between basic features and more
complicated ones.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I264' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I265>
</FONT><A NAME="_Toc481064842"></A></OL><A NAME="Heading477"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
More to Beans</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">There&#8217;s another issue that
couldn&#8217;t be addressed here. Whenever you create a Bean, you should expect
that it will be run in a multithreaded environment. This means that you must
understand the issues of threading, which will be introduced in Chapter 14.
You&#8217;ll find a section there called &#8220;JavaBeans revisited&#8221; that
will look at the problem and its solution.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I265' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I266>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">There are a number of books about
JavaBeans; for example, <I>JavaBeans</I> by Elliotte Rusty Harold (IDG, 1998).

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I266' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I267>
</FONT><A NAME="_Toc481064843"></A><BR></P></DIV>
<A NAME="Heading478"></A><FONT FACE = "Verdana"><H2 ALIGN="LEFT">
Summary</H2></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Of all the libraries in Java, the GUI
library has seen the most dramatic changes from Java 1.0 to Java 2. The Java 1.0
AWT was roundly criticized as being one of the worst designs seen, and while it
would allow you to create portable programs, the resulting GUI was
&#8220;equally mediocre on all platforms.&#8221; It was also limiting, awkward,
and unpleasant to use compared with the native application development tools
available on a particular platform.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I267' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I268>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">When Java 1.1 introduced the new event
model and JavaBeans, the stage was set&#8212;now it was possible to create GUI
components that could be easily dragged and dropped inside visual application
builder tools. In addition, the design of the event model and Beans clearly
shows strong consideration for ease of programming and maintainable code
(something that was not evident in the 1.0 AWT). But it wasn&#8217;t until the
JFC/Swing classes appeared that the job was finished. With the Swing components,
cross-platform GUI programming can be a civilized experience.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I268' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I269>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Actually, the only thing that&#8217;s
missing is the application builder tool, and this is where the real revolution
lies. <A NAME="Index1888"></A>Microsoft&#8217;s Visual Basic and Visual C++
require Microsoft&#8217;s application builder tools, as does
<A NAME="Index1889"></A>Borland&#8217;s Delphi and C++ Builder. If you want the
application builder tool to get better, you have to cross your fingers and hope
the vendor will give you what you want. But Java is an open environment, and so
not only does it allow for competing application builder environments, it
encourages them. And for these tools to be taken seriously, they must support
JavaBeans. This means a leveled playing field: if a better application builder
tool comes along, you&#8217;re not tied to the one you&#8217;ve been
using&#8212;you can pick up and move to the new one and increase your
productivity. This kind of competitive environment for GUI application builder
tools has not been seen before, and the resulting marketplace can generate only
positive results for the productivity of the programmer.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I269' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I270>
</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>This chapter was meant only to give you an introduction to the power of Swing and to get you started so you could see how relatively simple it is to feel your way through the libraries. What you&#8217;ve seen so far will probably suffice <font color=#0000ff>for</font> a good portion of your UI design needs. However, there&#8217;s a lot more to Swing&#8212;it&#8217;s intended to be a fully powered UI design tool kit. There&#8217;s probably a way to accomplish just about everything you can imagine.</PRE></FONT></BLOCKQUOTE><DIV ALIGN="LEFT"><P><FONT FACE="Georgia">If
you don&#8217;t see what you need here, delve into the online documentation from
Sun and search the Web, and if that&#8217;s not enough then find a dedicated
Swing book&#8212;a good place to start is <I>The JFC Swing Tutorial</I>, by
Walrath &amp; Campione (Addison Wesley, 1999). 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I270' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I271>
</FONT><A NAME="_Toc375545470"></A><A NAME="_Toc481064844"></A><BR></P></DIV>
<A NAME="Heading479"></A><FONT FACE = "Verdana"><H2 ALIGN="LEFT">
Exercises</H2></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia" SIZE=2>Solutions to selected exercises
can be found in the electronic document <I>The Thinking in Java Annotated
Solution Guide</I>, available for a small fee from
<I>www.BruceEckel.com</I>.</FONT><BR></P></DIV>
<OL>
<LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Create an
applet/application using the <B>Console</B> class as shown in this chapter.
Include a text field and three buttons. When you press each button, make some
different text appear in the text field.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I271' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I272>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Add
a check box to the applet created in Exercise 1, capture the event, and insert
different text into the text field.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I272' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I273>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Create
an applet/application using <B>Console</B>. In the HTML documentation from
<I>java.sun.com</I>, find the <B>JPasswordField</B> and add this to the program.
If the user types in the correct password, use <B>Joptionpane</B> to provide a
success message to the user.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I273' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I274>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Create
an applet/application using <B>Console</B>, and add all the components that have
an <B>addActionListener(&#160;)</B> method. (Look these up in the HTML
documentation from <I>java.sun.com</I>. Hint: use the index.) Capture their
events and display an appropriate message for each inside a text field.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I274' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I275>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Create
an applet/application using <B>Console</B>, with a <B>JButton</B> and a<B>
JTextField</B>. Write and attach the appropriate listener so that if the button
has the focus, characters typed into it will appear in the<B> JTextField</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I275' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I276>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Create
an applet/application using <B>Console</B>. Add to the main frame all the
components described in this chapter, including menus and a dialog box.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I276' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I277>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Modify
<B>TextFields.java</B> so that the characters in <B>t2</B> retain the original
case that they were typed in, instead of automatically being forced to upper
case.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I277' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I278>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Locate
and download one or more of the free GUI builder development environments
available on the Internet, or buy a commercial product. Discover what is
necessary to add <B>BangBean</B> to this environment and to use it.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I278' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I279>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Add
<B>Frog.class</B> to the manifest file as shown in this chapter and run
<B>jar</B> to create a JAR file containing both <B>Frog</B> and <B>BangBean</B>.
Now either download and install the BDK from Sun or use your own Beans-enabled
program builder tool and add the JAR file to your environment so you can test
the two Beans.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I279' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I280>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Create
your own JavaBean called <B>Valve </B>that contains two properties: a
<B>boolean</B> called &#8220;on&#8221; and an <B>int</B> called
&#8220;level.&#8221; Create a manifest file, use <B>jar</B> to package your
Bean, then load it into the beanbox or into a Beans-enabled program builder tool
so that you can test it.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I280' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I281>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Modify
<B>MessageBoxes.java</B> so that it has an individual <B>ActionListener</B> for
each button (instead of matching the button text).

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I281' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I282>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Monitor
a new type of event in <B>TrackEvent.java</B> by adding the new event handling
code. You&#8217;ll need to discover on your own the type of event that you want
to monitor.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I282' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I283>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Inherit
a new type of button from <B>JButton</B>. Each time you press this button, it
should change its color to a randomly-selected value. See <B>ColorBoxes.java</B>
in Chapter 14 for an example of how to generate a random color value.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I283' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I284>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Modify
<B>TextPane.java</B> to use a <B>JTextArea</B> instead of a <B>JTextPane</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I284' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I285>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Modify
<B>Menus.java</B> to use radio buttons instead of check boxes on the menus.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I285' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I286>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Simplify
<B>List.java</B> by passing the array to the constructor and eliminating the
dynamic addition of elements to the list.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I286' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I287>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Modify
<B>SineWave.java </B>to turn <B>SineDraw</B> into a JavaBean by adding
&#8220;getter&#8221; and &#8220;setter&#8221; methods.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I287' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I288>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Remember
the &#8220;sketching box&#8221; toy with two knobs, one that controls the
vertical movement of the drawing point, and one that controls the horizontal
movement? Create one of those, using <B>SineWave.java </B>to get you started.
Instead of knobs, use sliders. Add a button that will erase the entire sketch.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I288' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I289>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Create
an &#8220;asymptotic progress indicator&#8221; that gets slower and slower as it
approaches the finish point. Add random erratic behavior so it will periodically
look like it&#8217;s starting to speed up.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I289' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I290>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Modify
<B>Progress.java</B> so that it does not share models, but instead uses a
listener to connect the slider and progress bar.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I290' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I291>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Follow
the instructions in the section titled &#8220;Packaging an applet into a JAR
file&#8221; to place <B>TicTacToe.java</B> into a JAR file. Create an HTML page
with the (messy, complicated) version of the applet tag, and modify it to use
the archive tag so as to use the JAR file. (Hint: start with the HTML page for
<B>TicTacToe.java </B>that comes with this book&#8217;s source-code
distribution.)

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I291' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I292>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Create
an applet/application using <B>Console</B>. This should have three sliders, one
each for the red, green, and blue values in <B>java.awt.Color</B>. The rest of
the form should be a <B>JPanel</B> that displays the color determined by the
three sliders. Also include non-editable text fields that show the current RGB
values.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I292' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I293>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">In
the HTML documentation for <B>javax.swing</B>, look up the <B>JColorChooser</B>.
Write a program with a button that brings up the color chooser as a dialog.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I293' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I294>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Almost
every Swing component is derived from <B>Component</B>, which has a
<B>setCursor(&#160;)</B> method. Look this up in the Java HTML documentation.
Create an applet and change the cursor to one of the stock cursors in the
<B>Cursor</B> class.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I294' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER13_I295>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Starting
with <B>ShowAddListeners.java</B>, create a program with the full functionality
of <B>ShowMethodsClean.java</B> from Chapter 12.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER13_I295' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

</FONT></OL>
<HR><DIV ALIGN="LEFT"><P><A NAME="fn61" HREF="#fnB61">[61]</A><FONT FACE="Georgia" SIZE=2>
A variation on this is called &#8220;the principle of least astonishment,&#8221;
which essentially says: &#8220;don&#8217;t surprise the
user.&#8221;</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><A NAME="fn62" HREF="#fnB62">[62]</A><FONT FACE="Georgia" SIZE=2>
This is an example of the design pattern called the <I>template
method</I>.</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><A NAME="fn63" HREF="#fnB63">[63]</A><FONT FACE="Georgia" SIZE=2>
It is assumed that the reader is familiar with the basics of HTML. It&#8217;s
not too hard to figure out, and there are lots of books and
resources.</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><A NAME="fn64" HREF="#fnB64">[64]</A><FONT FACE="Georgia" SIZE=2>
This page&#8212;in particular, the &#8216;clsid&#8217; portion&#8212;seemed to
work fine with both JDK1.2.2 and JDK1.3 rc-1. However, you may find that you
have to change the tag sometime in the future. Details can be found at
<I>java.sun.com</I>.</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><A NAME="fn65" HREF="#fnB65">[65]</A><FONT FACE="Georgia" SIZE=2>
In my opinion. And after you learn about Swing, you won&#8217;t want to waste
your time on the earlier stuff.</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><A NAME="fn66" HREF="#fnB66">[66]</A><FONT FACE="Georgia" SIZE=2>
As described earlier, &#8220;Frame&#8221; was already taken by the AWT, so Swing
uses JFrame.</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><A NAME="fn67" HREF="#fnB67">[67]</A><FONT FACE="Georgia" SIZE=2>
This will make sense after you&#8217;ve read further in this chapter. First,
make the reference <B>JApplet</B> a <B>static</B> member of the class (instead
of a local variable of <B>main(&#160;)</B>), and then call
<B>applet.stop(&#160;)</B> and <B>applet.destroy(&#160;)</B> inside
<B>WindowAdapter.windowClosing(&#160;)</B> before you call
<B>System.exit(&#160;)</B>.</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><A NAME="fn68" HREF="#fnB68">[68]</A><FONT FACE="Georgia" SIZE=2>
There is no <B>MouseMotionEvent</B> even though it seems like there ought to be.
Clicking and motion is combined into <B>MouseEvent</B>, so this second
appearance of <B>MouseEvent</B> in the table is not an error.</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><A NAME="fn69" HREF="#fnB69">[69]</A><FONT FACE="Georgia" SIZE=2>
In Java 1.0/1.1 you could <I>not</I> usefully inherit from the button object.
This was only one of numerous fundamental design flaws.</FONT><BR></P></DIV>

<DIV ALIGN="CENTER">
    <FONT FACE="Verdana" size = "-1">
     [ <a href="Chap12.htm">Previous Chapter</a> ] 
    [ <a href="SimpCont.htm">Short TOC</a> ] 
    [ <a href="Contents.htm">Table of Contents</a> ] 
    [ <a href="DocIdx.htm">Index</a> ]
     [ <a href="Chap14.htm">Next Chapter</a> ] 
    </FONT>
    <BR>
 Last Update:05/21/2001</P></DIV>

</BODY>

</HTML>
