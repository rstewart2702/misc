<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<!--
This document was converted from RTF source: 
By rtftohtml 4.19
See http://www.sunpack.com/RTF
Filename:TIJ2.rtf
Application Directory:C:\TOOLS\RTF2HTML\
Subject:
Author:Bruce Eckel
Operator:Bruce Eckel
Document Comments:
Version Comments:
Comments:
Keywords:
Translation Date:05/21/2001
Translation Time:10:39:29
Translation Platform:Win32
Number of Output files:23
This File:Chap15.htm
SplitDepth=1
SkipNavPanel=1
SkipLeadingToc=1
SkipTrailingToc=1
GenContents=1
GenFrames=1
GenIndex=1
-->
<HEAD lang="en"><META http-equiv="Content-Type" content="text/html">
<TITLE>15: Distributed Computing</TITLE>
</HEAD>

<BODY  BGCOLOR="#FFFFFF"><DIV ALIGN="CENTER">
  <a href="http://www.MindView.net">
  <img src="mindview.gif" alt="MindView Inc." BORDER = "0"></a>
  <CENTER>
    <FONT FACE="Verdana" size = "-1">
    [ <a href="README.txt">Viewing Hints</a> ]
    [ <a href="RevHist.htm">Revision History</a> ]
    [ <a href="http://www.mindview.net/Books/TIJ/">Book Home Page</a> ]
    [ <a href="http://www.mindview.net/Etc/MailingList.html">Free Newsletter</a> ] <br>
    [ <a href="http://www.mindview.net/Seminars">Seminars</a> ]
    [ <a href="http://www.mindview.net/CDs">Seminars on CD ROM</a> ]
    [ <a href="http://www.mindview.net/Services">Consulting</a> ]
    </FONT>
  <H2><FONT FACE="Verdana">
  Thinking in Java, 2nd edition, Revision 12</FONT></H2>
  <H3><FONT FACE="Verdana">&copy;2000 by Bruce Eckel</FONT></H3>
  
    <FONT FACE="Verdana" size = "-1">
     [ <a href="Chap14.htm">Previous Chapter</a> ] 
    [ <a href="SimpCont.htm">Short TOC</a> ] 
    [ <a href="Contents.htm">Table of Contents</a> ] 
    [ <a href="DocIdx.htm">Index</a> ]
     [ <a href="AppendA.htm">Next Chapter</a> ] 
    </FONT>
    
  </CENTER>
  </P></DIV><A NAME="Chapter_17"></A><A NAME="_Toc375545491"></A><A NAME="_Toc477690735"></A><A NAME="_Toc481064866"></A><A NAME="Heading510"></A><FONT FACE = "Verdana"><H1 ALIGN="LEFT">
15: Distributed Computing</H1></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia" SIZE=4><backtalk:display ID=TIJ3_CHAPTER15_I0>
Historically,
programming across multiple machines has been error-prone, difficult, and
complex.</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The programmer had to know many details
about the network and sometimes even the hardware. You usually needed to
understand the various &#8220;layers&#8221; of the networking protocol, and
there were a lot of different functions in each different networking library
concerned with connecting, packing, and unpacking blocks of information;
shipping those blocks back and forth; and handshaking. It was a daunting task.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I0' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I1>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">However, the basic idea of distributed
computing is not so difficult, and is abstracted very nicely in the Java
libraries. You want to:</FONT><BR></P></DIV>
<UL>
<LI><FONT FACE="Wingdings">	</FONT><FONT FACE="Georgia">Get some information
from that machine over there and move it to this machine here, or vice versa.
This is accomplished with basic network programming.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I1' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I2>
</FONT><LI><FONT FACE="Wingdings">	</FONT><FONT FACE="Georgia">Connect
to a database, which may live across a network. This is accomplished with
<I>Java DataBase Connectivity</I> (JDBC), which is an abstraction away from the
messy, platform-specific details of SQL (the <I>structured query language</I>
used for most database transactions).

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I2' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I3>
</FONT><LI><FONT FACE="Wingdings">	</FONT><FONT FACE="Georgia">Provide
services via a Web server. This is accomplished with Java&#8217;s
<I>servlets</I> and <I>Java<STRIKE> </STRIKE>Server Pages</I> (JSPs).

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I3' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I4>
</FONT><LI><FONT FACE="Wingdings">	</FONT><FONT FACE="Georgia">Execute
methods on Java objects that live on remote machines transparently, as if those
objects were resident on local machines. This is accomplished with Java&#8217;s
<I>Remote Method Invocation</I> (RMI).

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I4' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I5>
</FONT><LI><FONT FACE="Wingdings">	</FONT><FONT FACE="Georgia">Use
code written in other languages, running on other architectures. This is
accomplished using the <I>Common Object Request Broker Architecture</I> (CORBA),
which is directly supported by Java.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I5' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I6>
</FONT><LI><FONT FACE="Wingdings">	</FONT><FONT FACE="Georgia">Isolate
business logic from connectivity issues, especially connections with databases
including transaction management and security. This is accomplished using
<I>Enterprise JavaBeans </I>(EJBs). EJBs are not actually a distributed
architecture, but the resulting applications are usually used in a networked
client-server system.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I6' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I7>
</FONT><LI><FONT FACE="Wingdings">	</FONT><FONT FACE="Georgia">Easily,
dynamically, add and remove devices from a network representing a local system.
This is accomplished with Java&#8217;s Jini.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I7' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I8>
</FONT></UL><DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Each
topic will be given a light introduction in this chapter. Please note that each
subject is voluminous and by itself the subject of entire books, so this chapter
is only meant to familiarize you with the topics, not make you an expert
(however, you can go a long way with the information presented here on network
programming, servlets and JSPs). 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I8' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I9>
</FONT><A NAME="_Toc481064867"></A><BR></P></DIV>
<A NAME="Heading511"></A><FONT FACE = "Verdana"><H2 ALIGN="LEFT">
Network programming<A NAME="_Toc375545492"></A><BR><A NAME="Index2044"></A></H2></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">One of Java&#8217;s great strengths is
painless networking. The Java network library designers have made it quite
similar to reading and writing files, except that the &#8220;file&#8221; exists
on a remote machine and the remote machine can decide exactly what it wants to
do about the information you&#8217;re requesting or sending. As much as
possible, the underlying details of networking have been abstracted away and
taken care of within the JVM and local machine installation of Java. The
programming model you use is that of a file; in fact, you actually wrap the
network connection (a &#8220;socket&#8221;) with stream objects, so you end up
using the same method calls as you do with all other streams. In addition,
Java&#8217;s built-in multithreading is exceptionally handy when dealing with
another networking issue: handling multiple connections at once.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I9' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I10>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This section introduces Java&#8217;s
networking support using easy-to-understand examples.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I10' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I11>
</FONT><A NAME="_Toc481064868"></A><BR></P></DIV>
<A NAME="Heading512"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Identifying a machine</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Of course, in order to tell one machine
from another and to make sure that you are connected with a particular machine,
there must be some way of uniquely <A NAME="Index2045"></A>identifying machines
on a network. Early networks were satisfied to provide unique names for machines
within the local network. However, Java works within the Internet, which
requires a way to uniquely identify a machine from all the others <I>in the
world</I>. This is accomplished with the
<A NAME="Index2046"></A><A NAME="Index2047"></A><A NAME="Index2048"></A>IP
(Internet Protocol) address which can exist in two
forms<A NAME="Index2049"></A><A NAME="Index2050"></A>&#8220;<A NAME="Index2051"></A><A NAME="Index2052"></A>:

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I11' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I12>
</FONT><BR></P></DIV>
<OL>
<LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">The familiar DNS
(<I>Domain Name System</I>) form. My domain name is <B>bruceeckel.com</B>, and
if I have a computer called <B>Opus</B> in my domain, its domain name would be
<B>Opus.bruceeckel.com</B>. This is exactly the kind of name that you use when
you send email to people, and is often incorporated into a World Wide Web
address.</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Alternatively,
you can use the dotted quad&#8221; form, which is four numbers separated by
dots, such as
<B>123.255.28.120</B>.</FONT></OL><DIV ALIGN="LEFT"><P><FONT FACE="Georgia">In both
cases, the IP address is represented internally as a 32-bit
number</FONT><A NAME="fnB72" HREF="#fn72">[72]</A><FONT FACE="Georgia"> (so each
of the quad numbers cannot exceed 255), and you can get a special Java object to
represent this number from either of the forms above by using the <B>static</B>
<B>InetAddress.getByName(&#160;)</B> method that&#8217;s in <B>java.net</B>. The
result is an object of type <B>InetAddress</B> that you can use to build a
&#8220;socket,&#8221; as you will see later.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I12' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I13>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">As a simple example of using
<B>InetAddress.getByName(&#160;)</B>, consider what happens if you have a
dial-up Internet service provider (ISP). Each time you dial up, you are assigned
a temporary IP address. But while you&#8217;re connected, your IP address has
the same validity as any other IP address on the Internet. If someone connects
to your machine using your IP address then they can connect to a Web server or
FTP server that you have running on your machine. Of course, they need to know
your IP address, and since a new one is assigned each time you dial up, how can
you find out what it is? 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I13' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I14>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The following program uses
<B>InetAddress.getByName(&#160;)</B> to produce your IP address. To use it, you
must know the name of your computer. On Windows 95/98, go to
&#8220;Settings,&#8221; &#8220;Control Panel,&#8221; &#8220;Network,&#8221; and
then select the &#8220;Identification&#8221; tab. &#8220;Computer name&#8221; is
the name to put on the command line.</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c15:WhoAmI.java</font>
<font color=#009900>// Finds out your network address when</font>
<font color=#009900>// you're connected to the Internet.</font>
<font color=#0000ff>import</font> java.net.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> WhoAmI {
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) 
      <font color=#0000ff>throws</font> Exception {
    <font color=#0000ff>if</font>(args.length != 1) {
      System.err.println(
        <font color=#004488>"Usage: WhoAmI MachineName"</font>);
      System.exit(1);
    }
    InetAddress a = 
      InetAddress.getByName(args[0]);
    System.out.println(a);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">In this case, the machine is called
&#8220;peppy.&#8221; So, once I&#8217;ve connected to my ISP I run the
program:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>java WhoAmI peppy</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">I get back a message like this (of
course, the address is different each time):</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>peppy/199.190.87.75</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">If I tell my friend this address and I
have a Web server running on my computer, he can connect to it by going to the
URL <I>http://199.190.87.75</I> (only as long as I continue to stay connected
during that session). This can sometimes be a handy way to distribute
information to someone else, or to test out a Web site configuration before
posting it to a &#8220;real&#8221; server.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I14' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I15>
</FONT><A NAME="_Toc375545493"></A><BR></P></DIV>
<A NAME="Heading513"></A><FONT FACE = "Verdana"><H4 ALIGN="LEFT">
Servers and clients</H4></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The whole point of a network is to allow
two machines to connect and talk to each other. Once the two machines have found
each other they can have a nice, two-way conversation. But how do they find each
other? It&#8217;s like getting lost in an amusement park: one machine has to
stay in one place and listen while the other machine says, &#8220;Hey, where are
you?&#8221; 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I15' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I16>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The machine that &#8220;stays in one
place&#8221; is called the
<A NAME="Index2053"></A><A NAME="Index2054"></A><I>server</I>, and the one that
seeks is called the
<A NAME="Index2055"></A><A NAME="Index2056"></A><I>client</I>. This distinction
is important only while the client is trying to connect to the server. Once
they&#8217;ve connected, it becomes a two-way communication process and it
doesn&#8217;t matter anymore that one happened to take the role of server and
the other happened to take the role of the client.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I16' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I17>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">So the job of the server is to listen for
a connection, and that&#8217;s performed by the special server object that you
create. The job of the client is to try to make a connection to a server, and
this is performed by the special client object you create. Once the connection
is made, you&#8217;ll see that at both server and client ends, the connection is
magically turned into an I/O stream object, and from then on you can treat the
connection as if you were reading from and writing to a file. Thus, after the
connection is made you will just use the familiar I/O commands from Chapter 11.
This is one of the nice features of Java networking.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I17' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I18>
</FONT><BR></P></DIV>
<A NAME="Heading514"></A><FONT FACE = "Verdana"><H4 ALIGN="LEFT">
Testing programs without a network<BR><A NAME="Index2057"></A></H4></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">For many reasons, you might not have a
client machine, a server machine, and a network available to test your programs.
You might be performing exercises in a classroom situation, or you could be
writing programs that aren&#8217;t yet stable enough to put onto the network.
The creators of the Internet Protocol were aware of this issue, and they created
a special address called
<A NAME="Index2058"></A><A NAME="Index2059"></A><B>localhost</B> to be the
<A NAME="Index2060"></A><A NAME="Index2061"></A>&#8220;local loopback&#8221; IP
address for testing without a network. The generic way to produce this address
in Java is:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>InetAddress addr = InetAddress.getByName(<font color=#0000ff>null</font>);</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">If you hand <B>getByName(&#160;)</B> a
<B>null</B>, it defaults to using the <B>localhost</B>. The <B>InetAddress</B>
is what you use to refer to the particular machine, and you must produce this
before you can go any further. You can&#8217;t manipulate the contents of an
<B>InetAddress </B>(but you can print them out, as you&#8217;ll see in the next
example). The only way you can create an <B>InetAddress</B> is through one of
that class&#8217;s overloaded <B>static</B> member methods
<B>getByName(&#160;)</B> (which is what you&#8217;ll usually use),
<B>getAllByName(&#160;)</B>, or <B>getLocalHost(&#160;)</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I18' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I19>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You can also produce the local loopback
address by handing it the string <B>localhost</B>:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>InetAddress.getByName(<font color=#004488>"localhost"</font>);</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">(assuming &#8220;localhost&#8221; is
configured in your machine&#8217;s &#8220;hosts&#8221; table), or by using its
dotted quad form to name the reserved IP number for the
loopback:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>InetAddress.getByName(<font color=#004488>"127.0.0.1"</font>);</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">All three forms produce the same result.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I19' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I20>
</FONT><A NAME="_Toc375545494"></A><BR></P></DIV>
<A NAME="Heading515"></A><FONT FACE = "Verdana"><H4 ALIGN="LEFT">
Port: a unique place <BR>within the machine</H4></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">An IP address isn&#8217;t enough to
identify a unique server, since many servers can exist on one machine. Each IP
machine also contains <I>ports</I>, and when you&#8217;re setting up a client or
a server you must choose a <A NAME="Index2062"></A><A NAME="Index2063"></A>port
where both client and server agree to connect; if you&#8217;re meeting someone,
the IP address is the neighborhood and the port is the bar.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I20' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I21>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The port is not a physical location in a
machine, but a software abstraction (mainly for bookkeeping purposes). The
client program knows how to connect to the machine via its IP address, but how
does it connect to a desired service (potentially one of many on that machine)?
That&#8217;s where the port numbers come in as a second level of addressing. The
idea is that if you ask for a particular port, you&#8217;re requesting the
service that&#8217;s associated with the port number. The time of day is a
simple example of a service. Typically, each service is associated with a unique
port number on a given server machine. It&#8217;s up to the client to know ahead
of time which port number the desired service is running on. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I21' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I22>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The system services reserve the use of
ports 1 through 1024, so you shouldn&#8217;t use those or any other port that
you know to be in use. The first choice for examples in this book will be port
8080 (in memory of the venerable old 8-bit Intel 8080 chip in my first computer,
a CP/M machine).

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I22' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I23>
</FONT><A NAME="_Toc375545495"></A><A NAME="_Toc481064869"></A><BR></P></DIV>
<A NAME="Heading516"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Sockets</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The <I>socket</I> is the software
abstraction used to represent the &#8220;terminals&#8221; of a connection
between two machines. For a given connection, there&#8217;s a socket on each
machine, and you can imagine a hypothetical &#8220;cable&#8221; running between
the two machines with each end of the &#8220;cable&#8221; plugged into a socket.
Of course, the physical hardware and cabling between machines is completely
unknown. The whole point of the abstraction is that we don&#8217;t have to know
more than is necessary. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I23' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I24>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">In Java, you create a socket to make the
connection to the other machine, then you get an <B>InputStream</B> and
<B>OutputStream</B> (or, with the appropriate converters, <B>Reader</B> and
<B>Writer</B>)<B> </B>from the socket in order to be able to treat the
connection as an I/O stream object. There are two stream-based socket classes: a
<B>ServerSocket</B> that a server uses to &#8220;listen&#8221; for incoming
connections and a <B>Socket</B> that a client uses in order to initiate a
connection. Once a client makes a socket connection, the <B>ServerSocket</B>
returns (via the <B>accept(&#160;)</B>
<A NAME="Index2064"></A><A NAME="Index2065"></A>method) a corresponding
<B>Socket</B> through which communications will take place on the server side.
From then on, you have a true <B>Socket</B> to <B>Socket</B> connection and you
treat both ends the same way because they <I>are</I> the same. At this point,
you use the methods
<A NAME="Index2066"></A><A NAME="Index2067"></A><B>getInputStream(&#160;)</B>
and
<A NAME="Index2068"></A><A NAME="Index2069"></A><B>getOutputStream(&#160;)</B>
to produce the corresponding <B>InputStream</B> and <B>OutputStream</B> objects
from each <B>Socket</B>. These must be wrapped inside buffers and formatting
classes just like any other stream object described in Chapter 11.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I24' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I25>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The use of the term <B>ServerSocket</B>
would seem to be another example of a confusing naming scheme in the Java
libraries. You might think <B>ServerSocket</B> would be better named
&#8220;ServerConnector&#8221; or something without the word &#8220;Socket&#8221;
in it. You might also think that <B>ServerSocket</B> and <B>Socket</B> should
both be inherited from some common base class. Indeed, the two classes do have
several methods in common, but not enough to give them a common base class.
Instead, <B>ServerSocket</B>&#8217;s job is to wait until some other machine
connects to it, then to return an actual <B>Socket</B>. This is why
<B>ServerSocket</B> seems to be a bit misnamed, since its job isn&#8217;t really
to be a socket but instead to make a <B>Socket</B> object when someone else
connects to it. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I25' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I26>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">However, the <B>ServerSocket</B> does
create a physical &#8220;server&#8221; or listening socket on the host machine.
This socket listens for incoming connections and then returns an
&#8220;established&#8221; socket (with the local and remote endpoints defined)
via the <B>accept(&#160;)</B> method. The confusing part is that both of these
sockets (listening and established) are associated with the same server socket.
The listening socket can accept only new connection requests and not data
packets. So while <B>ServerSocket</B> doesn&#8217;t make much sense
programmatically, it does &#8220;physically.&#8221;

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I26' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I27>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">When you create a <B>ServerSocket</B>,
you give it only a port number. You don&#8217;t have to give it an IP address
because it&#8217;s already on the machine it represents. When you create a
<B>Socket</B>, however, you must give both the IP address and the port number
where you&#8217;re trying to connect. (However, the <B>Socket</B> that comes
back from <B>ServerSocket.accept(&#160;)</B> already contains all this
information.)

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I27' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I28>
</FONT><A NAME="_Toc375545496"></A><BR></P></DIV>
<A NAME="Heading517"></A><FONT FACE = "Verdana"><H4 ALIGN="LEFT">
A simple server and client</H4></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This example makes the simplest use of
servers and clients using sockets. All the server does is wait for a connection,
then uses the <B>Socket</B> produced by that connection to create an
<B>InputStream</B> and <B>OutputStream</B>. These are converted to a
<B>Reader</B> and a <B>Writer</B>, then wrapped in a <B>BufferedReader</B> and a
<B>PrintWriter</B>.<B> </B>After that, everything it reads from the
<B>BufferedReader</B> it echoes to the <B>PrintWriter</B> until it receives the
line &#8220;END,&#8221; at which time it closes the connection.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I28' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I29>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The client makes the connection to the
server, then creates an <B>OutputStream </B>and performs the same wrapping as in
the server. Lines of text are sent through the resulting <B>PrintWriter</B>. The
client also creates an <B>InputStream</B> (again, with appropriate conversions
and wrapping) to hear what the server is saying (which, in this case, is just
the words echoed back). 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I29' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I30>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Both the server and client use the same
port number and the client uses the local loopback address to connect to the
server on the same machine so you don&#8217;t have to test it over a network.
(For some configurations, you might need to be <I>connected</I> to a network for
the programs to work, even if you aren&#8217;t <I>communicating</I> over that
network.) 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I30' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I31>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Here is the server:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c15:JabberServer.java</font>
<font color=#009900>// Very simple server that just</font>
<font color=#009900>// echoes whatever the client sends.</font>
<font color=#0000ff>import</font> java.io.*;
<font color=#0000ff>import</font> java.net.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> JabberServer {  
  <font color=#009900>// Choose a port outside of the range 1-1024:</font>
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>final</font> <font color=#0000ff>int</font> PORT = 8080;
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) 
      <font color=#0000ff>throws</font> IOException {
    ServerSocket s = <font color=#0000ff>new</font> ServerSocket(PORT);
    System.out.println(<font color=#004488>"Started: "</font> + s);
    <font color=#0000ff>try</font> {
      <font color=#009900>// Blocks until a connection occurs:</font>
      Socket socket = s.accept();
      <font color=#0000ff>try</font> {
        System.out.println(
          <font color=#004488>"Connection accepted: "</font>+ socket);
        BufferedReader in = 
          <font color=#0000ff>new</font> BufferedReader(
            <font color=#0000ff>new</font> InputStreamReader(
              socket.getInputStream()));
        <font color=#009900>// Output is automatically flushed</font>
        <font color=#009900>// by PrintWriter:</font>
        PrintWriter out = 
          <font color=#0000ff>new</font> PrintWriter(
            <font color=#0000ff>new</font> BufferedWriter(
              <font color=#0000ff>new</font> OutputStreamWriter(
                socket.getOutputStream())),<font color=#0000ff>true</font>);
        <font color=#0000ff>while</font> (<font color=#0000ff>true</font>) {  
          String str = in.readLine();
          <font color=#0000ff>if</font> (str.equals(<font color=#004488>"END"</font>)) <font color=#0000ff>break</font>;
          System.out.println(<font color=#004488>"Echoing: "</font> + str);
          out.println(str);
        }
      <font color=#009900>// Always close the two sockets...</font>
      } <font color=#0000ff>finally</font> {
        System.out.println(<font color=#004488>"closing..."</font>);
        socket.close();
      }
    } <font color=#0000ff>finally</font> {
      s.close();
    }
  } 
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You can see that the <B>ServerSocket</B>
just needs a port number, not an IP address (since it&#8217;s running on
<I>this</I> machine!). When you call <B>accept(&#160;)</B>, the method
<I>blocks</I> until some client tries to connect to it. That is, it&#8217;s
there waiting for a connection, but other processes can run (see Chapter 14).
When a connection is made, <B>accept(&#160;)</B> returns with a <B>Socket</B>
object representing that connection. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I31' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I32>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The responsibility for cleaning up the
sockets is crafted carefully here. If the <B>ServerSocket</B> constructor fails,
the program just quits (notice we must assume that the constructor for
<B>ServerSocket</B> doesn&#8217;t leave any open network sockets lying around if
it fails). For this case, <B>main(&#160;)</B> <B>throws</B> <B>IOException</B>
so a <B>try</B> block is not necessary. If the <B>ServerSocket</B> constructor
is successful then all other method calls must be guarded in a
<B>try-finally</B> block to ensure that, no matter how the block is left, the
<B>ServerSocket</B> is properly closed.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I32' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I33>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The same logic is used for the
<B>Socket</B> returned by <B>accept(&#160;)</B>. If <B>accept(&#160;)</B> fails,
then we must assume that the <B>Socket</B> doesn&#8217;t exist or hold any
resources, so it doesn&#8217;t need to be cleaned up. If it&#8217;s successful,
however, the following statements must be in a <B>try-finally</B> block so that
if they fail the <B>Socket</B> will still be cleaned up. Care is required here
because sockets use important nonmemory resources, so you must be diligent in
order to clean them up (since there is no destructor in Java to do it for you).

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I33' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I34>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Both the <B>ServerSocket</B> and the
<B>Socket</B> produced by <B>accept(&#160;)</B> are printed to
<B>System.out</B>. This means that their <B>toString(&#160;)</B> methods are
automatically called. These produce:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>ServerSocket[addr=0.0.0.0,PORT=0,localport=8080]
Socket[addr=127.0.0.1,PORT=1077,localport=8080]</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Shortly, you&#8217;ll see how these fit
together with what the client is doing.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I34' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I35>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The next part of the program looks just
like opening files for reading and writing except that the <B>InputStream</B>
and <B>OutputStream</B> are created from the <B>Socket</B> object. Both the
<B>InputStream</B> and <B>OutputStream </B>objects are converted to
<A NAME="Index2070"></A><A NAME="Index2071"></A><B>Reader </B>and
<A NAME="Index2072"></A><A NAME="Index2073"></A><B>Writer</B> objects using the
&#8220;converter&#8221; classes
<A NAME="Index2074"></A><A NAME="Index2075"></A><B>InputStreamReader</B> and
<A NAME="Index2076"></A><A NAME="Index2077"></A><B>OutputStreamWriter</B>,
respectively. You could also have used the Java 1.0
<A NAME="Index2078"></A><A NAME="Index2079"></A><B>InputStream</B> and
<A NAME="Index2080"></A><A NAME="Index2081"></A><B>OutputStream</B> classes
directly, but with output there&#8217;s a distinct advantage to using the
<B>Writer</B> approach. This appears with
<A NAME="Index2082"></A><A NAME="Index2083"></A><B>PrintWriter</B>, which has an
overloaded constructor that takes a second argument, a <B>boolean </B>flag that
indicates whether to automatically flush the output at the end of each
<B>println(&#160;)</B> (but <I>not </I><B>print(&#160;)</B>) statement. Every
time you write to <B>out</B>, its buffer must be flushed so the information goes
out over the network. Flushing is important for this particular example because
the client and server each wait for a line from the other party before
proceeding. If flushing doesn&#8217;t occur, the information will not be put
onto the network until the buffer is full, which causes lots of problems in this
example. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I35' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I36>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">When writing network programs you need to
be careful about using automatic flushing. Every time you flush the buffer a
packet must be created and sent. In this case, that&#8217;s exactly what we
want, since if the packet containing the line isn&#8217;t sent then the
handshaking back and forth between server and client will stop. Put another way,
the end of a line is the end of a message. But in many cases, messages
aren&#8217;t delimited by lines so it&#8217;s much more efficient to not use
auto flushing and instead let the built-in buffering decide when to build and
send a packet. This way, larger packets can be sent and the process will be
faster. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I36' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I37>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Note that, like virtually all streams you
open, these are buffered. There&#8217;s an exercise at the end of this chapter
to show you what happens if you don&#8217;t buffer the streams (things get
slow). 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I37' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I38>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The infinite <B>while</B> loop reads
lines from the<B> BufferedReader in </B>and writes information to
<B>System.out</B> and to the <B>PrintWriter</B> <B>out</B>. Note that <B>in</B>
and <B>out</B> could be any streams, they just happen to be connected to the
network.  
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I38' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I39>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">When the client sends the line consisting
of &#8220;END,&#8221; the program breaks out of the loop and closes the
<B>Socket</B>. </FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Here&#8217;s the client:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c15:JabberClient.java</font>
<font color=#009900>// Very simple client that just sends</font>
<font color=#009900>// lines to the server and reads lines</font>
<font color=#009900>// that the server sends.</font>
<font color=#0000ff>import</font> java.net.*;
<font color=#0000ff>import</font> java.io.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> JabberClient {
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) 
      <font color=#0000ff>throws</font> IOException {
    <font color=#009900>// Passing null to getByName() produces the</font>
    <font color=#009900>// special "Local Loopback" IP address, for</font>
    <font color=#009900>// testing on one machine w/o a network:</font>
    InetAddress addr = 
      InetAddress.getByName(<font color=#0000ff>null</font>);
    <font color=#009900>// Alternatively, you can use </font>
    <font color=#009900>// the address or name:</font>
    <font color=#009900>// InetAddress addr = </font>
    <font color=#009900>//    InetAddress.getByName("127.0.0.1");</font>
    <font color=#009900>// InetAddress addr = </font>
    <font color=#009900>//    InetAddress.getByName("localhost");</font>
    System.out.println(<font color=#004488>"addr = "</font> + addr);
    Socket socket = 
      <font color=#0000ff>new</font> Socket(addr, JabberServer.PORT);
    <font color=#009900>// Guard everything in a try-finally to make</font>
    <font color=#009900>// sure that the socket is closed:</font>
    <font color=#0000ff>try</font> {
      System.out.println(<font color=#004488>"socket = "</font> + socket);
      BufferedReader in =
        <font color=#0000ff>new</font> BufferedReader(
          <font color=#0000ff>new</font> InputStreamReader(
            socket.getInputStream()));
      <font color=#009900>// Output is automatically flushed</font>
      <font color=#009900>// by PrintWriter:</font>
      PrintWriter out =
        <font color=#0000ff>new</font> PrintWriter(
          <font color=#0000ff>new</font> BufferedWriter(
            <font color=#0000ff>new</font> OutputStreamWriter(
              socket.getOutputStream())),<font color=#0000ff>true</font>);
      <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; 10; i ++) {
        out.println(<font color=#004488>"howdy "</font> + i);
        String str = in.readLine();
        System.out.println(str);
      }
      out.println(<font color=#004488>"END"</font>);
    } <font color=#0000ff>finally</font> {
      System.out.println(<font color=#004488>"closing..."</font>);
      socket.close();
    }
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">In <B>main(&#160;)</B> you can see all
three ways to produce the <B>InetAddress</B> of the local loopback IP address:
using <B>null</B>, <B>localhost</B>, or the explicit reserved address
<B>127.0.0.1</B>. Of course, if you want to connect to a machine across a
network you substitute that machine&#8217;s IP address. When the <B>InetAddress
addr</B> is printed (via the automatic call to its <B>toString(&#160;)</B>
method) the result is: 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I39' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I40>
</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>localhost/127.0.0.1</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">By handing <B>getByName(&#160;)</B> a
<B>null</B>, it defaulted to finding the <B>localhost</B>, and that produced the
special address <B>127.0.0.1</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I40' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I41>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Note that the
<A NAME="Index2084"></A><A NAME="Index2085"></A><B>Socket</B> called
<B>socket</B> is created with both the <B>InetAddress</B> and the port number.
To understand what it means when you print one of these <B>Socket </B>objects,
remember that an Internet connection is determined uniquely by these four pieces
of data: <B>clientHost</B>, <B>clientPortNumber</B>, <B>serverHost</B>, and
<B>serverPortNumber</B>. When the server comes up, it takes up its assigned port
(8080) on the localhost (127.0.0.1). When the client comes up, it is allocated
to the next available port on its machine, 1077 in this case, which also happens
to be on the same machine (127.0.0.1) as the server. Now, in order for data to
move between the client and server, each side has to know where to send it.
Therefore, during the process of connecting to the &#8220;known&#8221; server,
the client sends a &#8220;return address&#8221; so the server knows where to
send its data. This is what you see in the example output for the server
side:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>Socket[addr=127.0.0.1,port=1077,localport=8080]</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This means that the server just accepted
a connection from 127.0.0.1 on port 1077 while listening on its local port
(8080). On the client side:

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I41' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I42>
</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>Socket[addr=localhost/127.0.0.1,PORT=8080,localport=1077]</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">which means that the client made a
connection to 127.0.0.1 on port 8080 using the local port 1077.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I42' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I43>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You&#8217;ll notice that every time you
start up the client anew, the local port number is incremented. It starts at
1025 (one past the reserved block of ports) and keeps going up until you reboot
the machine, at which point it starts at 1025 again. (On UNIX machines, once the
upper limit of the socket range is reached, the numbers will wrap around to the
lowest available number again.)

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I43' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I44>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Once the <B>Socket</B> object has been
created, the process of turning it into a <B>BufferedReader</B> and
<B>PrintWriter</B> is the same as in the server (again, in both cases you start
with a <B>Socket</B>). Here, the client initiates the conversation by sending
the string &#8220;howdy&#8221; followed by a number. Note that the buffer must
again be flushed (which happens automatically via the second argument to the
<B>PrintWriter </B>constructor). If the buffer isn&#8217;t flushed, the whole
conversation will hang because the initial &#8220;howdy&#8221; will never get
sent (the buffer isn&#8217;t full enough to cause the send to happen
automatically). Each line that is sent back from the server is written to
<B>System.out</B> to verify that everything is working correctly. To terminate
the conversation, the agreed-upon &#8220;END&#8221; is sent. If the client
simply hangs up, then the server throws an exception.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I44' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I45>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You can see that the same care is taken
here to ensure that the network resources represented by the <B>Socket</B> are
properly cleaned up, using a <B>try-finally</B> block.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I45' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I46>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Sockets produce a
<A NAME="Index2086"></A>&#8220;dedicated&#8221; connection that persists until
it is explicitly disconnected. (The dedicated connection can still be
disconnected unexplicitly if one side, or an intermediary link, of the
connection crashes.) This means the two parties are locked in communication and
the connection is constantly open. This seems like a logical approach to
networking, but it puts an extra load on the network. Later in this chapter
you&#8217;ll see a different approach to networking, in which the connections
are only temporary.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I46' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I47>
</FONT><A NAME="_Toc375545497"></A><A NAME="_Toc481064870"></A><BR></P></DIV>
<A NAME="Heading518"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Serving multiple clients<BR><A NAME="Index2087"></A></H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The <B>JabberServer</B> works, but it can
handle only one client at a time. In a typical server, you&#8217;ll want to be
able to deal with many clients at once. The answer is
<A NAME="Index2088"></A><A NAME="Index2089"></A>multithreading, and in languages
that don&#8217;t directly support multithreading this means all sorts of
complications. In Chapter 14 you saw that multithreading in Java is about as
simple as possible, considering that multithreading is a rather complex topic.
Because threading in Java is reasonably straightforward, making a server that
handles multiple clients is relatively easy.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I47' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I48>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The basic scheme is to make a single
<B>ServerSocket</B> in the server and call <B>accept(&#160;)</B> to wait for a
new connection. When <B>accept(&#160;)</B> returns, you take the resulting
<B>Socket</B> and use it to create a new thread whose job is to serve that
particular client. Then you call <B>accept(&#160;)</B> again to wait for a new
client. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I48' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I49>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">In the following server code, you can see
that it looks similar to the <B>JabberServer.java</B> example except that all of
the operations to serve a particular client have been moved inside a separate
thread class:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c15:MultiJabberServer.java</font>
<font color=#009900>// A server that uses multithreading </font>
<font color=#009900>// to handle any number of clients.</font>
<font color=#0000ff>import</font> java.io.*;
<font color=#0000ff>import</font> java.net.*;

<font color=#0000ff>class</font> ServeOneJabber <font color=#0000ff>extends</font> Thread {
  <font color=#0000ff>private</font> Socket socket;
  <font color=#0000ff>private</font> BufferedReader in;
  <font color=#0000ff>private</font> PrintWriter out;
  <font color=#0000ff>public</font> ServeOneJabber(Socket s) 
      <font color=#0000ff>throws</font> IOException {
    socket = s;
    in = 
      <font color=#0000ff>new</font> BufferedReader(
        <font color=#0000ff>new</font> InputStreamReader(
          socket.getInputStream()));
    <font color=#009900>// Enable auto-flush:</font>
    out = 
      <font color=#0000ff>new</font> PrintWriter(
        <font color=#0000ff>new</font> BufferedWriter(
          <font color=#0000ff>new</font> OutputStreamWriter(
            socket.getOutputStream())), <font color=#0000ff>true</font>);
    <font color=#009900>// If any of the above calls throw an </font>
    <font color=#009900>// exception, the caller is responsible for</font>
    <font color=#009900>// closing the socket. Otherwise the thread</font>
    <font color=#009900>// will close it.</font>
    start(); <font color=#009900>// Calls run()</font>
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> run() {
    <font color=#0000ff>try</font> {
      <font color=#0000ff>while</font> (<font color=#0000ff>true</font>) {  
        String str = in.readLine();
        <font color=#0000ff>if</font> (str.equals(<font color=#004488>"END"</font>)) <font color=#0000ff>break</font>;
        System.out.println(<font color=#004488>"Echoing: "</font> + str);
        out.println(str);
      }
      System.out.println(<font color=#004488>"closing..."</font>);
    } <font color=#0000ff>catch</font>(IOException e) {
      System.err.println(<font color=#004488>"IO Exception"</font>);
    } <font color=#0000ff>finally</font> {
      <font color=#0000ff>try</font> {
        socket.close();
      } <font color=#0000ff>catch</font>(IOException e) {
        System.err.println(<font color=#004488>"Socket not closed"</font>);
      }
    }
  }
}

<font color=#0000ff>public</font> <font color=#0000ff>class</font> MultiJabberServer {  
  <font color=#0000ff>static</font> <font color=#0000ff>final</font> <font color=#0000ff>int</font> PORT = 8080;
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args)
      <font color=#0000ff>throws</font> IOException {
    ServerSocket s = <font color=#0000ff>new</font> ServerSocket(PORT);
    System.out.println(<font color=#004488>"Server Started"</font>);
    <font color=#0000ff>try</font> {
      <font color=#0000ff>while</font>(<font color=#0000ff>true</font>) {
        <font color=#009900>// Blocks until a connection occurs:</font>
        Socket socket = s.accept();
        <font color=#0000ff>try</font> {
          <font color=#0000ff>new</font> ServeOneJabber(socket);
        } <font color=#0000ff>catch</font>(IOException e) {
          <font color=#009900>// If it fails, close the socket,</font>
          <font color=#009900>// otherwise the thread will close it:</font>
          socket.close();
        }
      }
    } <font color=#0000ff>finally</font> {
      s.close();
    }
  } 
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The <B>ServeOneJabber </B>thread takes
the <B>Socket</B> object that&#8217;s produced by <B>accept(&#160;)</B> in
<B>main(&#160;)</B> every time a new client makes a connection. Then, as before,
it creates a <B>BufferedReader</B> and auto-flushed <B>PrintWriter</B> object
using the <B>Socket</B>. Finally, it calls the special <B>Thread</B> method
<B>start(&#160;)</B>, which performs thread initialization and then calls
<B>run(&#160;)</B>. This performs the same kind of action as in the previous
example: reading something from the socket and then echoing it back until it
reads the special &#8220;END&#8221; signal.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I49' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I50>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The responsibility for cleaning up the
socket must again be carefully designed. In this case, the socket is created
outside of the <B>ServeOneJabber</B> so the responsibility can be shared. If the
<B>ServeOneJabber</B> constructor fails, it will just throw the exception to the
caller, who will then clean up the thread. But if the constructor succeeds, then
the <B>ServeOneJabber</B> object takes over responsibility for cleaning up the
thread, in its <B>run(&#160;)</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I50' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I51>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Notice the simplicity of the
<B>MultiJabberServer</B>. As before, a <B>ServerSocket</B> is created and
<B>accept(&#160;)</B> is called to allow a new connection. But this time, the
return value of <B>accept(&#160;)</B> (a <B>Socket</B>) is passed to the
constructor for <B>ServeOneJabber,</B> which creates a new thread to handle that
connection. When the connection is terminated, the thread simply goes away.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I51' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I52>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">If the creation of the
<B>ServerSocket</B> fails, the exception is again thrown through
<B>main(&#160;)</B>. But if the creation succeeds, the outer <B>try-finally</B>
guarantees its cleanup. The inner <B>try-catch</B> guards only against the
failure of the <B>ServeOneJabber</B> constructor; if the constructor succeeds,
then the <B>ServeOneJabber</B> thread will close the associated socket.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I52' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I53>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">To test that the server really does
handle multiple clients, the following program creates many clients (using
threads) that connect to the same server. The maximum number of threads allowed
is determined by the <B>final int MAX_THREADS</B>. </FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c15:MultiJabberClient.java</font>
<font color=#009900>// Client that tests the MultiJabberServer</font>
<font color=#009900>// by starting up multiple clients.</font>
<font color=#0000ff>import</font> java.net.*;
<font color=#0000ff>import</font> java.io.*;

<font color=#0000ff>class</font> JabberClientThread <font color=#0000ff>extends</font> Thread {
  <font color=#0000ff>private</font> Socket socket;
  <font color=#0000ff>private</font> BufferedReader in;
  <font color=#0000ff>private</font> PrintWriter out;
  <font color=#0000ff>private</font> <font color=#0000ff>static</font> <font color=#0000ff>int</font> counter = 0;
  <font color=#0000ff>private</font> <font color=#0000ff>int</font> id = counter++;
  <font color=#0000ff>private</font> <font color=#0000ff>static</font> <font color=#0000ff>int</font> threadcount = 0;
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>int</font> threadCount() { 
    <font color=#0000ff>return</font> threadcount; 
  }
  <font color=#0000ff>public</font> JabberClientThread(InetAddress addr) {
    System.out.println(<font color=#004488>"Making client "</font> + id);
    threadcount++;
    <font color=#0000ff>try</font> {
      socket = 
        <font color=#0000ff>new</font> Socket(addr, MultiJabberServer.PORT);
    } <font color=#0000ff>catch</font>(IOException e) {
      System.err.println(<font color=#004488>"Socket failed"</font>);
      <font color=#009900>// If the creation of the socket fails, </font>
      <font color=#009900>// nothing needs to be cleaned up.</font>
    }
    <font color=#0000ff>try</font> {    
      in = 
        <font color=#0000ff>new</font> BufferedReader(
          <font color=#0000ff>new</font> InputStreamReader(
            socket.getInputStream()));
      <font color=#009900>// Enable auto-flush:</font>
      out = 
        <font color=#0000ff>new</font> PrintWriter(
          <font color=#0000ff>new</font> BufferedWriter(
            <font color=#0000ff>new</font> OutputStreamWriter(
              socket.getOutputStream())), <font color=#0000ff>true</font>);
      start();
    } <font color=#0000ff>catch</font>(IOException e) {
      <font color=#009900>// The socket should be closed on any </font>
      <font color=#009900>// failures other than the socket </font>
      <font color=#009900>// constructor:</font>
      <font color=#0000ff>try</font> {
        socket.close();
      } <font color=#0000ff>catch</font>(IOException e2) {
        System.err.println(<font color=#004488>"Socket not closed"</font>);
      }
    }
    <font color=#009900>// Otherwise the socket will be closed by</font>
    <font color=#009900>// the run() method of the thread.</font>
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> run() {
    <font color=#0000ff>try</font> {
      <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; 25; i++) {
        out.println(<font color=#004488>"Client "</font> + id + <font color=#004488>": "</font> + i);
        String str = in.readLine();
        System.out.println(str);
      }
      out.println(<font color=#004488>"END"</font>);
    } <font color=#0000ff>catch</font>(IOException e) {
      System.err.println(<font color=#004488>"IO Exception"</font>);
    } <font color=#0000ff>finally</font> {
      <font color=#009900>// Always close it:</font>
      <font color=#0000ff>try</font> {
        socket.close();
      } <font color=#0000ff>catch</font>(IOException e) {
        System.err.println(<font color=#004488>"Socket not closed"</font>);
      }
      threadcount--; <font color=#009900>// Ending this thread</font>
    }
  }
}

<font color=#0000ff>public</font> <font color=#0000ff>class</font> MultiJabberClient {
  <font color=#0000ff>static</font> <font color=#0000ff>final</font> <font color=#0000ff>int</font> MAX_THREADS = 40;
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) 
      <font color=#0000ff>throws</font> IOException, InterruptedException {
    InetAddress addr = 
      InetAddress.getByName(<font color=#0000ff>null</font>);
    <font color=#0000ff>while</font>(<font color=#0000ff>true</font>) {
      <font color=#0000ff>if</font>(JabberClientThread.threadCount() 
         &lt; MAX_THREADS)
        <font color=#0000ff>new</font> JabberClientThread(addr);
      Thread.currentThread().sleep(100);
    }
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The <B>JabberClientThread</B> constructor
takes an <B>InetAddress</B> and uses it to open a <B>Socket</B>. You&#8217;re
probably starting to see the pattern: the <B>Socket</B> is always used to create
some kind of <B>Reader </B>and/or <B>Writer </B>(or <B>InputStream</B> and/or
<B>OutputStream</B>) object, which is the only way that the <B>Socket</B> can be
used. (You can, of course, write a class or two to automate this process instead
of doing all the typing if it becomes painful.) Again, <B>start(&#160;)</B>
performs thread initialization and calls <B>run(&#160;)</B>. Here, messages are
sent to the server and information from the server is echoed to the screen.
However, the thread has a limited lifetime and eventually completes. Note that
the socket is cleaned up if the constructor fails after the socket is created
but before the constructor completes. Otherwise the responsibility for calling
<B>close(&#160;)</B> for the socket is relegated to the <B>run(&#160;)</B>
method. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I53' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I54>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The <B>threadcount</B> keeps track of how
many <B>JabberClientThread</B> objects currently exist. It is incremented as
part of the constructor and decremented as <B>run(&#160;)</B> exits (which means
the thread is terminating). In <B>MultiJabberClient.main(&#160;),</B> you can
see that the number of threads is tested, and if there are too many, no more are
created. Then the method sleeps. This way, some threads will eventually
terminate and more can be created. You can experiment with <B>MAX_THREADS</B> to
see where your particular system begins to have trouble with too many
connections.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I54' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I55>
</FONT><A NAME="_Toc375545498"></A><A NAME="_Toc481064871"></A><BR></P></DIV>
<A NAME="Heading519"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Datagrams<BR><A NAME="Index2090"></A><A NAME="Index2091"></A></H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The examples you&#8217;ve seen so far use
the
<A NAME="Index2092"></A><A NAME="Index2093"></A><A NAME="Index2094"></A><I>Transmission
Control Protocol</I> (TCP, also known as
<A NAME="Index2095"></A><A NAME="Index2096"></A><A NAME="Index2097"></A><I>stream-based
sockets</I>), which is designed for ultimate reliability and guarantees that the
data will get there. It allows retransmission of lost data, it provides multiple
paths through different routers in case one goes down, and bytes are delivered
in the order they are sent. All this control and reliability comes at a cost:
TCP has a high overhead. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I55' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I56>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">There&#8217;s a second protocol, called
<A NAME="Index2098"></A><A NAME="Index2099"></A><A NAME="Index2100"></A><A NAME="Index2101"></A><I>User
Datagram Protocol</I> (UDP), which doesn&#8217;t guarantee that the packets will
be delivered and doesn&#8217;t guarantee that they will arrive in the order they
were sent. It&#8217;s called an
&#8220;<A NAME="Index2102"></A><A NAME="Index2103"></A>unreliable
protocol&#8221; (TCP is a
<A NAME="Index2104"></A><A NAME="Index2105"></A>&#8220;reliable
protocol&#8221;), which sounds bad, but because it&#8217;s much faster it can be
useful. There are some applications, such as an audio signal, in which it
isn&#8217;t so critical if a few packets are dropped here or there but speed is
vital. Or consider a time-of-day server, where it really doesn&#8217;t matter if
one of the messages is lost. Also, some applications might be able to fire off a
UDP message to a server and can then assume, if there is no response in a
reasonable period of time, that the message was lost.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I56' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I57>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Typically, you&#8217;ll do most of your
direct network programming with TCP, and only occasionally will you use UDP.
There&#8217;s a more complete treatment of UDP, including an example, in the
first edition of this book (available on the CD ROM bound into this book, or as
a free download from <I>www.BruceEckel.com</I>).

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I57' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I58>
</FONT><A NAME="_Toc481064872"></A><BR></P></DIV>
<A NAME="Heading520"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Using URLs from within an
applet<BR><A NAME="Index2106"></A><A NAME="Index2107"></A><A NAME="Index2108"></A></H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">It&#8217;s possible for an applet to
cause the display of any URL through the Web browser the applet is running
within. You can do this with the following line:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>getAppletContext().showDocument(u);</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><A NAME="Index2109"></A><A NAME="Index2110"></A><FONT FACE="Georgia">in
which <B>u</B> is the <B>URL</B> object. Here&#8217;s a simple example that
redirects you to another Web page. Although you&#8217;re just redirected to an
HTML page, you could also redirect to the output of a CGI program. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I58' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I59>
</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c15:ShowHTML.java</font>
<font color=#009900>// &lt;applet code=ShowHTML width=100 height=50&gt;</font>
<font color=#009900>// &lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.net.*;
<font color=#0000ff>import</font> java.io.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> ShowHTML <font color=#0000ff>extends</font> JApplet {
  JButton send = <font color=#0000ff>new</font> JButton(<font color=#004488>"Go"</font>);
  JLabel l = <font color=#0000ff>new</font> JLabel();
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    send.addActionListener(<font color=#0000ff>new</font> Al());
    cp.add(send);
    cp.add(l);
  }
  <font color=#0000ff>class</font> Al <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent ae) {
      <font color=#0000ff>try</font> {
        <font color=#009900>// This could be a CGI program instead of</font>
        <font color=#009900>// an HTML page.</font>
        URL u = <font color=#0000ff>new</font> URL(getDocumentBase(), 
          <font color=#004488>"FetcherFrame.html"</font>);
        <font color=#009900>// Display the output of the URL using</font>
        <font color=#009900>// the Web browser, as an ordinary page:</font>
        getAppletContext().showDocument(u);
      } <font color=#0000ff>catch</font>(Exception e) {
        l.setText(e.toString());
      }
    }
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> ShowHTML(), 100, 50);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The beauty of the
<A NAME="Index2111"></A><A NAME="Index2112"></A><B>URL</B> class is how much it
shields you from. You can connect to Web servers without knowing much at all
about what&#8217;s going on under the covers.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I59' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I60>
</FONT><BR></P></DIV>
<A NAME="Heading521"></A><FONT FACE = "Verdana"><H4 ALIGN="LEFT">
Reading a file from the server</H4></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">A variation on the above program reads a
file located on the server. In this case, the file is specified by the
client:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c15:Fetcher.java</font>
<font color=#009900>// &lt;applet code=Fetcher width=500 height=300&gt;</font>
<font color=#009900>// &lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*;
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> java.net.*;
<font color=#0000ff>import</font> java.io.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Fetcher <font color=#0000ff>extends</font> JApplet {
  JButton fetchIt= <font color=#0000ff>new</font> JButton(<font color=#004488>"Fetch the Data"</font>);
  JTextField f = 
    <font color=#0000ff>new</font> JTextField(<font color=#004488>"Fetcher.java"</font>, 20);
  JTextArea t = <font color=#0000ff>new</font> JTextArea(10,40);
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    Container cp = getContentPane();
    cp.setLayout(<font color=#0000ff>new</font> FlowLayout());
    fetchIt.addActionListener(<font color=#0000ff>new</font> FetchL());
    cp.add(<font color=#0000ff>new</font> JScrollPane(t));
    cp.add(f); cp.add(fetchIt);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>class</font> FetchL <font color=#0000ff>implements</font> ActionListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> actionPerformed(ActionEvent e) {
      <font color=#0000ff>try</font> {
        URL url = <font color=#0000ff>new</font> URL(getDocumentBase(),
          f.getText());
        t.setText(url + <font color=#004488>"\n"</font>);
        InputStream is = url.openStream();
        BufferedReader in = <font color=#0000ff>new</font> BufferedReader(
          <font color=#0000ff>new</font> InputStreamReader(is));
        String line;
        <font color=#0000ff>while</font> ((line = in.readLine()) != <font color=#0000ff>null</font>)
          t.append(line + <font color=#004488>"\n"</font>);
      } <font color=#0000ff>catch</font>(Exception ex) {
        t.append(ex.toString());
      }
    }
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> Fetcher(), 500, 300);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The creation of the <B>URL</B> object is
similar to the previous example&#8212;<B>getDocumentBase(&#160;)</B> is the
starting point as before, but this time the name of the file is read from the
<B>JTextField</B>. Once the <B>URL</B> object is created, its <B>String</B>
version is placed in the <B>JTextArea</B> so we can see what it looks like. Then
an <B>InputStream</B> is procured from the <B>URL</B>, which in this case will
simply produce a stream of the characters in the file. After converting to a
<B>Reader</B> and buffering, each line is read and appended to the
<B>JTextArea</B>. Note that the <B>JTextArea</B> has been placed inside a
<B>JScrollPane</B> so that scrolling is handled automatically.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I60' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I61>
</FONT><A NAME="_Toc481064873"></A><BR></P></DIV>
<A NAME="Heading522"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
More to networking</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">There&#8217;s actually a lot more to
networking than can be covered in this introductory treatment. Java networking
also provides fairly extensive support for URLs, including protocol handlers for
different types of content that can be discovered at an Internet site. You can
find other Java networking features fully and carefully described in <I>Java
Network Programming</I> by Elliotte Rusty Harold (O&#8217;Reilly, 1997).

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I61' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I62>
</FONT><A NAME="_Toc481064874"></A><BR></P></DIV>
<A NAME="Heading523"></A><FONT FACE = "Verdana"><H2 ALIGN="LEFT">
Java Database Connectivity (JDBC)</H2></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">It has been estimated that half of all
software development involves client/server operations. A great promise of Java
has been the ability to build platform-independent client/server database
applications. This has come to fruition with
<A NAME="Index2113"></A><A NAME="Index2114"></A><A NAME="Index2115"></A>Java
DataBase Connectivity (JDBC).

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I62' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I63>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">One of the major problems with databases
has been the feature wars between the database companies. There is a
&#8220;standard&#8221; database language,
<A NAME="Index2116"></A><A NAME="Index2117"></A>Structured Query Language
(SQL-92), but you must usually know which database vendor you&#8217;re working
with despite the standard. JDBC is designed to be platform-independent, so you
don&#8217;t need to worry about the database you&#8217;re using while
you&#8217;re programming. However, it&#8217;s still possible to make
vendor-specific calls from JDBC so you aren&#8217;t restricted from doing what
you must. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I63' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I64>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">One place where programmers may need to
use SQL type names is in the SQL </FONT><TT><FONT FACE="Courier New">TABLE
CREATE</FONT></TT><FONT FACE="Georgia"> statement when they are creating a new
database table and defining the SQL type for each column. Unfortunately there
are significant variations between SQL types supported by different database
products. Different databases that support SQL types with the same semantics and
structure may give those types different names. Most major databases support an
SQL data type for large binary values: in Oracle this type is called a
</FONT><TT><FONT FACE="Courier New">LONG RAW</FONT></TT><FONT FACE="Georgia">,
Sybase calls it
</FONT><TT><FONT FACE="Courier New">IMAGE</FONT></TT><FONT FACE="Georgia">,
Informix calls it
</FONT><TT><FONT FACE="Courier New">BYTE</FONT></TT><FONT FACE="Georgia">, and
DB2 calls it </FONT><TT><FONT FACE="Courier New">LONG VARCHAR FOR BIT
DATA</FONT></TT><FONT FACE="Georgia">. Therefore, if database portability is a
goal you should try to use only generic SQL type identifiers.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I64' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I65>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Portability is an issue when writing for
a book where readers may be testing the examples with all kinds of unknown data
stores. I have tried to write these examples to be as portable as possible. You
should also notice that the database-specific code has been isolated in order to
centralize any changes that you may need to perform to get the examples
operational in your environment.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I65' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I66>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">JDBC, like many of the APIs in Java, is
designed for simplicity. The method calls you make correspond to the logical
operations you&#8217;d think of doing when gathering data from a database:
connect to the database, create a statement and execute the query, and look at
the result set. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I66' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I67>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">To allow this platform independence, JDBC
provides a <I>driver manager</I> that dynamically maintains all the driver
objects that your database queries will need. So if you have three different
kinds of vendor databases to connect to, you&#8217;ll need three different
driver objects. The driver objects register themselves with the driver manager
at the time of loading, and you can force the loading using
<B>Class.forName(&#160;)</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I67' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I68>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">To open a database, you must create a
&#8220;<A NAME="Index2118"></A><A NAME="Index2119"></A>database URL&#8221; that
specifies: <A NAME="Index2120"></A></FONT><BR></P></DIV>
<OL>
<LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">That you&#8217;re using
JDBC with &#8220;jdbc.&#8221;

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I68' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I69>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">The
&#8220;subprotocol&#8221;: the name of the driver or the name of a database
connectivity mechanism. Since the design of JDBC was inspired by ODBC, the first
subprotocol available is the &#8220;jdbc-odbc bridge,&#8221; specified by
&#8220;odbc.&#8221;

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I69' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I70>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">The
database identifier. This varies with the database driver used, but it generally
provides a logical name that is mapped by the database administration software
to a physical directory where the database tables are located. For your database
identifier to have any meaning, you must register the name using your database
administration software. (The process of registration varies from platform to
platform.)

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I70' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I71>
</FONT></OL><DIV ALIGN="LEFT"><P><FONT FACE="Georgia">All
this information is combined into one string, the &#8220;database URL.&#8221;
For example, to connect through the ODBC subprotocol to a database identified as
&#8220;people,&#8221; the database URL could be:

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I71' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I72>
</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>String dbUrl = <font color=#004488>"jdbc:odbc:people"</font>;</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">If you&#8217;re connecting across a
network, the database URL will contain the connection information identifying
the remote machine and can become a bit intimidating. Here is an example of a
CloudScape database being called from a remote client utilizing RMI:

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I72' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I73>
</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>jdbc:rmi:<font color=#009900>//192.168.170.27:1099/jdbc:cloudscape:db</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This database URL is really two jdbc
calls in one. The first part
&#8220;</FONT><TT><FONT FACE="Courier New">jdbc:rmi://192.168.170.27:1099/</FONT></TT><FONT FACE="Georgia">&#8221;
uses RMI to make the connection to the remote database engine listening on port
1099 at IP Address 192.168.170.27. The second part of the URL,
&#8220;</FONT><TT><FONT FACE="Courier New">jdbc:cloudscape:db</FONT></TT><FONT FACE="Georgia">&#8221;
conveys the more typical settings using the subprotocol and database name but
this will only happen after the first section has made the connection via RMI to
the remote machine. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I73' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I74>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">When you&#8217;re ready to connect to the
database, call the <B>static</B> method
<B>DriverManager.getConnection(&#160;)</B> and pass it the database URL, the
user name, and a password to get into the database. You get back a
<B>Connection</B> object that you can then use to query and manipulate the
database. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I74' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I75>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The following example opens a database of
contact information and looks for a person&#8217;s last name as given on the
command line. It selects only the names of people that have email addresses,
then prints out all the ones that match the given last name:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c15:jdbc:Lookup.java</font>
<font color=#009900>// Looks up email addresses in a </font>
<font color=#009900>// local database using JDBC.</font>
<font color=#0000ff>import</font> java.sql.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Lookup {
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) 
  <font color=#0000ff>throws</font> SQLException, ClassNotFoundException {
    String dbUrl = <font color=#004488>"jdbc:odbc:people"</font>;
    String user = <font color=#004488>""</font>;
    String password = <font color=#004488>""</font>;
    <font color=#009900>// Load the driver (registers itself)</font>
    Class.forName(
      <font color=#004488>"sun.jdbc.odbc.JdbcOdbcDriver"</font>);
    Connection c = DriverManager.getConnection(
      dbUrl, user, password);
    Statement s = c.createStatement();
    <font color=#009900>// SQL code:</font>
    ResultSet r = 
      s.executeQuery(
        <font color=#004488>"SELECT FIRST, LAST, EMAIL "</font> +
        <font color=#004488>"FROM people.csv people "</font> +
        <font color=#004488>"WHERE "</font> +
        <font color=#004488>"(LAST='"</font> + args[0] + <font color=#004488>"') "</font> +
        <font color=#004488>" AND (EMAIL Is Not Null) "</font> +
        <font color=#004488>"ORDER BY FIRST"</font>);
    <font color=#0000ff>while</font>(r.next()) {
      <font color=#009900>// Capitalization doesn't matter:</font>
      System.out.println(
        r.getString(<font color=#004488>"Last"</font>) + <font color=#004488>", "</font> 
        + r.getString(<font color=#004488>"fIRST"</font>)
        + <font color=#004488>": "</font> + r.getString(<font color=#004488>"EMAIL"</font>) );
    }
    s.close(); <font color=#009900>// Also closes ResultSet</font>
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You can see the creation of the database
URL as previously described. In this example, there is no password protection on
the database so the user name and password are empty strings.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I75' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I76>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Once the connection is made with
<B>DriverManager.getConnection(&#160;)</B>, you can use the resulting
<B>Connection</B> object to<B> </B>create a <B>Statement</B> object using the
<A NAME="Index2121"></A><A NAME="Index2122"></A><B>createStatement(&#160;)</B>
method. With the resulting
<A NAME="Index2123"></A><A NAME="Index2124"></A><B>Statement</B>, you can call
<A NAME="Index2125"></A><A NAME="Index2126"></A><B>executeQuery(&#160;)</B>,
passing in a string containing an SQL-92 standard SQL statement. (You&#8217;ll
see shortly how you can generate this statement automatically, so you
don&#8217;t have to know much about SQL.) 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I76' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I77>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The <B>executeQuery(&#160;) </B>method
returns a <A NAME="Index2127"></A><A NAME="Index2128"></A><B>ResultSet</B>
object, which is an iterator: the <B>next(&#160;)</B> method moves the iterator
to the next record in the statement, or returns <B>false</B> if the end of the
result set has been reached. You&#8217;ll always get a <B>ResultSet</B> object
back from <B>executeQuery(&#160;)</B> even if a query results in an empty set
(that is, an exception is not thrown). Note that you must call
<B>next(&#160;)</B> once before trying to read any record data. If the result
set is empty, this first call to <B>next(&#160;)</B> will return <B>false</B>.
For each record in the result set, you can select the fields using (among other
approaches) the field name as a string. Also note that the capitalization of the
field name is ignored&#8212;it doesn&#8217;t matter with an SQL database. You
determine the type you&#8217;ll get back by calling
<A NAME="Index2129"></A><A NAME="Index2130"></A><B>getInt(&#160;)</B>,
<A NAME="Index2131"></A><A NAME="Index2132"></A><B>getString(&#160;)</B>,
<A NAME="Index2133"></A><A NAME="Index2134"></A><B>getFloat(&#160;)</B>, etc. At
this point, you&#8217;ve got your database data in Java native format and can do
whatever you want with it using ordinary Java code.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I77' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I78>
</FONT><A NAME="_Toc481064875"></A><BR></P></DIV>
<A NAME="Heading524"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Getting the example to work</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">With JDBC, understanding the code is
relatively simple. The confusing part is making it work on your particular
system. The reason this is confusing is that it requires you to figure out how
to get your JDBC driver to load properly, and how to set up a database using
your database administration software.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I78' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I79>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Of course, this process can vary
radically from machine to machine, but the process I used to make it work under
32-bit Windows might give you clues to help you attack your own situation.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I79' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I80>
</FONT><BR></P></DIV>
<A NAME="Heading525"></A><FONT FACE = "Verdana"><H4 ALIGN="LEFT">
Step 1: Find the JDBC Driver</H4></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The program above contains the
statement:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>Class.forName(<font color=#004488>"sun.jdbc.odbc.JdbcOdbcDriver"</font>);</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This implies a directory structure, which
is deceiving. With this particular installation of JDK 1.1, there was no file
called <B>JdbcOdbcDriver.class</B>, so if you looked at this example and went
searching for it you&#8217;d be frustrated. Other published examples use a
pseudo name, such as &#8220;myDriver.ClassName,&#8221; which is less than
helpful. In fact, the load statement above for the jdbc-odbc driver (the only
one that actually comes with the JDK) appears in only a few places in the online
documentation (in particular, a page labeled &#8220;JDBC-ODBC Bridge
Driver&#8221;). If the load statement above doesn&#8217;t work, then the name
might have been changed as part of a Java version change, so you should hunt
through the documentation again.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I80' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I81>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">If the load statement is wrong,
you&#8217;ll get an exception at this point. To test whether your driver load
statement is working correctly, comment out the code after the statement and up
to the <B>catch</B> clause; if the program throws no exceptions it means that
the driver is loading properly.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I81' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I82>
</FONT><BR></P></DIV>
<A NAME="Heading526"></A><FONT FACE = "Verdana"><H4 ALIGN="LEFT">
Step 2: Configure the database</H4></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Again, this is specific to 32-bit
Windows; you might need to do some research to figure it out for your own
platform. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I82' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I83>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">First, open the control panel. You might
find two icons that say &#8220;ODBC.&#8221; You must use the one that says
&#8220;32bit ODBC,&#8221; since the other one is for backward compatibility with
16-bit ODBC software and will produce no results for JDBC. When you open the
&#8220;32bit ODBC&#8221; icon, you&#8217;ll see a tabbed dialog with a number of
tabs, including &#8220;User DSN,&#8221; &#8220;System DSN,&#8221; &#8220;File
DSN,&#8221; etc., in which &#8220;DSN&#8221; means &#8220;Data Source
Name.&#8221; It turns out that for the JDBC-ODBC bridge, the only place where
it&#8217;s important to set up your database is &#8220;System DSN,&#8221; but
you&#8217;ll also want to test your configuration and create queries, and for
that you&#8217;ll also need to set up your database in &#8220;File DSN.&#8221;
This will allow the Microsoft Query tool (that comes with Microsoft Office) to
find the database. Note that other query tools are also available from other
vendors. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I83' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I84>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The most interesting database is one that
you&#8217;re already using. Standard ODBC supports a number of different file
formats including such venerable workhorses as DBase. However, it also includes
the simple &#8220;comma-separated ASCII&#8221; format, which virtually every
data tool has the ability to write. In my case, I just took my
&#8220;people&#8221; database that I&#8217;ve been maintaining for years using
various contact-management tools and exported it as a comma-separated ASCII file
(these typically have an extension of <B>.csv</B>). In the &#8220;System
DSN&#8221; section I chose &#8220;Add,&#8221; chose the text driver to handle my
comma-separated ASCII file, and then un-checked &#8220;use current
directory&#8221; to allow me to specify the directory where I exported the data
file. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I84' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I85>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You&#8217;ll notice when you do this that
you don&#8217;t actually specify a file, only a directory. That&#8217;s because
a database is typically represented as a collection of files under a single
directory (although it could be represented in other forms as well). Each file
usually contains a single table, and the SQL statements can produce results that
are culled from multiple tables in the database (this is called a
<A NAME="Index2135"></A><A NAME="Index2136"></A><I>join</I>). A database that
contains only a single table (like my &#8220;people&#8221; database) is usually
called a
<A NAME="Index2137"></A><A NAME="Index2138"></A><A NAME="Index2139"></A><I>flat-file
database</I>. Most problems that go beyond the simple storage and retrieval of
data generally require multiple tables that must be related by joins to produce
the desired results, and these are called
<A NAME="Index2140"></A><A NAME="Index2141"></A><A NAME="Index2142"></A><I>relational</I>
databases. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I85' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I86>
</FONT><BR></P></DIV>
<A NAME="Heading527"></A><FONT FACE = "Verdana"><H4 ALIGN="LEFT">
Step 3: Test the configuration</H4></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">To test the configuration you&#8217;ll
need a way to discover whether the database is visible from a program that
queries it. Of course, you can simply run the JDBC program example above, up to
and including the statement:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>Connection c = DriverManager.getConnection(
  dbUrl, user, password);</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">If an exception is thrown, your
configuration was incorrect.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I86' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I87>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">However, it&#8217;s useful to get a
query-generation tool involved at this point. I used Microsoft Query that came
with Microsoft Office, but you might prefer something else. The query tool must
know where the database is, and Microsoft Query required that I go to the ODBC
Administrator&#8217;s &#8220;File DSN&#8221; tab and add a new entry there,
again specifying the text driver and the directory where my database lives. You
can name the entry anything you want, but it&#8217;s helpful to use the same
name you used in &#8220;System DSN.&#8221;

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I87' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I88>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Once you&#8217;ve done this, you will see
that your database is available when you create a new query using your query
tool. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I88' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I89>
</FONT><BR></P></DIV>
<A NAME="Heading528"></A><FONT FACE = "Verdana"><H4 ALIGN="LEFT">
Step 4: Generate your SQL query</H4></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The query that I created using Microsoft
Query not only showed me that my database was there and in good order, but it
also automatically created the SQL code that I needed to insert into my Java
program. I wanted a query that would search for records that had the last name
that was typed on the command line when starting the Java program. So as a
starting point, I searched for a specific last name, &#8220;Eckel.&#8221; I also
wanted to display only those names that had email addresses associated with
them. The steps I took to create this query were:</FONT><BR></P></DIV>
<OL>
<LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Start a new query and use
the Query Wizard. Select the &#8220;people&#8221; database. (This is the
equivalent of opening the database connection using the appropriate database
URL.)</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Select the
&#8220;people&#8221; table within the database. From within the table, choose
the columns FIRST, LAST, and
EMAIL.</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Under
&#8220;Filter Data,&#8221; choose LAST and select &#8220;equals&#8221; with an
argument of &#8220;Eckel.&#8221; Click the &#8220;And&#8221; radio
button.</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Choose EMAIL
and select &#8220;Is not
Null.&#8221;</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Under
&#8220;Sort By,&#8221; choose
FIRST.</FONT></OL><DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The result of this
query will show you whether you&#8217;re getting what you want.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I89' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I90>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Now you can press the SQL button and
without any research on your part, up will pop the correct SQL code, ready for
you to cut and paste. For this query, it looked like this:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>SELECT people.FIRST, people.LAST, people.EMAIL
FROM people.csv people
WHERE (people.LAST='Eckel') AND 
(people.EMAIL Is Not Null)
ORDER BY people.FIRST</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Especially with more complicated queries
it&#8217;s easy to get things wrong, but by using a query tool you can
interactively test your queries and automatically generate the correct code.
It&#8217;s hard to argue the case for doing this by hand.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I90' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I91>
</FONT><BR></P></DIV>
<A NAME="Heading529"></A><FONT FACE = "Verdana"><H4 ALIGN="LEFT">
Step 5: Modify and paste in your query</H4></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You&#8217;ll notice that the code above
looks different from what&#8217;s used in the program. That&#8217;s because the
query tool uses full qualification for all of the names, even when there&#8217;s
only one table involved. (When more than one table is involved, the
qualification prevents collisions between columns from different tables that
have the same names.) Since this query involves only one table, you can
optionally remove the &#8220;people&#8221; qualifier from most of the names,
like this: 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I91' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I92>
</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>SELECT FIRST, LAST, EMAIL
FROM people.csv people
WHERE (LAST='Eckel') AND 
(EMAIL Is Not Null)
ORDER BY FIRST</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">In addition, you don&#8217;t want this
program to be hard coded to look for only one name. Instead, it should hunt for
the name given as the command-line argument. Making these changes and turning
the SQL statement into a dynamically-created <B>String</B> produces:

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I92' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I93>
</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#004488>"SELECT FIRST, LAST, EMAIL "</font> +
<font color=#004488>"FROM people.csv people "</font> +
<font color=#004488>"WHERE "</font> +
<font color=#004488>"(LAST='"</font> + args[0] + <font color=#004488>"') "</font> +
<font color=#004488>" AND (EMAIL Is Not Null) "</font> +
<font color=#004488>"ORDER BY FIRST"</font>);</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">SQL has another way to insert names into
a query called
<A NAME="Index2143"></A><A NAME="Index2144"></A><A NAME="Index2145"></A><I>stored
procedures</I>, which is used for speed. But for much of your database
experimentation and for your first cut, building your own query strings in Java
is fine. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I93' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I94>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You can see from this example that by
using the tools currently available&#8212;in particular the query-building
tool&#8212;database programming with SQL and JDBC can be quite straightforward.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I94' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I95>
</FONT><A NAME="_Toc481064876"></A><BR></P></DIV>
<A NAME="Heading530"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
A GUI version of the lookup program</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">It&#8217;s more useful to leave the
lookup program running all the time and simply switch to it and type in a name
whenever you want to look someone up. The following program creates the lookup
program as an application/applet, and it also adds name completion so the data
will show up without forcing you to type the entire last name:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c15:jdbc:VLookup.java</font>
<font color=#009900>// GUI version of Lookup.java.</font>
<font color=#009900>// &lt;applet code=VLookup</font>
<font color=#009900>// width=500 height=200&gt;&lt;/applet&gt;</font>
<font color=#0000ff>import</font> javax.swing.*; 
<font color=#0000ff>import</font> java.awt.*;
<font color=#0000ff>import</font> java.awt.event.*;
<font color=#0000ff>import</font> javax.swing.event.*;
<font color=#0000ff>import</font> java.sql.*;
<font color=#0000ff>import</font> com.bruceeckel.swing.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> VLookup <font color=#0000ff>extends</font> JApplet {
  String dbUrl = <font color=#004488>"jdbc:odbc:people"</font>;
  String user = <font color=#004488>""</font>;
  String password = <font color=#004488>""</font>;
  Statement s;
  JTextField searchFor = <font color=#0000ff>new</font> JTextField(20);
  JLabel completion = 
    <font color=#0000ff>new</font> JLabel(<font color=#004488>"                        "</font>);
  JTextArea results = <font color=#0000ff>new</font> JTextArea(40, 20);
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init() {
    searchFor.getDocument().addDocumentListener(
      <font color=#0000ff>new</font> SearchL());
    JPanel p = <font color=#0000ff>new</font> JPanel();
    p.add(<font color=#0000ff>new</font> Label(<font color=#004488>"Last name to search for:"</font>));
    p.add(searchFor);
    p.add(completion);
    Container cp = getContentPane();
    cp.add(p, BorderLayout.NORTH);
    cp.add(results, BorderLayout.CENTER);
    <font color=#0000ff>try</font> {
      <font color=#009900>// Load the driver (registers itself)</font>
      Class.forName(
        <font color=#004488>"sun.jdbc.odbc.JdbcOdbcDriver"</font>);
      Connection c = DriverManager.getConnection(
        dbUrl, user, password);
      s = c.createStatement();
    } <font color=#0000ff>catch</font>(Exception e) {
      results.setText(e.toString());
    }
  }
  <font color=#0000ff>class</font> SearchL <font color=#0000ff>implements</font> DocumentListener {
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> changedUpdate(DocumentEvent e){}
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> insertUpdate(DocumentEvent e){
      textValueChanged();
    }
    <font color=#0000ff>public</font> <font color=#0000ff>void</font> removeUpdate(DocumentEvent e){
      textValueChanged();
    }
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> textValueChanged() {
    ResultSet r;
    <font color=#0000ff>if</font>(searchFor.getText().length() == 0) {
      completion.setText(<font color=#004488>""</font>);
      results.setText(<font color=#004488>""</font>);
      <font color=#0000ff>return</font>;
    }
    <font color=#0000ff>try</font> {
      <font color=#009900>// Name completion:</font>
      r = s.executeQuery(
        <font color=#004488>"SELECT LAST FROM people.csv people "</font> +
        <font color=#004488>"WHERE (LAST Like '"</font> +
        searchFor.getText()  + 
        <font color=#004488>"%') ORDER BY LAST"</font>);
      <font color=#0000ff>if</font>(r.next()) 
        completion.setText(
          r.getString(<font color=#004488>"last"</font>));
      r = s.executeQuery(
        <font color=#004488>"SELECT FIRST, LAST, EMAIL "</font> +
        <font color=#004488>"FROM people.csv people "</font> +
        <font color=#004488>"WHERE (LAST='"</font> + 
        completion.getText() +
        <font color=#004488>"') AND (EMAIL Is Not Null) "</font> +
        <font color=#004488>"ORDER BY FIRST"</font>);
    } <font color=#0000ff>catch</font>(Exception e) {
      results.setText(
        searchFor.getText() + <font color=#004488>"\n"</font>);
      results.append(e.toString());
      <font color=#0000ff>return</font>; 
    }
    results.setText(<font color=#004488>""</font>);
    <font color=#0000ff>try</font> {
      <font color=#0000ff>while</font>(r.next()) {
        results.append(
          r.getString(<font color=#004488>"Last"</font>) + <font color=#004488>", "</font> 
          + r.getString(<font color=#004488>"fIRST"</font>) + 
          <font color=#004488>": "</font> + r.getString(<font color=#004488>"EMAIL"</font>) + <font color=#004488>"\n"</font>);
      }
    } <font color=#0000ff>catch</font>(Exception e) {
      results.setText(e.toString());
    }
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Console.run(<font color=#0000ff>new</font> VLookup(), 500, 200);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Much of the database logic is the same,
but you can see that a <B>DocumentListener</B> is added to listen to the<B>
JTextField</B> (see the <B>javax.swing.JTextField</B> entry in the Java HTML
documentation from <I>java.sun.com</I> for details), so that whenever you type a
new character it first tries to do a name completion by looking up the last name
in the database and using the first one that shows up. (It places it in the
<B>completion</B> <B>JLabel</B>, and uses that as the lookup text.) This way, as
soon as you&#8217;ve typed enough characters for the program to uniquely find
the name you&#8217;re looking for, you can stop.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I95' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I96>
</FONT><A NAME="_Toc481064877"></A><BR></P></DIV>
<A NAME="Heading531"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Why the JDBC API <BR>seems so complex</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">When you browse the online documentation
for JDBC it can seem daunting. In particular, in the
<A NAME="Index2146"></A><A NAME="Index2147"></A><B>DatabaseMetaData</B>
interface&#8212;which is just huge, contrary to most of the interfaces you see
in Java&#8212;there are methods such as
<B>dataDefinitionCausesTransactionCommit(&#160;)</B>,
<B>getMaxColumnNameLength(&#160;)</B>, <B>getMaxStatementLength(&#160;)</B>,
<B>storesMixedCaseQuotedIdentifiers(&#160;)</B>,
<B>supportsANSI92IntermediateSQL(&#160;)</B>,
<B>supportsLimitedOuterJoins(&#160;)</B>, and so on. What&#8217;s this all
about? 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I96' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I97>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">As mentioned earlier, databases have
seemed from their inception to be in a constant state of turmoil, primarily
because the demand for database applications, and thus database tools, is so
great. Only recently has there been any convergence on the common language of
SQL (and there are plenty of other database languages in common use). But even
with an SQL &#8220;standard&#8221; there are so many variations on that theme
that JDBC must provide the large <B>DatabaseMetaData</B> interface so that your
code can discover the capabilities of the particular &#8220;standard&#8221; SQL
database that it&#8217;s currently connected to. In short, you can write simple,
transportable SQL, but if you want to optimize speed your coding will multiply
tremendously as you investigate the capabilities of a particular vendor&#8217;s
database. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I97' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I98>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This, of course, is not Java&#8217;s
fault. The discrepancies between database products are just something that JDBC
tries to help compensate for. But bear in mind that your life will be easier if
you can either write generic queries and not worry quite as much about
performance, or, if you must tune for performance, know the platform
you&#8217;re writing for so you don&#8217;t need to write all that investigation
code.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I98' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I99>
</FONT><A NAME="_Toc463665181"></A><A NAME="_Toc481064878"></A><BR></P></DIV>
<A NAME="Heading532"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
A more sophisticated example</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">A more interesting
example</FONT><A NAME="fnB73" HREF="#fn73">[73]</A><FONT FACE="Georgia">
involves a multitable database that resides on a server. Here, the database is
meant to provide a repository for community activities and to allow people to
sign up for these events, so it is called the <I>Community Interests Database
</I>(CID). This example will only provide an overview of the database and its
implementation, and is not intended to be an in-depth tutorial on database
development. There are numerous books, seminars, and software packages that will
help you in the design and development of a database.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I99' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I100>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">In addition, this example presumes the
prior installation of an SQL database on a server (although it could also be run
on a local machine), and the interrogation and discovery of an appropriate JDBC
driver for that database. Several free SQL databases are available, and some are
even automatically installed with various flavors of Linux. You are responsible
for making the choice of database and locating the JDBC driver; the example here
is based on an SQL database system called &#8220;Cloudscape.&#8221;

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I100' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I101>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">To keep changes in the connection
information simple, the database driver, database URL, user name, and password
are placed in a separate class:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c15:jdbc:CIDConnect.java</font>
<font color=#009900>// Database connection information for</font>
<font color=#009900>// the community interests database (CID).</font>

<font color=#0000ff>public</font> <font color=#0000ff>class</font> CIDConnect {
  <font color=#009900>// All the information specific to CloudScape:</font>
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> String dbDriver = 
    <font color=#004488>"COM.cloudscape.core.JDBCDriver"</font>;
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> String dbURL =
    <font color=#004488>"jdbc:cloudscape:d:</font><font color=#004488>/docs</font><font color=#004488>/_work</font><font color=#004488>/JSapienDB"</font>;
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> String user = <font color=#004488>""</font>;
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> String password = <font color=#004488>""</font>;
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">In this example, there is no password
protection on the database so the user name and password are empty strings. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I101' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I102>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The database consists of a set of tables
that have a structure as shown here: </FONT><BR></P></DIV>
<DIV ALIGN="CENTER"><FONT FACE="Georgia"><IMG SRC="TIJ228.gif"></FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">&#8220;Members&#8221; contains community
member information, &#8220;Events&#8221; and &#8220;Locations&#8221; contain
information about the activities and where they take place, and
&#8220;Evtmems&#8221; connects events and members that would like to attend that
event. You can see that a data member in one table produces a key in another
table. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I102' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I103>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The following class contains the SQL
strings that will create these database tables (refer to an SQL guide for an
explanation of the SQL code):

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I103' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I104>
</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c15:jdbc:CIDSQL.java</font>
<font color=#009900>// SQL strings to create the tables for the CID.</font>

<font color=#0000ff>public</font> <font color=#0000ff>class</font> CIDSQL {
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> String[] sql = {
    <font color=#009900>// Create the MEMBERS table:</font>
    <font color=#004488>"drop table MEMBERS"</font>,
    <font color=#004488>"create table MEMBERS "</font> +
    <font color=#004488>"(MEM_ID INTEGER primary key, "</font> +
    <font color=#004488>"MEM_UNAME VARCHAR(12) not null unique, "</font>+
    <font color=#004488>"MEM_LNAME VARCHAR(40), "</font> +
    <font color=#004488>"MEM_FNAME VARCHAR(20), "</font> +
    <font color=#004488>"ADDRESS VARCHAR(40), "</font> +
    <font color=#004488>"CITY VARCHAR(20), "</font> +
    <font color=#004488>"STATE CHAR(4), "</font> +
    <font color=#004488>"ZIP CHAR(5), "</font> +
    <font color=#004488>"PHONE CHAR(12), "</font> +
    <font color=#004488>"EMAIL VARCHAR(30))"</font>,
    <font color=#004488>"create unique index "</font> +
    <font color=#004488>"LNAME_IDX on MEMBERS(MEM_LNAME)"</font>,
    <font color=#009900>// Create the EVENTS table</font>
    <font color=#004488>"drop table EVENTS"</font>,
    <font color=#004488>"create table EVENTS "</font> +
    <font color=#004488>"(EVT_ID INTEGER primary key, "</font> +
    <font color=#004488>"EVT_TITLE VARCHAR(30) not null, "</font> +
    <font color=#004488>"EVT_TYPE VARCHAR(20), "</font> +
    <font color=#004488>"LOC_ID INTEGER, "</font> +
    <font color=#004488>"PRICE DECIMAL, "</font> +
    <font color=#004488>"DATETIME TIMESTAMP)"</font>,
    <font color=#004488>"create unique index "</font> +
    <font color=#004488>"TITLE_IDX on EVENTS(EVT_TITLE)"</font>,
    <font color=#009900>// Create the EVTMEMS table</font>
    <font color=#004488>"drop table EVTMEMS"</font>,
    <font color=#004488>"create table EVTMEMS "</font> +
    <font color=#004488>"(MEM_ID INTEGER not null, "</font> +
    <font color=#004488>"EVT_ID INTEGER not null, "</font> +
    <font color=#004488>"MEM_ORD INTEGER)"</font>,
    <font color=#004488>"create unique index "</font> +
    <font color=#004488>"EVTMEM_IDX on EVTMEMS(MEM_ID, EVT_ID)"</font>,
    <font color=#009900>// Create the LOCATIONS table</font>
    <font color=#004488>"drop table LOCATIONS"</font>,
    <font color=#004488>"create table LOCATIONS "</font> +
    <font color=#004488>"(LOC_ID INTEGER primary key, "</font> +
    <font color=#004488>"LOC_NAME VARCHAR(30) not null, "</font> +
    <font color=#004488>"CONTACT VARCHAR(50), "</font> +
    <font color=#004488>"ADDRESS VARCHAR(40), "</font> +
    <font color=#004488>"CITY VARCHAR(20), "</font> +
    <font color=#004488>"STATE VARCHAR(4), "</font> +
    <font color=#004488>"ZIP VARCHAR(5), "</font> +
    <font color=#004488>"PHONE CHAR(12), "</font> +
    <font color=#004488>"DIRECTIONS VARCHAR(4096))"</font>,
    <font color=#004488>"create unique index "</font> +
    <font color=#004488>"NAME_IDX on LOCATIONS(LOC_NAME)"</font>,
  };
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The following program uses the
<B>CIDConnect </B> and <B>CIDSQL</B> information to load the JDBC driver, make a
connection to the database, and then create the table structure diagrammed
above. To connect with the database, you call the <B>static</B> method
<B>DriverManager.getConnection(&#160;)</B>, passing it the database URL, the
user name, and a password to get into the database. You get back a
<B>Connection</B> object that you can use to query and manipulate the database.
Once the connection is made you can simply push the SQL to the database, in this
case by marching through the <B>CIDSQL</B> array. However, the first time this
program is run, the &#8220;drop table&#8221; command will fail, causing an
exception, which is caught, reported, and then ignored. The reason for the
&#8220;drop table&#8221; command is to allow easy experimentation: you can
modify the SQL that defines the tables and then rerun the program, causing the
old tables to be replaced by the new.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I104' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I105>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">In this example, it makes sense to let
the exceptions be thrown out to the console:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c15:jdbc:CIDCreateTables.java</font>
<font color=#009900>// Creates database tables for the</font>
<font color=#009900>// community interests database.</font>
<font color=#0000ff>import</font> java.sql.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> CIDCreateTables {
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) 
  <font color=#0000ff>throws</font> SQLException, ClassNotFoundException,
  IllegalAccessException {
    <font color=#009900>// Load the driver (registers itself)</font>
    Class.forName(CIDConnect.dbDriver);
    Connection c = DriverManager.getConnection(
      CIDConnect.dbURL, CIDConnect.user, 
      CIDConnect.password);
    Statement s = c.createStatement();
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; CIDSQL.sql.length; i++) {
      System.out.println(CIDSQL.sql[i]);
      <font color=#0000ff>try</font> {
        s.executeUpdate(CIDSQL.sql[i]);
      } <font color=#0000ff>catch</font>(SQLException sqlEx) {
        System.err.println(
          <font color=#004488>"Probably a 'drop table' failed"</font>);
      }
    }
    s.close();
    c.close();
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Note that all changes in the database can
be controlled by changing <B>String</B>s in the <B>CIDSQL</B> table, without
modifying <B>CIDCreateTables</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I105' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I106>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>executeUpdate(&#160;)</B> will usually
return the number of rows that were affected by the SQL statement.
<B>executeUpdate(&#160;)</B> is more commonly used to execute
</FONT><TT><FONT FACE="Courier New">INSERT</FONT></TT><FONT FACE="Georgia">,
</FONT><TT><FONT FACE="Courier New">UPDATE</FONT></TT><FONT FACE="Georgia">, or
</FONT><TT><FONT FACE="Courier New">DELETE</FONT></TT><FONT FACE="Georgia">
statements that modify one or more rows. For statements such as
</FONT><TT><FONT FACE="Courier New">CREATE
TABLE</FONT></TT><FONT FACE="Georgia">, </FONT><TT><FONT FACE="Courier New">DROP
TABLE</FONT></TT><FONT FACE="Georgia">, and
</FONT><TT><FONT FACE="Courier New">CREATE
INDEX</FONT></TT><FONT FACE="Georgia">, <B>executeUpdate(&#160;)</B> always
returns zero. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I106' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I107>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">To test the database, it is loaded with
some sample data. This requires a series of
</FONT><TT><FONT FACE="Courier New">INSERT</FONT></TT><FONT FACE="Georgia">s
followed by a
</FONT><TT><FONT FACE="Courier New">SELECT</FONT></TT><FONT FACE="Georgia"> to
produce result set. To make additions and changes to the test data easy, the
test data is set up as a two-dimensional array of <B>Object</B>s, and the
<B>executeInsert(&#160;)</B> method can then use the information in one row of
the table to create the appropriate SQL command.</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c15:jdbc:LoadDB.java</font>
<font color=#009900>// Loads and tests the database.</font>
<font color=#0000ff>import</font> java.sql.*;

<font color=#0000ff>class</font> TestSet {
  Object[][] data = {
    { <font color=#004488>"MEMBERS"</font>, <font color=#0000ff>new</font> Integer(1),
      <font color=#004488>"dbartlett"</font>, <font color=#004488>"Bartlett"</font>, <font color=#004488>"David"</font>,
      <font color=#004488>"123 Mockingbird Lane"</font>,
      <font color=#004488>"Gettysburg"</font>, <font color=#004488>"PA"</font>, <font color=#004488>"19312"</font>,
      <font color=#004488>"123.456.7890"</font>,  <font color=#004488>"bart@you.net"</font> },
    { <font color=#004488>"MEMBERS"</font>, <font color=#0000ff>new</font> Integer(2),
      <font color=#004488>"beckel"</font>, <font color=#004488>"Eckel"</font>, <font color=#004488>"Bruce"</font>,
      <font color=#004488>"123 Over Rainbow Lane"</font>,
      <font color=#004488>"Crested Butte"</font>, <font color=#004488>"CO"</font>, <font color=#004488>"81224"</font>,
      <font color=#004488>"123.456.7890"</font>, <font color=#004488>"beckel@you.net"</font> },
    { <font color=#004488>"MEMBERS"</font>, <font color=#0000ff>new</font> Integer(3),
      <font color=#004488>"rcastaneda"</font>, <font color=#004488>"Castaneda"</font>, <font color=#004488>"Robert"</font>,
      <font color=#004488>"123 Downunder Lane"</font>,
      <font color=#004488>"Sydney"</font>, <font color=#004488>"NSW"</font>, <font color=#004488>"12345"</font>,
      <font color=#004488>"123.456.7890"</font>, <font color=#004488>"rcastaneda@you.net"</font> },
    { <font color=#004488>"LOCATIONS"</font>, <font color=#0000ff>new</font> Integer(1),
      <font color=#004488>"Center for Arts"</font>,
      <font color=#004488>"Betty Wright"</font>, <font color=#004488>"123 Elk Ave."</font>,
      <font color=#004488>"Crested Butte"</font>, <font color=#004488>"CO"</font>, <font color=#004488>"81224"</font>,
      <font color=#004488>"123.456.7890"</font>,
      <font color=#004488>"Go this way then that."</font> },
    { <font color=#004488>"LOCATIONS"</font>, <font color=#0000ff>new</font> Integer(2),
      <font color=#004488>"Witts End Conference Center"</font>,
      <font color=#004488>"John Wittig"</font>, <font color=#004488>"123 Music Drive"</font>,
      <font color=#004488>"Zoneville"</font>, <font color=#004488>"PA"</font>, <font color=#004488>"19123"</font>,
      <font color=#004488>"123.456.7890"</font>,
      <font color=#004488>"Go that way then this."</font> },
    { <font color=#004488>"EVENTS"</font>, <font color=#0000ff>new</font> Integer(1),
      <font color=#004488>"Project Management Myths"</font>,
      <font color=#004488>"Software Development"</font>,
      <font color=#0000ff>new</font> Integer(1), <font color=#0000ff>new</font> Float(2.50),
      <font color=#004488>"2000-07-17 19:30:00"</font> },
    { <font color=#004488>"EVENTS"</font>, <font color=#0000ff>new</font> Integer(2),
      <font color=#004488>"Life of the Crested Dog"</font>,
      <font color=#004488>"Archeology"</font>,
      <font color=#0000ff>new</font> Integer(2), <font color=#0000ff>new</font> Float(0.00),
      <font color=#004488>"2000-07-19 19:00:00"</font> },
    <font color=#009900>// Match some people with events</font>
    {  <font color=#004488>"EVTMEMS"</font>, 
      <font color=#0000ff>new</font> Integer(1),  <font color=#009900>// Dave is going to</font>
      <font color=#0000ff>new</font> Integer(1),  <font color=#009900>// the Software event.</font>
      <font color=#0000ff>new</font> Integer(0) },
    { <font color=#004488>"EVTMEMS"</font>, 
      <font color=#0000ff>new</font> Integer(2),  <font color=#009900>// Bruce is going to</font>
      <font color=#0000ff>new</font> Integer(2),  <font color=#009900>// the Archeology event.</font>
      <font color=#0000ff>new</font> Integer(0) },
    { <font color=#004488>"EVTMEMS"</font>, 
      <font color=#0000ff>new</font> Integer(3),  <font color=#009900>// Robert is going to</font>
      <font color=#0000ff>new</font> Integer(1),  <font color=#009900>// the Software event.</font>
      <font color=#0000ff>new</font> Integer(1) },
    { <font color=#004488>"EVTMEMS"</font>, 
      <font color=#0000ff>new</font> Integer(3), <font color=#009900>// ... and </font>
      <font color=#0000ff>new</font> Integer(2), <font color=#009900>// the Archeology event.</font>
      <font color=#0000ff>new</font> Integer(1) },
  };
  <font color=#009900>// Use the default data set:</font>
  <font color=#0000ff>public</font> TestSet() {}
  <font color=#009900>// Use a different data set:</font>
  <font color=#0000ff>public</font> TestSet(Object[][] dat) { data = dat; }
}

<font color=#0000ff>public</font> <font color=#0000ff>class</font> LoadDB {
  Statement statement;
  Connection connection;
  TestSet tset;
  <font color=#0000ff>public</font> LoadDB(TestSet t) <font color=#0000ff>throws</font> SQLException {
    tset = t;
    <font color=#0000ff>try</font> {
      <font color=#009900>// Load the driver (registers itself)</font>
      Class.forName(CIDConnect.dbDriver);
    } <font color=#0000ff>catch</font>(java.lang.ClassNotFoundException e) {
      e.printStackTrace(System.err);
    }
    connection = DriverManager.getConnection(
      CIDConnect.dbURL, CIDConnect.user, 
      CIDConnect.password);
    statement = connection.createStatement();
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> cleanup() <font color=#0000ff>throws</font> SQLException {
    statement.close();
    connection.close();
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> executeInsert(Object[] data) {
    String sql = <font color=#004488>"insert into "</font> 
      + data[0] + <font color=#004488>" values("</font>;
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 1; i &lt; data.length; i++) {
      <font color=#0000ff>if</font>(data[i] <font color=#0000ff>instanceof</font> String)
        sql += <font color=#004488>"'"</font> + data[i] + <font color=#004488>"'"</font>;
      <font color=#0000ff>else</font>
        sql += data[i];
      <font color=#0000ff>if</font>(i &lt; data.length - 1)
        sql += <font color=#004488>", "</font>;
    }
    sql += ')';
    System.out.println(sql);
    <font color=#0000ff>try</font> {
      statement.executeUpdate(sql);
    } <font color=#0000ff>catch</font>(SQLException sqlEx) {
      System.err.println(<font color=#004488>"Insert failed."</font>);
      <font color=#0000ff>while</font> (sqlEx != <font color=#0000ff>null</font>) {
        System.err.println(sqlEx.toString());
        sqlEx = sqlEx.getNextException();
      }
    } 
  }
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> load() {
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i&lt; tset.data.length; i++)
      executeInsert(tset.data[i]);
  }
  <font color=#009900>// Throw exceptions out to console:</font>
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) 
  <font color=#0000ff>throws</font> SQLException {
    LoadDB db = <font color=#0000ff>new</font> LoadDB(<font color=#0000ff>new</font> TestSet());
    db.load();
    <font color=#0000ff>try</font> {
      <font color=#009900>// Get a ResultSet from the loaded database:</font>
      ResultSet rs = db.statement.executeQuery(
        <font color=#004488>"select "</font> +
        <font color=#004488>"e.EVT_TITLE, m.MEM_LNAME, m.MEM_FNAME "</font>+
        <font color=#004488>"from EVENTS e, MEMBERS m, EVTMEMS em "</font> +
        <font color=#004488>"where em.EVT_ID = 2 "</font> +
        <font color=#004488>"and e.EVT_ID = em.EVT_ID "</font> +
        <font color=#004488>"and m.MEM_ID = em.MEM_ID"</font>);
      <font color=#0000ff>while</font> (rs.next())
        System.out.println(
          rs.getString(1) + <font color=#004488>"  "</font> + 
          rs.getString(2) + <font color=#004488>", "</font> +
          rs.getString(3));
    } <font color=#0000ff>finally</font> {
      db.cleanup();
    }
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The <B>TestSet</B> class contains a
default set of data that is produced if you use the default constructor;
however, you can also create a <B>TestSet</B> object using an alternate data set
with the second constructor. The set of data is held in a two-dimensional array
of <B>Object</B> because it can be any type, including <B>String</B> or
numerical types. The <B>executeInsert(&#160;)</B> method uses RTTI to
distinguish between <B>String</B> data (which must be quoted) and
non-<B>String</B> data as it builds the SQL command from the data. After
printing this command to the console, <B>executeUpdate(&#160;)</B> is used to
send it to the database. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I107' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I108>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The constructor for <B>LoadDB</B> makes
the connection, and <B>load(&#160;)</B> steps through the data and calls
<B>executeInsert(&#160;)</B> for each record. <B>cleanup(&#160;)</B>  closes the
statement and the connection; to guarantee that this is called, it is placed
inside a finally clause. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I108' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I109>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Once the database is loaded, an
<B>executeQuery(&#160;)</B> statement produces a sample result set. Since the
query combines several tables, it is an example of a join.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I109' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I110>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">There is more JDBC information available
in the electronic documents that come as part of the Java distribution from Sun.
In addition, you can find more in the book <I>JDBC Database Access with Java
</I>(Hamilton, Cattel, and Fisher, Addison-Wesley, 1997). Other JDBC books
appear regularly.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I110' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I111>
</FONT><A NAME="_Toc481064879"></A><BR></P></DIV>
<A NAME="Heading533"></A><FONT FACE = "Verdana"><H2 ALIGN="LEFT">
Servlets<A NAME="_Toc463665192"></A><BR><A NAME="Index2148"></A></H2></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Client access from the Internet or
corporate intranets is a sure way to allow many users to access data and
resources
easily</FONT><A NAME="fnB74" HREF="#fn74">[74]</A><FONT FACE="Georgia">. This
type of access is based on clients using the World Wide Web standards of
Hypertext Markup Language (HTML) and Hypertext Transfer Protocol (HTTP). The
Servlet API set abstracts a common solution framework for responding to HTTP
requests.  
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I111' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I112>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Traditionally, the way to handle a
problem such as allowing an Internet client to update a database is to create an
<A NAME="Index2149"></A><A NAME="Index2150"></A>HTML page with text fields and a
&#8220;submit&#8221; button. The user types the appropriate information into the
text fields and presses the &#8220;submit&#8221; button. The data is submitted
along with a URL that tells the server what to do with the data by specifying
the location of a
<A NAME="Index2151"></A><A NAME="Index2152"></A><A NAME="Index2153"></A>Common
Gateway Interface (CGI) program that the server runs, providing the program with
the data as it is invoked. The CGI program is typically written in Perl, Python,
C, C++, or any language that can read from standard input and write to standard
output. That&#8217;s all that is provided by the Web server: the CGI program is
invoked, and standard streams (or, optionally for input, an environment
variable) are used for input and output. The CGI program is responsible for
everything else. First it looks at the data and decides whether the format is
correct. If not, the CGI program must produce HTML to describe the problem; this
page is handed to the Web server (via standard output from the CGI program),
which sends it back to the user. The user must usually back up a page and try
again. If the data is correct, the CGI program processes the data in an
appropriate way, perhaps adding it to a database. It must then produce an
appropriate HTML page for the Web server to return to the user.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I112' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I113>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">It would be ideal to go to a completely
Java-based solution to this problem&#8212;an applet on the client side to
validate and send the data, and a servlet on the server side to receive and
process the data. Unfortunately, although applets are a proven technology with
plenty of support, they have been problematic to use on the Web because you
cannot rely on a particular version of Java being available on a client&#8217;s
Web browser; in fact, you can&#8217;t rely on a Web browser supporting Java at
all! In an intranet, you can require that certain support be available, which
allows a lot more flexibility in what you can do, but on the Web the safest
approach is to handle all the processing on the server side and deliver plain
HTML to the client. That way, no client will be denied the use of your site
because they do not have the proper software installed.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I113' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I114>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Because servlets provide an excellent
solution for server-side programming support, they are one of the most popular
reasons for moving to Java. Not only do they provide a framework that replaces
CGI programming (and eliminates a number of thorny CGI problems), but all your
code has the platform portability gained from using Java, and you have access to
all the Java APIs (except, of course, the ones that produce GUIs, like Swing).

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I114' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I115>
</FONT><A NAME="_Toc481064880"></A><BR></P></DIV>
<A NAME="Heading534"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
The basic servlet</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The architecture of the servlet API is
that of a classic service provider with a <B>service(&#160;)</B> method through
which all client requests will be sent by the servlet container software, and
life cycle methods <B>init(&#160;) </B>and <B>destroy(&#160;)</B>, which are
called only when the servlet is loaded and unloaded (this happens rarely).

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I115' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I116>
</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#0000ff>public</font> <font color=#0000ff>interface</font> Servlet {
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> init(ServletConfig config)
    <font color=#0000ff>throws</font> ServletException;
  <font color=#0000ff>public</font> ServletConfig getServletConfig();
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> service(ServletRequest req,
    ServletResponse res) 
    <font color=#0000ff>throws</font> ServletException, IOException;
  <font color=#0000ff>public</font> String getServletInfo();
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> destroy();
}</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>getServletConfig(&#160;)</B>&#8217;s
sole purpose is to return a <B>ServletConfig</B> object that contains
initialization and startup parameters for this servlet.
<B>getServletInfo(&#160;)</B> returns a string containing information about the
servlet, such as author, version, and copyright.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I116' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I117>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The <B>GenericServlet</B> class is a
shell implementation of this interface and is typically not used. The
<B>HttpServlet</B> class is an extension of <B>GenericServlet</B> and is
designed specifically to handle the HTTP protocol&#8212;<B> HttpServlet</B> is
the one that you&#8217;ll use most of the time.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I117' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I118>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The most convenient attribute of the
servlet API is the auxiliary objects that come along with the HttpServlet class
to support it. If you look at the <B>service(&#160;) </B>method in the
<B>Servlet</B> interface, you&#8217;ll see it has two parameters:
<B>ServletRequest</B> and <B>ServletResponse</B>. With the <B>HttpServlet</B>
class these two object are extended for HTTP: <B>HttpServletRequest</B> and
<B>HttpServletResponse</B>. Here&#8217;s a simple example that shows the use of
<B>HttpServletResponse</B>:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c15:servlets:ServletsRule.java</font>
<font color=#0000ff>import</font> javax.servlet.*;
<font color=#0000ff>import</font> javax.servlet.http.*;
<font color=#0000ff>import</font> java.io.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> ServletsRule <font color=#0000ff>extends</font> HttpServlet {
  <font color=#0000ff>int</font> i = 0; <font color=#009900>// Servlet "persistence"</font>
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> service(HttpServletRequest req, 
  HttpServletResponse res) <font color=#0000ff>throws</font> IOException {
    res.setContentType(<font color=#004488>"text</font><font color=#004488>/html"</font>);
    PrintWriter out = res.getWriter();
    out.print(<font color=#004488>"&lt;HEAD&gt;&lt;TITLE&gt;"</font>);
    out.print(<font color=#004488>"A server-side strategy"</font>);
    out.print(<font color=#004488>"&lt;</font><font color=#004488>/TITLE&gt;&lt;</font><font color=#004488>/HEAD&gt;&lt;BODY&gt;"</font>);
    out.print(<font color=#004488>"&lt;h1&gt;Servlets Rule! "</font> + i++);
    out.print(<font color=#004488>"&lt;</font><font color=#004488>/h1&gt;&lt;</font><font color=#004488>/BODY&gt;"</font>);  
    out.close();    
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>ServletsRule</B> is about as simple as
a servlet can get. The servlet is initialized only once by calling its
<B>init(&#160;) </B>method, on loading the servlet after the servlet container
is first booted up. When a client makes a request to a URL that happens to
represent a servlet, the servlet container intercepts this request and makes a
call to the <B>service(&#160;)</B> method, after setting up the
<B>HttpServletRequest</B> and <B>HttpServletResponse</B> objects. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I118' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I119>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The main responsibility of the
<B>service(&#160;)</B> method is to interact with the HTTP request that the
client has sent, and to build an HTTP response based on the attributes contained
within the request. <B>ServletsRule</B> only manipulates the response object
without looking at what the client may have sent. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I119' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I120>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">After setting the content type of the
response (which must always be done before the <B>Writer </B>or <B>OutputStream
</B>is procured), the <B>getWriter(&#160;)</B> method of the response object
produces a <B>PrintWriter</B> object, which is used for writing character-based
response data (alternatively, <B>getOutputStream(&#160;)</B> produces an
<B>OutputStream</B>, used for binary response, which is only utilized in more
specialized solutions). 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I120' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I121>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The rest of the program simply sends HTML
back to the client (it&#8217;s assumed you understand HTML, so that part is not
explained) as a sequence of <B>String</B>s. However, notice the inclusion of the
&#8220;hit counter&#8221; represented by the variable <B>i</B>. This is
automatically converted to a <B>String</B> in the <B>print(&#160;)</B>
statement. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I121' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I122>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">When you run the program, you&#8217;ll
notice that the value of <B>i</B> is retained between requests to the servlet.
This is an essential property of servlets: since only one servlet of a
particular class is loaded into the container, and it is never unloaded (unless
the servlet container is terminated, which is something that only normally
happens if you reboot the server computer), any fields of that servlet class
effectively become persistent objects! This means that you can effortlessly
maintain values between servlet requests, whereas with CGI you had to write
values to disk in order to preserve them, which required a fair amount of
fooling around to get it right, and resulted in a non-cross-platform solution.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I122' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I123>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Of course, sometimes the Web server, and
thus the servlet container, must be rebooted as part of maintenance or during a
power failure. To avoid losing any persistent information, the servlet&#8217;s
<B>init(&#160;)</B> and <B>destroy(&#160;)</B> methods are automatically called
whenever the servlet is loaded or unloaded, giving you the opportunity to save
data during shutdown, and restore it after rebooting. The servlet container
calls the <B>destroy(&#160;)</B> method as it is terminating itself, so you
always get an opportunity to save valuable data as long as the server machine is
configured in an intelligent way.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I123' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I124>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">There&#8217;s one other issue when using
<B>HttpServlet</B>. This class provides <B>doGet(&#160;)</B> and
<B>doPost(&#160;)</B> methods that differentiate between a CGI &#8220;GET&#8221;
submission from the client, and a CGI &#8220;POST.&#8221; GET and POST vary only
in the details of the way that they submit the data, which is something that I
personally would prefer to ignore. However, most published information that
I&#8217;ve seen seems to favor the creation of separate <B>doGet(&#160;)</B> and
<B>doPost(&#160;)</B> methods instead of a single generic <B>service(&#160;)</B>
method, which handles both cases. This favoritism seems quite common, but
I&#8217;ve never seen it explained in a fashion that leads me to believe that
it&#8217;s anything more than inertia from CGI programmers who are used to
paying attention to whether a GET or POST is being used. So in the spirit of
&#8220;doing the simplest thing that could possibly
work,&#8221;</FONT><A NAME="fnB75" HREF="#fn75">[75]</A><FONT FACE="Georgia"> I
will just use the <B>service(&#160;)</B> method in these examples, and let it
care about GETs vs. POSTs. However, keep in mind that I might have missed
something and so there may in fact be a good reason to use <B>doGet(&#160;)</B>
and <B>doPost(&#160;)</B> instead.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I124' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I125>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Whenever a form is submitted to a
servlet, the <B>HttpServletRequest</B> comes preloaded with all the form data,
stored as key-value pairs. If you know the names of the fields, you can just use
them directly with the <B>getParameter(&#160;)</B> method to look up the values.
You can also get an <B>Enumeration</B> (the old form of the <B>Iterator</B>) to
the field names, as is shown in the following example. This example also
demonstrates how a single servlet can be used to produce the page that contains
the form, and to respond to the page (a better solution will be seen later, with
JSPs). If the <B>Enumeration</B> is empty, there are no fields; this means no
form was submitted. In this case, the form is produced, and the submit button
will re-call the same servlet. If fields do exist, however, they are
displayed.</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c15:servlets:EchoForm.java</font>
<font color=#009900>// Dumps the name-value pairs of any HTML form</font>
<font color=#0000ff>import</font> javax.servlet.*;
<font color=#0000ff>import</font> javax.servlet.http.*;
<font color=#0000ff>import</font> java.io.*;
<font color=#0000ff>import</font> java.util.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> EchoForm <font color=#0000ff>extends</font> HttpServlet {
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> service(HttpServletRequest req, 
    HttpServletResponse res) <font color=#0000ff>throws</font> IOException {
    res.setContentType(<font color=#004488>"text</font><font color=#004488>/html"</font>);
    PrintWriter out = res.getWriter();
    Enumeration flds = req.getParameterNames();
    <font color=#0000ff>if</font>(!flds.hasMoreElements()) {
      <font color=#009900>// No form submitted -- create one:</font>
      out.print(<font color=#004488>"&lt;html&gt;"</font>);
      out.print(<font color=#004488>"&lt;form method=\"</font>POST\<font color=#004488>""</font> + 
        <font color=#004488>" action=\"</font>EchoForm\<font color=#004488>"&gt;"</font>);
      <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; 10; i++)
        out.print(<font color=#004488>"&lt;b&gt;Field"</font> + i + <font color=#004488>"&lt;</font><font color=#004488>/b&gt; "</font> +
          <font color=#004488>"&lt;input type=\"</font>text\<font color=#004488>""</font>+
          <font color=#004488>" size=\"</font>20\<font color=#004488>" name=\"</font>Field" + i + 
          <font color=#004488>"\"</font> value=\<font color=#004488>"Value"</font> + i + <font color=#004488>"\"</font>&gt;&lt;br&gt;");
      out.print(<font color=#004488>"&lt;INPUT TYPE=submit name=submit"</font>+
        <font color=#004488>" Value=\"</font>Submit\<font color=#004488>"&gt;&lt;</font><font color=#004488>/form&gt;&lt;</font><font color=#004488>/html&gt;"</font>);
    } <font color=#0000ff>else</font> {
      out.print(<font color=#004488>"&lt;h1&gt;Your form contained:&lt;</font><font color=#004488>/h1&gt;"</font>);
      <font color=#0000ff>while</font>(flds.hasMoreElements()) {
        String field= (String)flds.nextElement();
        String value= req.getParameter(field);
        out.print(field + <font color=#004488>" = "</font> + value+ <font color=#004488>"&lt;br&gt;"</font>);
      }
    }
    out.close();    
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">One drawback you&#8217;ll notice here is
that Java does not seem to be designed with string processing in mind&#8212;the
formatting of the return page is painful because of line breaks, escaping quote
marks, and the &#8220;+&#8221; signs necessary to build <B>String</B> objects.
With a larger HTML page it becomes unreasonable to code it directly into Java.
One solution is to keep the page as a separate text file, then open it and hand
it to the Web server. If you have to perform any kind of substitution to the
contents of the page, it&#8217;s not much better since Java has treated string
processing so poorly. In these cases you&#8217;re probably better off using a
more appropriate solution (Python would be my choice; there&#8217;s a version
that embeds itself in Java called JPython) to generate the response page.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I125' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I126>
</FONT><A NAME="_Toc481064881"></A><BR></P></DIV>
<A NAME="Heading535"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Servlets and
multithreading<BR><A NAME="Index2154"></A><A NAME="Index2155"></A></H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The servlet container has a pool of
threads that it will dispatch to handle client requests. It is quite likely that
two clients arriving at the same time could be processing through your
<B>service(&#160;)</B> at the same time. Therefore the <B>service(&#160;)</B>
method must written in a thread-safe manner. Any access to common resources
(files, databases) will need to be guarded by using the <B>synchronized</B>
keyword. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I126' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I127>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The following simple example puts a
<B>synchronized </B>clause around the thread&#8217;s <B>sleep(&#160;)</B>
method. This will block all other threads until the allotted time (five seconds)
is all used up. When testing this you should start several browser instances and
hit this servlet as quickly as possible in each one&#8212;you&#8217;ll see that
each one has to wait until its turn comes up. </FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c15:servlets:ThreadServlet.java</font>
<font color=#0000ff>import</font> javax.servlet.*;
<font color=#0000ff>import</font> javax.servlet.http.*;
<font color=#0000ff>import</font> java.io.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> ThreadServlet <font color=#0000ff>extends</font> HttpServlet {
  <font color=#0000ff>int</font> i;
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> service(HttpServletRequest req, 
    HttpServletResponse res) <font color=#0000ff>throws</font> IOException {
    res.setContentType(<font color=#004488>"text</font><font color=#004488>/html"</font>);
    PrintWriter out = res.getWriter();
    <font color=#0000ff>synchronized</font>(<font color=#0000ff>this</font>) {
      <font color=#0000ff>try</font> {
        Thread.currentThread().sleep(5000);
      } <font color=#0000ff>catch</font>(InterruptedException e) {
        System.err.println(<font color=#004488>"Interrupted"</font>);
      }
    }
    out.print(<font color=#004488>"&lt;h1&gt;Finished "</font> + i++ + <font color=#004488>"&lt;</font><font color=#004488>/h1&gt;"</font>);
    out.close();    
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">It is also possible to synchronize the
entire servlet by putting the <B>synchronized</B> keyword in front of the
<B>service(&#160;)</B> method. In fact, the only reason to use the
<B>synchronized</B> clause instead is if the critical section is in an execution
path that might not get executed. In that case, you might as well avoid the
overhead of synchronizing every time by using a <B>synchronized</B> clause.
Otherwise, all the threads will have to wait anyway so you might as well
<B>synchronize</B> the whole method.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I127' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I128>
</FONT><A NAME="_Toc481064882"></A><BR></P></DIV>
<A NAME="Heading536"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Handling sessions with
servlets<BR><A NAME="Index2156"></A><A NAME="Index2157"></A></H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">HTTP is a &#8220;sessionless&#8221;
protocol, so you cannot tell from one server hit to another if you&#8217;ve got
the same person repeatedly querying your site, or if it is a completely
different person.  A great deal of effort has gone into mechanisms that will
allow Web developers to track sessions. Companies could not do e-commerce
without keeping track of a client and the items they have put into their
shopping cart, for example.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I128' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I129>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">There are several methods of session
tracking, but the most common method is with persistent &#8220;cookies,&#8221;
which are an integral part of the Internet standards. The HTTP Working Group of
the Internet Engineering Task Force has written <A NAME="Index2158"></A>cookies
into the official standard in RFC 2109 (<I>ds.internic.net/rfc/rfc2109.txt</I>
or check <I>www.cookiecentral.com</I>).

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I129' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I130>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">A cookie is nothing more than a small
piece of information sent by a Web server to a browser. The browser stores the
cookie on the local disk, and whenever another call is made to the URL that the
cookie is associated with, the cookie is quietly sent along with the call, thus
providing the desired information back to that server (generally, providing some
way that the server can be told that it&#8217;s you calling). Clients can,
however, turn off the browser&#8217;s ability to accept cookies. If your site
must track a client who has turned off cookies, then another method of session
tracking (URL rewriting or hidden form fields) must be incorporated by hand,
since the session tracking capabilities built into the servlet API are designed
around cookies. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I130' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I131>
</FONT><BR></P></DIV>
<A NAME="Heading537"></A><FONT FACE = "Verdana"><H4 ALIGN="LEFT">
The Cookie class</H4></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The servlet API (version 2.0 and up)
provides the <B>Cookie</B> class. This class incorporates all the HTTP header
details and allows the setting of various cookie attributes. Using the cookie is
simply a matter of adding it to the response object. The constructor takes a
cookie name as the first argument and a value as the second. Cookies are added
to the response object before you send any content.</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>Cookie oreo = <font color=#0000ff>new</font> Cookie(<font color=#004488>"TIJava"</font>, <font color=#004488>"2000"</font>);
res.addCookie(oreocookie);</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Cookies are recovered by calling the
<B>getCookies(&#160;)</B> method of the <B>HttpServletRequest</B> object, which
returns an array of cookie objects.</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>Cookie[] cookies = req.getCookies();</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You can then call <B>getValue(&#160;)</B>
for each cookie, to produce a <B>String</B> containing the cookie contents. In
the above example, <B>getValue("TIJava") </B>will produce a <B>String</B>
containing &#8220;2000.&#8221;

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I131' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I132>
</FONT><BR></P></DIV>
<A NAME="Heading538"></A><FONT FACE = "Verdana"><H4 ALIGN="LEFT">
The Session class</H4></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">A session is one or more page requests by
a client to a Web site during a defined period of time. If you buy groceries
online, for example, you want a session to be confined to the period from when
you first add an item to &#8220;my shopping cart&#8221; to the point where you
check out. Each item you add to the shopping cart will result in a new HTTP
connection, which has no knowledge of previous connections or items in the
shopping cart. To compensate for this lack of information, the mechanics
supplied by the cookie specification allow your servlet to perform session
tracking.  
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I132' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I133>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">A servlet <B>Session</B> object lives on
the server side of the communication channel; its goal is to capture useful data
about this client as the client moves through and interacts with your Web site.
This data may be pertinent for the present session, such as items in the
shopping cart, or it may be data such as authentication information that was
entered when the client first entered your Web site, and which should not have
to be reentered during a particular set of transactions.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I133' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I134>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The <B>Session</B> class of the servlet
API uses the <B>Cookie</B> class to do its work. However, all the <B>Session</B>
object needs is some kind of unique identifier stored on the client and passed
to the server. Web sites may also use the other types of session tracking but
these mechanisms will be more difficult to implement as they are not
encapsulated into the servlet API (that is, you must write them by hand to deal
with the situation when the client has disabled cookies).

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I134' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I135>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Here&#8217;s an example that  implements
session tracking with the servlet API:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c15:servlets:SessionPeek.java</font>
<font color=#009900>// Using the HttpSession class.</font>
<font color=#0000ff>import</font> java.io.*;
<font color=#0000ff>import</font> java.util.*;
<font color=#0000ff>import</font> javax.servlet.*;
<font color=#0000ff>import</font> javax.servlet.http.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> SessionPeek <font color=#0000ff>extends</font> HttpServlet { 
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> service(HttpServletRequest req, 
  HttpServletResponse res)
  <font color=#0000ff>throws</font> ServletException, IOException {
    <font color=#009900>// Retrieve Session Object before any</font>
    <font color=#009900>// output is sent to the client.</font>
    HttpSession session = req.getSession();
    res.setContentType(<font color=#004488>"text</font><font color=#004488>/html"</font>);
    PrintWriter out = res.getWriter();
    out.println(<font color=#004488>"&lt;HEAD&gt;&lt;TITLE&gt; SessionPeek "</font>);
    out.println(<font color=#004488>" &lt;</font><font color=#004488>/TITLE&gt;&lt;</font><font color=#004488>/HEAD&gt;&lt;BODY&gt;"</font>);
    out.println(<font color=#004488>"&lt;h1&gt; SessionPeek &lt;</font><font color=#004488>/h1&gt;"</font>);
    <font color=#009900>// A simple hit counter for this session.</font>
    Integer ival = (Integer) 
      session.getAttribute(<font color=#004488>"sesspeek.cntr"</font>);
    <font color=#0000ff>if</font>(ival==<font color=#0000ff>null</font>) 
      ival = <font color=#0000ff>new</font> Integer(1);
    <font color=#0000ff>else</font> 
      ival = <font color=#0000ff>new</font> Integer(ival.intValue() + 1);
    session.setAttribute(<font color=#004488>"sesspeek.cntr"</font>, ival);
    out.println(<font color=#004488>"You have hit this page &lt;b&gt;"</font>
      + ival + <font color=#004488>"&lt;</font><font color=#004488>/b&gt; times.&lt;p&gt;"</font>);
    out.println(<font color=#004488>"&lt;h2&gt;"</font>);
    out.println(<font color=#004488>"Saved Session Data &lt;</font><font color=#004488>/h2&gt;"</font>);
    <font color=#009900>// Loop through all data in the session:</font>
    Enumeration sesNames = 
      session.getAttributeNames();
    <font color=#0000ff>while</font>(sesNames.hasMoreElements()) {
      String name = 
        sesNames.nextElement().toString();
      Object value = session.getAttribute(name);
      out.println(name + <font color=#004488>" = "</font> + value + <font color=#004488>"&lt;br&gt;"</font>);
    }
    out.println(<font color=#004488>"&lt;h3&gt; Session Statistics &lt;</font><font color=#004488>/h3&gt;"</font>);
    out.println(<font color=#004488>"Session ID: "</font> 
      + session.getId() + <font color=#004488>"&lt;br&gt;"</font>);
    out.println(<font color=#004488>"New Session: "</font> + session.isNew()
      + <font color=#004488>"&lt;br&gt;"</font>);
    out.println(<font color=#004488>"Creation Time: "</font>
      + session.getCreationTime());
    out.println(<font color=#004488>"&lt;I&gt;("</font> + 
      <font color=#0000ff>new</font> Date(session.getCreationTime())
      + <font color=#004488>")&lt;</font><font color=#004488>/I&gt;&lt;br&gt;"</font>);
    out.println(<font color=#004488>"Last Accessed Time: "</font> +
      session.getLastAccessedTime());
    out.println(<font color=#004488>"&lt;I&gt;("</font> +
      <font color=#0000ff>new</font> Date(session.getLastAccessedTime())
      + <font color=#004488>")&lt;</font><font color=#004488>/I&gt;&lt;br&gt;"</font>);
    out.println(<font color=#004488>"Session Inactive Interval: "</font>
      + session.getMaxInactiveInterval());
    out.println(<font color=#004488>"Session ID in Request: "</font>
      + req.getRequestedSessionId() + <font color=#004488>"&lt;br&gt;"</font>);
    out.println(<font color=#004488>"Is session id from Cookie: "</font>
      + req.isRequestedSessionIdFromCookie()
      + <font color=#004488>"&lt;br&gt;"</font>);
    out.println(<font color=#004488>"Is session id from URL: "</font>
      + req.isRequestedSessionIdFromURL()
      + <font color=#004488>"&lt;br&gt;"</font>);
    out.println(<font color=#004488>"Is session id valid: "</font>
      + req.isRequestedSessionIdValid()
      + <font color=#004488>"&lt;br&gt;"</font>);
    out.println(<font color=#004488>"&lt;</font><font color=#004488>/BODY&gt;"</font>);
    out.close();
  }
  <font color=#0000ff>public</font> String getServletInfo() {
    <font color=#0000ff>return</font> <font color=#004488>"A session tracking servlet"</font>;
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Inside the <B>service(&#160;)</B> method,
<B>getSession(&#160;)</B> is called for the request object, which returns the
<B>Session</B> object associated with this request. The <B>Session</B> object
does not travel across the network, but instead it lives on the server and is
associated with a client and its requests.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I135' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I136>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>getSession(&#160;)</B> comes in two
versions: no parameter, as used here, and <B>getSession(boolean)</B>.
<B>getSession(true)</B> is equivalent to <B>getSession(&#160;)</B>. The only
reason for the <B>boolean</B> is to state whether you want the session object
created if it is not found. <B>getSession(true)</B> is the most likely call,
hence <B>getSession(&#160;)</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I136' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I137>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The <B>Session</B> object, if it is not
new, will give us details about the client from previous visits. If the
<B>Session</B> object is new then the program will start to gather information
about this client&#8217;s activities on this visit. Capturing this client
information is done through the <B>setAttribute(&#160;)</B> and
<B>getAttribute(&#160;)</B> methods of the session object.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I137' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I138>
</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>java.lang.Object getAttribute(java.lang.String)
<font color=#0000ff>void</font> setAttribute(java.lang.String name,
                  java.lang.Object value)</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The <B>Session</B> object uses a simple
name-value pairing for loading information. The name is a <B>String</B>, and the
value can be any object derived from <B>java.lang.Object</B>. <B>SessionPeek</B>
keeps track of how many times the client has been back during this session. This
is done with an <B>Integer</B> object named <B>sesspeek.cntr</B>. If the name is
not found an <B>Integer</B> is created with value of one, otherwise an
<B>Integer</B> is created with the incremented value of the previously held
<B>Integer</B>. The new <B>Integer</B> is placed into the <B>Session</B> object.
If you use same key in a <B>setAttribute(&#160;)</B> call, then the new object
overwrites the old one. The incremented counter is used to display the number of
times that the client has visited during this session. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I138' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I139>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>getAttributeNames(&#160;) </B>is
related to <B>getAttribute(&#160;)</B> and <B>setAttribute(&#160;)</B>; it
returns an enumeration of the names of the objects that are bound to the
<B>Session</B> object. A <B>while</B> loop in <B>SessionPeek</B> shows this
method in action. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I139' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I140>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You may wonder how long a <B>Session</B>
object hangs around. The answer depends on the servlet container you are using;
they usually default to 30 minutes (1800 seconds), which is what you should see
from the <B>ServletPeek</B> call to <B>getMaxInactiveInterval(&#160;)</B>. Tests
seem to produce mixed results between servlet containers. Sometimes the
<B>Session</B> object can hang around overnight, but I have never seen a case
where the <B>Session</B> object disappears in less than the time specified by
the inactive interval. You can try this by setting the inactive interval with
<B>setMaxInactiveInterval(&#160;)</B> to 5 seconds and see if your
<B>Session</B> object hangs around or if it is cleaned up at the appropriate
time. This may be an attribute you will want to investigate while choosing a
servlet container.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I140' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I141>
</FONT><A NAME="_Toc481064883"></A><BR></P></DIV>
<A NAME="Heading539"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Running the servlet examples</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">If you are not already working with an
application server that handles Sun&#8217;s servlet and JSP technologies for
you, you may download the <A NAME="Index2159"></A><A NAME="Index2160"></A>Tomcat
implementation of Java servlets and JSPs, which is a free, open-source
implementation of servlets, and is the official reference implementation
sanctioned by Sun. It can be found at <I>jakarta.apache.org</I>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I141' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I142>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Follow the instructions for installing
the Tomcat implementation, then edit the <B>server.xml </B>file to point to the
location in your directory tree where your servlets will be placed. Once you
start up the Tomcat program you can test your servlet programs.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I142' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I143>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This has only been a brief introduction
to servlets; there are entire books on the subject. However, this introduction
should give you enough ideas to get you started. In addition, many of the ideas
in the next section are backward compatible with servlets.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I143' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I144>
</FONT><A NAME="_Toc463665186"></A><A NAME="_Toc481064884"></A><BR></P></DIV>
<A NAME="Heading540"></A><FONT FACE = "Verdana"><H2 ALIGN="LEFT">
Java Server Pages<BR><A NAME="Index2161"></A><A NAME="Index2162"></A></H2></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Java<STRIKE> </STRIKE>Server Pages (JSP)
is a standard Java extension that is defined on top of the servlet Extensions.
The goal of JSPs is the simplified creation and management of dynamic Web pages.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I144' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I145>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The previously mentioned, freely
available Tomcat reference implementation from <I>jakarta.apache.org</I>
automatically supports JSPs.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I145' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I146>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">JSPs allow you to combine the HTML of a
Web page with pieces of Java code in the same document. The Java code is
surrounded by special tags that tell the JSP container that it should use the
code to generate a servlet, or part of one. The benefit of JSPs is that you can
maintain a single document that represents both the page and the Java code that
enables it. The downside is that the maintainer of the JSP page must be skilled
in both HTML and Java (however, GUI builder environments for JSPs should be
forthcoming). 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I146' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I147>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The first time a JSP is loaded by the JSP
container (which is typically associated with, or even part of, a Web server),
the servlet code necessary to fulfill the JSP tags is automatically generated,
compiled, and loaded into the servlet container. The static portions of the HTML
page are produced by sending static <B>String </B>objects to
<B>write(&#160;)</B>. The dynamic portions are included directly into the
servlet. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I147' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I148>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">From then on, as long as the JSP source
for the page is not modified, it behaves as if it were a static HTML page with
associated servlets (all the HTML code is actually generated by the servlet,
however). If you modify the source code for the JSP, it is automatically
recompiled and reloaded the next time that page is requested. Of course, because
of all this dynamism you&#8217;ll see a slow response for the first-time access
to a JSP. However, since a JSP is usually used much more than it is changed, you
will normally not be affected by this delay.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I148' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I149>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The structure of a JSP page is a cross
between a servlet and an HTML page. The JSP tags begin and end with angle
brackets, just like HTML tags, but the tags also include percent signs, so all
JSP tags are denoted by</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>&lt;% JSP code here %&gt;</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The leading percent sign may be followed
by other characters that determine the precise type of JSP code in the tag.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I149' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I150>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Here&#8217;s an extremely simple JSP
example that uses a standard Java library call to get the current time in
milliseconds, which is then divided by 1000 to produce the time in seconds.
Since a <I>JSP expression</I> (the <B>&lt;%=</B> ) is used, the result of the
calculation is coerced into a <B>String</B> and placed on the generated Web
page:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//:! c15:jsp:ShowSeconds.jsp</font>
&lt;html&gt;&lt;body&gt;
&lt;H1&gt;The time in seconds is: 
&lt;%= System.currentTimeMillis()/1000 %&gt;&lt;/H1&gt;
&lt;/body&gt;&lt;/html&gt;
<font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">In the JSP examples in this book, the
first and last lines are not included in the actual code file that is extracted
and placed in the book&#8217;s source-code tree.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I150' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I151>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">When the client creates a request for the
JSP page, the Web server must have been configured to relay the request to the
JSP container, which then invokes the page. As mentioned above, the first time
the page is invoked, the components specified by the page are generated and
compiled by the JSP container as one or more servlets. In the above example, the
servlet will contain code to configure the <B>HttpServletResponse</B> object,
produce a <B>PrintWriter</B> object (which is always named <B>out</B>), and then
turn the time calculation into a <B>String</B> which is sent to <B>out</B>. As
you can see, all this is accomplished with a very succinct statement, but the
average HTML programmer/Web designer will not have the skills to write such
code.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I151' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I152>
</FONT><A NAME="_Toc481064885"></A><BR></P></DIV>
<A NAME="Heading541"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Implicit objects</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Servlets include classes that provide
convenient utilities, such as <B>HttpServletRequest</B>,
<B>HttpServletResponse</B>, <B>Session</B>, etc. Objects of these classes are
built into the JSP specification and automatically available for use in your JSP
without writing any extra lines of code. The implicit objects in a JSP are
detailed in the table below. </FONT><BR></P></DIV>
<DIV ALIGN="CENTER"><TABLE BORDER>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>Implicit variable</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>Of Type
(javax.servlet)</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>Description</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>Scope</B></FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>request</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">protocol dependent subtype of 
<B>HttpServletRequest</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The request that triggers the service
invocation.</FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">request</FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>response</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">protocol dependent subtype of
<B>HttpServletResponse</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The response to the
request.</FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">page</FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>pageContext</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>jsp.PageContext</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The page context encapsulates
implementation-dependent features and provides convenience methods and namespace
access for this JSP.</FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">page</FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>session</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Protocol dependent subtype of
<B>http.HttpSession</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The session object created for the
requesting client. See servlet Session object.</FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">session</FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>application</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>ServletContext</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The servlet context obtained from the
servlet configuration object (e.g., <B>getServletConfig()</B>,
<B>getContext(&#160;)</B>.</FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">app</FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>out</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>jsp.JspWriter</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The object that writes into the output
stream.</FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">page</FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>config</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>ServletConfig</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The <B>ServletConfig</B> for this
JSP.</FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">page</FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>page</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>java.lang.Object</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The instance of this page&#8217;s
implementation class processing the current request.</FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">page</FONT><BR></P></DIV>
</TD>
</TR>
</TABLE></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The scope of each object can vary
significantly. For example, the <B>session</B> object has a scope which exceeds
that of a page, as it many span several client requests and pages. The
<B>application</B> object can provide services to a group of JSP pages that
together represent a Web
application.</FONT><A NAME="_Toc481064886"></A><BR></P></DIV>
<A NAME="Heading542"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
JSP directives </H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Directives are messages to the JSP
container and are denoted by the &#8220;<B>@</B>&#8221;:

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I152' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I153>
</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>&lt;%@ directive {attr=<font color=#004488>"value"</font>}* %&gt;</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Directives do not send anything to the
<B>out</B> stream, but they are important in setting up your JSP page&#8217;s
attributes and dependencies with the JSP container. For example, the line:

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I153' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I154>
</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>&lt;%@ page language=<font color=#004488>"java"</font> %&gt;</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">says that the scripting language being
used within the JSP page is Java. In fact, the JSP specification <I>only</I>
describes the semantics of scripts for the language attribute equal to
&#8220;Java.&#8221; The intent of this directive is to build flexibility into
the JSP technology. In the future, if you were to choose another language, say
Python (a good scripting choice), then that language would have to support the
Java Run-time Environment by exposing the Java technology object model to the
scripting environment, especially the implicit variables defined above,
JavaBeans properties, and public methods.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I154' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I155>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The most important directive is the page
directive. It defines a number of page dependent attributes and communicates
these attributes to the JSP container. These attributes include:
<B>language</B>, <B>extends</B>, <B>import</B>, <B>session</B>, <B>buffer</B>,
<B>autoFlush</B>, <B>isThreadSafe</B>, <B>info</B> and <B>errorPage</B>. For
example:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>&lt;%@ page session=&#8221;<font color=#0000ff>true</font>&#8221; <font color=#0000ff>import</font>=&#8221;java.util.*&#8221; %&gt;</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This line first indicates that the page
requires participation in an HTTP session.  Since we have not set the language
directive the JSP container defaults to using Java and the implicit script
language variable named <B>session</B> is of type
<B>javax.servlet.http.HttpSession</B>. If the directive had been false then the
implicit variable <B>session</B> would be unavailable. If the <B>session</B>
variable is not specified, then it defaults to &#8220;true.&#8221;

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I155' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I156>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The <B>import</B> attribute describes the
types that are available to the scripting environment. This attribute is used
just as it would be in the Java programming language, i.e., a comma-separated
list of ordinary <B>import</B> expressions. This list is imported by the
translated JSP page implementation and is available to the scripting
environment. Again, this is currently only defined when the value of the
language directive is &#8220;java.&#8221;

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I156' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I157>
</FONT><A NAME="_Toc481064887"></A><BR></P></DIV>
<A NAME="Heading543"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
JSP scripting elements</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Once the directives have been used to set
up the scripting environment you can utilize the scripting language elements.
JSP 1.1 has three scripting language elements&#8212;<I>declarations</I>,
<I>scriptlets</I>, and <I>expressions</I>. A declaration will declare elements,
a scriptlet is a statement fragment, and an expression is a complete language
expression. In JSP each scripting element begins with a
&#8220;<B>&lt;%</B>&#8221;. The syntax for each is:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>&lt;%! declaration %&gt;
&lt;%  scriptlet   %&gt;
&lt;%= expression  %&gt;</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">White space is optional after
&#8220;&lt;%!&#8221;, &#8220;&lt;%&#8221;, &#8220;&lt;%=&#8221;, and before
&#8220;%&gt;.&#8221; 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I157' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I158>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">All these tags are based upon XML; you
could even say that a JSP page can be mapped to a XML document. The XML
equivalent syntax for the scripting elements above would be:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>&lt;jsp:declaration&gt; declaration &lt;/jsp:declaration&gt;
&lt;jsp:scriptlet&gt;   scriptlet   &lt;/jsp:scriptlet&gt;
&lt;jsp:expression&gt;  expression  &lt;/jsp:expression&gt;</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">In addition, there are two types of
comments:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>&lt;%-- jsp comment --%&gt;
&lt;!-- html comment --&gt;</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The first form allows you to add comments
to JSP source pages that will not appear in any form in the HTML that is sent to
the client. Of course, the second form of comment is not specific to
JSPs&#8212;it&#8217;s just an ordinary HTML comment. What&#8217;s interesting is
that you can insert JSP code inside an HTML comment and the comment will be
produced in the resulting page, including the result from the JSP code.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I158' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I159>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Declarations are used to declare
variables and methods in the scripting language (currently Java only) used in a
JSP page. The declaration must be a complete Java statement and cannot produce
any output in the <B>out</B> stream. In the <B>Hello.jsp </B>example below, the
declarations for the variables <B>loadTime</B>, <B>loadDate</B> and
<B>hitCount</B> are all complete Java statements that declare and initialize new
variables.</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//:! c15:jsp:Hello.jsp</font>
&lt;%-- This JSP comment will not appear in the
generated html --%&gt;
&lt;%-- This is a JSP directive: --%&gt;
&lt;%@ page <font color=#0000ff>import</font>=<font color=#004488>"java.util.*"</font> %&gt;
&lt;%-- These are declarations: --%&gt;
&lt;%!
    <font color=#0000ff>long</font> loadTime= System.currentTimeMillis();
    Date loadDate = <font color=#0000ff>new</font> Date();
    <font color=#0000ff>int</font> hitCount = 0;
%&gt;
&lt;html&gt;&lt;body&gt;
&lt;%-- The next several lines are the result of a 
JSP expression inserted in the generated html;
the '=' indicates a JSP expression --%&gt;
&lt;H1&gt;This page was loaded at &lt;%= loadDate %&gt; &lt;/H1&gt;
&lt;H1&gt;Hello, world! It's &lt;%= <font color=#0000ff>new</font> Date() %&gt;&lt;/H1&gt;
&lt;H2&gt;Here's an object: &lt;%= <font color=#0000ff>new</font> Object() %&gt;&lt;/H2&gt;
&lt;H2&gt;This page has been up 
&lt;%= (System.currentTimeMillis()-loadTime)/1000 %&gt;
seconds&lt;/H2&gt;
&lt;H3&gt;Page has been accessed &lt;%= ++hitCount %&gt; 
times since &lt;%= loadDate %&gt;&lt;/H3&gt;
&lt;%-- A <font color=#004488>"scriptlet"</font> that writes to the server
console and to the client page. 
Note that the ';' is required: --%&gt;
&lt;%
   System.out.println(<font color=#004488>"Goodbye"</font>);
   out.println(<font color=#004488>"Cheerio"</font>);
%&gt;
&lt;/body&gt;&lt;/html&gt;
<font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">When you run this program you&#8217;ll
see that the variables <B>loadTime</B>, <B>loadDate</B> and <B>hitCount</B> hold
their values between hits to the page, so they are clearly fields and not local
variables. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I159' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I160>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">At the end of the example is a scriptlet
that writes &#8220;Goodbye&#8221; to the Web server console and
&#8220;Cheerio&#8221; to the implicit <B>JspWriter </B>object<B> out</B>.
Scriptlets can contain any code fragments that are valid Java statements.
Scriptlets are executed at request-processing time. When all the scriptlet
fragments in a given JSP are combined in the order they appear in the JSP page,
they should yield a valid statement as defined by the Java programming language.
Whether or not they produce any output into the <B>out</B> stream depends upon
the code in the scriptlet. You should be aware that scriptlets can produce side
effects by modifying the objects that are visible to them.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I160' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I161>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">JSP expressions can found intermingled
with the HTML in the middle section of <B>Hello.jsp</B>. Expressions must be
complete Java statements, which are evaluated, coerced to a <B>String</B>, and
sent to <B>out</B>. If the result of the expression cannot be coerced to a
<B>String</B> then a <B>ClassCastException</B> is thrown.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I161' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I162>
</FONT><A NAME="_Toc481064888"></A><BR></P></DIV>
<A NAME="Heading544"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Extracting fields and values</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The following example is similar to one
shown earlier in the servlet section. The first time you hit the page it detects
that you have no fields and returns a page containing a form, using the same
code as in the servlet example, but in JSP format. When you submit the form with
the filled-in fields to the same JSP URL, it detects the fields and displays
them. This is a nice technique because it allows you to have both the page
containing the form for the user to fill out and the response code for that page
in a single file, thus making it easier to create and maintain.</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//:! c15:jsp:DisplayFormData.jsp</font>
&lt;%-- Fetching the data from an HTML form. --%&gt;
&lt;%-- This JSP also generates the form. --%&gt;
&lt;%@ page <font color=#0000ff>import</font>=<font color=#004488>"java.util.*"</font> %&gt;
&lt;html&gt;&lt;body&gt;
&lt;H1&gt;DisplayFormData&lt;/H1&gt;&lt;H3&gt;
&lt;%
  Enumeration flds = request.getParameterNames();
  <font color=#0000ff>if</font>(!flds.hasMoreElements()) { <font color=#009900>// No fields %&gt;</font>
    &lt;form method=<font color=#004488>"POST"</font> 
    action=<font color=#004488>"DisplayFormData.jsp"</font>&gt;
&lt;%  <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; 10; i++) {  %&gt;
      Field&lt;%=i%&gt;: &lt;input type=<font color=#004488>"text"</font> size=<font color=#004488>"20"</font>
      name=<font color=#004488>"Field&lt;%=i%&gt;"</font> value=<font color=#004488>"Value&lt;%=i%&gt;"</font>&gt;&lt;br&gt;
&lt;%  } %&gt;
    &lt;INPUT TYPE=submit name=submit 
    value=<font color=#004488>"Submit"</font>&gt;&lt;/form&gt;
&lt;%} <font color=#0000ff>else</font> { 
    <font color=#0000ff>while</font>(flds.hasMoreElements()) {
      String field = (String)flds.nextElement();
      String value = request.getParameter(field);
%&gt;
      &lt;li&gt;&lt;%= field %&gt; = &lt;%= value %&gt;&lt;/li&gt;
&lt;%  }
  } %&gt;
&lt;/H3&gt;&lt;/body&gt;&lt;/html&gt;
<font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The most interesting feature of this
example is that it demonstrates how scriptlet code can be intermixed with HTML
code, even to the point of generating HTML within a Java <B>for</B> loop. This
is especially convenient for building any kind of form where repetitive HTML
code would otherwise be required.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I162' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I163>
</FONT><A NAME="_Toc481064889"></A><BR></P></DIV>
<A NAME="Heading545"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
JSP page attributes and scope<A NAME="AAA"></A></H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">By poking around in the HTML
documentation for servlets and JSPs, you will find features that report
information about the servlet or JSP that is currently running. The following
example displays a few of these pieces of data.</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//:! c15:jsp:PageContext.jsp</font>
&lt;%--Viewing the attributes in the pageContext--%&gt;
&lt;%-- Note that you can include any amount of code
inside the scriptlet tags --%&gt;
&lt;%@ page <font color=#0000ff>import</font>=<font color=#004488>"java.util.*"</font> %&gt;
&lt;html&gt;&lt;body&gt;
Servlet Name: &lt;%= config.getServletName() %&gt;&lt;br&gt;
Servlet container supports servlet version:
&lt;% out.print(application.getMajorVersion() + <font color=#004488>"."</font>
+ application.getMinorVersion()); %&gt;&lt;br&gt;
&lt;%
  session.setAttribute(<font color=#004488>"My dog"</font>, <font color=#004488>"Ralph"</font>);
  <font color=#0000ff>for</font>(<font color=#0000ff>int</font> scope = 1; scope &lt;= 4; scope++) {  %&gt;
    &lt;H3&gt;Scope: &lt;%= scope %&gt; &lt;/H3&gt;
&lt;%  Enumeration e =
      pageContext.getAttributeNamesInScope(scope);
    <font color=#0000ff>while</font>(e.hasMoreElements()) {
      out.println(<font color=#004488>"\t&lt;li&gt;"</font> + 
        e.nextElement() + <font color=#004488>"&lt;</font><font color=#004488>/li&gt;"</font>);
    }
  }
%&gt;
&lt;/body&gt;&lt;/html&gt;
<font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This example also shows the use of both
embedded HTML and writing to <B>out</B> in order to output to the resulting HTML
page. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I163' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I164>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The first piece of information produced
is the name of the servlet, which will probably just be &#8220;JSP&#8221; but it
depends on your implementation. You can also discover the current version of the
servlet container by using the application object. Finally, after setting a
session attribute, the &#8220;attribute names&#8221; in a particular scope are
displayed. You don&#8217;t use the scopes very much in most JSP programming;
they were just shown here to add interest to the example. There are four
attribute scopes, as follows: The <I>page scope</I> (scope 1), the <I>request
scope</I> (scope 2), the <I>session scope</I> (scope 3&#8212;here, the only
element available in session scope is &#8220;My dog,&#8221; added right before
the <B>for</B> loop), and the <I>application scope</I> (scope 4), based upon the
<B>ServletContext</B> object. There is one <B>ServletContext</B> per &#8220;Web
application&#8221; per Java Virtual Machine. (A &#8220;Web application&#8221; is
a collection of servlets and content installed under a specific subset of the
server&#8217;s URL namespace such as /catalog.  This is generally set up using a
configuration file.) At the application scope you will see objects that
represent paths for the working directory and temporary directory.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I164' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I165>
</FONT><A NAME="_Toc481064890"></A><BR></P></DIV>
<A NAME="Heading546"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Manipulating sessions in JSP<BR><A NAME="Index2163"></A></H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Sessions were introduced in the prior
section on servlets, and are also available within JSPs. The following example
exercises the <B>session</B> object and allows you to manipulate the amount of
time before the session becomes invalid. </FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//:! c15:jsp:SessionObject.jsp</font>
&lt;%--Getting and setting session object values--%&gt;
&lt;html&gt;&lt;body&gt;
&lt;H1&gt;Session id: &lt;%= session.getId() %&gt;&lt;/H1&gt;
&lt;H3&gt;&lt;li&gt;This session was created at 
&lt;%= session.getCreationTime() %&gt;&lt;/li&gt;&lt;/H1&gt;
&lt;H3&gt;&lt;li&gt;Old MaxInactiveInterval = 
  &lt;%= session.getMaxInactiveInterval() %&gt;&lt;/li&gt;
&lt;% session.setMaxInactiveInterval(5); %&gt;
&lt;li&gt;New MaxInactiveInterval= 
  &lt;%= session.getMaxInactiveInterval() %&gt;&lt;/li&gt;
&lt;/H3&gt;
&lt;H2&gt;If the session object <font color=#004488>"My dog"</font> is 
still around, <font color=#0000ff>this</font> value will be non-<font color=#0000ff>null</font>:&lt;H2&gt;
&lt;H3&gt;&lt;li&gt;Session value <font color=#0000ff>for</font> <font color=#004488>"My dog"</font> =  
&lt;%= session.getAttribute(<font color=#004488>"My dog"</font>) %&gt;&lt;/li&gt;&lt;/H3&gt;
&lt;%-- Now add the session object <font color=#004488>"My dog"</font> --%&gt;
&lt;% session.setAttribute(<font color=#004488>"My dog"</font>, 
                    <font color=#0000ff>new</font> String(<font color=#004488>"Ralph"</font>)); %&gt;
&lt;H1&gt;My dog's name is 
&lt;%= session.getAttribute(<font color=#004488>"My dog"</font>) %&gt;&lt;/H1&gt;
&lt;%-- See <font color=#0000ff>if</font> <font color=#004488>"My dog"</font> wanders to another form --%&gt;
&lt;FORM TYPE=POST ACTION=SessionObject2.jsp&gt;
&lt;INPUT TYPE=submit name=submit 
Value=<font color=#004488>"Invalidate"</font>&gt;&lt;/FORM&gt;
&lt;FORM TYPE=POST ACTION=SessionObject3.jsp&gt;
&lt;INPUT TYPE=submit name=submit 
Value=<font color=#004488>"Keep Around"</font>&gt;&lt;/FORM&gt;
&lt;/body&gt;&lt;/html&gt;
<font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The <B>session </B>object is provided by
default so it is available without any extra coding. The calls to
<B>getID(&#160;)</B>, <B>getCreationTime(&#160;)</B> and
<B>getMaxInactiveInterval(&#160;)</B> are used to display information about this
session object.  
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I165' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I166>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">When you first bring up this session you
will see a <B>MaxInactiveInterval</B> of, for example, 1800 seconds (30
minutes). This will depend on the way your JSP/servlet container is configured.
The <B>MaxInactiveInterval</B> is shortened to 5 seconds to make things
interesting. If you refresh the page before the 5 second interval expires, then
you&#8217;ll see:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>Session value <font color=#0000ff>for</font> <font color=#004488>"My dog"</font> = Ralph</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">But if you wait longer than that,
&#8220;Ralph&#8221; will become <B>null</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I166' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I167>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">To see how the session information can be
carried through to other pages, and also to see the effect of invalidating a
session object versus just letting it expire, two other JSPs are created. The
first one (reached by pressing the &#8220;invalidate&#8221; button in
<B>SessionObject.jsp</B>) reads the session information and then explicitly
invalidates that session:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//:! c15:jsp:SessionObject2.jsp</font>
&lt;%--The session object carries through--%&gt;
&lt;html&gt;&lt;body&gt;
&lt;H1&gt;Session id: &lt;%= session.getId() %&gt;&lt;/H1&gt;
&lt;H1&gt;Session value <font color=#0000ff>for</font> <font color=#004488>"My dog"</font> 
&lt;%= session.getValue(<font color=#004488>"My dog"</font>) %&gt;&lt;/H1&gt;
&lt;% session.invalidate(); %&gt;
&lt;/body&gt;&lt;/html&gt;
<font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">To experiment with this, refresh
<B>SessionObject.jsp</B>, then immediately click the &#8220;invalidate&#8221;
button to bring you to <B>SessionObject2.jsp</B>. At this point you will still
see &#8220;Ralph,&#8221; and right away (before the 5-second interval has
expired), refresh <B>SessionObject2.jsp</B> to see that the session has been
forcefully invalidated and &#8220;Ralph&#8221; has disappeared.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I167' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I168>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">If you go back to
<B>SessionObject.jsp</B>, refresh the page so you have a new 5-second interval,
then press the &#8220;Keep Around&#8221; button, it will take you to the
following page, <B>SessionObject3.jsp</B>, which does NOT invalidate the
session: </FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//:! c15:jsp:SessionObject3.jsp</font>
&lt;%--The session object carries through--%&gt;
&lt;html&gt;&lt;body&gt;
&lt;H1&gt;Session id: &lt;%= session.getId() %&gt;&lt;/H1&gt;
&lt;H1&gt;Session value <font color=#0000ff>for</font> <font color=#004488>"My dog"</font> 
&lt;%= session.getValue(<font color=#004488>"My dog"</font>) %&gt;&lt;/H1&gt;
&lt;FORM TYPE=POST ACTION=SessionObject.jsp&gt;
&lt;INPUT TYPE=submit name=submit Value=<font color=#004488>"Return"</font>&gt;
&lt;/FORM&gt;
&lt;/body&gt;&lt;/html&gt;
<font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Because this page doesn&#8217;t
invalidate the session, &#8220;Ralph&#8221; will hang around as long as you keep
refreshing the page before the 5 second time interval expires. This is not
unlike a &#8220;Tomagotchi&#8221; pet&#8212;as long as you play with
&#8220;Ralph&#8221; he will stick around, otherwise he expires.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I168' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I169>
</FONT><A NAME="_Toc481064891"></A><BR></P></DIV>
<A NAME="Heading547"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Creating and modifying cookies<BR><A NAME="Index2164"></A></H3></FONT>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>Cookies were introduced in the prior section on servlets. Once again, the brevity of JSPs makes playing with cookies much simpler here than when using servlets. The following example shows <font color=#0000ff>this</font> by fetching the cookies that come with the request, reading and modifying their maximum ages (expiration dates) and attaching a <font color=#0000ff>new</font> cookie to the outgoing response:
<font color=#009900>//:! c15:jsp:Cookies.jsp</font>
&lt;%--This program has different behaviors under
 different browsers! --%&gt;
&lt;html&gt;&lt;body&gt;
&lt;H1&gt;Session id: &lt;%= session.getId() %&gt;&lt;/H1&gt;
&lt;%
Cookie[] cookies = request.getCookies();
<font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; cookies.length; i++) { %&gt;
  Cookie name: &lt;%= cookies[i].getName() %&gt; &lt;br&gt;
  value: &lt;%= cookies[i].getValue() %&gt;&lt;br&gt;
  Old max age in seconds: 
  &lt;%= cookies[i].getMaxAge() %&gt;&lt;br&gt;
  &lt;% cookies[i].setMaxAge(5); %&gt;
  New max age in seconds: 
  &lt;%= cookies[i].getMaxAge() %&gt;&lt;br&gt;
&lt;% } %&gt;
&lt;%! <font color=#0000ff>int</font> count = 0; <font color=#0000ff>int</font> dcount = 0; %&gt;
&lt;% response.addCookie(<font color=#0000ff>new</font> Cookie(
    <font color=#004488>"Bob"</font> + count++, <font color=#004488>"Dog"</font> + dcount++)); %&gt;
&lt;/body&gt;&lt;/html&gt;
<font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Since each browser stores cookies in its
own way, you may see different behaviors with different browsers (not
reassuring, but it might be some kind of bug that could be fixed by the time you
read this). Also, you may experience different results if you shut down the
browser and restart it, rather than just visiting a different page and then
returning to <B>Cookies.jsp</B>. Note that using session objects seems to be
more robust than directly using cookies.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I169' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I170>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">After displaying the session identifier,
each cookie in the array of cookies that comes in with the <B>request </B>object
is displayed, along with its maximum age. The maximum age is changed and
displayed again to verify the new value, then a new cookie is added to the
response. However, your browser may seem to ignore the maximum age; it&#8217;s
worth playing with this program and modifying the maximum age value to see the
behavior under different browsers.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I170' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I171>
</FONT><A NAME="_Toc481064892"></A><BR></P></DIV>
<A NAME="Heading548"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
JSP summary</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This section has only been a brief
coverage of JSPs, and yet even with what was covered here (along with the Java
you&#8217;ve learned in the rest of the book, and your own knowledge of HTML)
you can begin to write sophisticated web pages via JSPs. The JSP syntax
isn&#8217;t meant to be particularly deep or complicated, so if you understand
what was presented in this section you&#8217;re ready to be productive with
JSPs. You can find further information in most current books on servlets, or at
<I>java.sun.com</I>. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I171' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I172>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">It&#8217;s especially nice to have JSPs
available, even if your goal is only to produce servlets. You&#8217;ll discover
that if you have a question about the behavior of a servlet feature, it&#8217;s
much easier and faster to write a JSP test program to answer that question than
it is to write a servlet. Part of the benefit comes from having to write less
code and being able to mix the display HTML in with the Java code, but the
leverage becomes especially obvious when you see that the JSP Container handles
all the recompilation and reloading of the JSP for you whenever the source is
changed. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I172' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I173>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">As terrific as JSPs are, however,
it&#8217;s worth keeping in mind that JSP creation requires a higher level of
skill than just programming in Java or just creating Web pages. In addition,
debugging a broken JSP page is not as easy as debugging a Java program, as
(currently) the error messages are more obscure. This should change as
development systems improve, but we may also see other technologies built on top
of Java and the Web that are better adapted to the skills of the web site
designer.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I173' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I174>
</FONT><A NAME="_Toc481064893"></A><BR></P></DIV>
<A NAME="Heading549"></A><FONT FACE = "Verdana"><H2 ALIGN="LEFT">
RMI (Remote Method Invocation)</H2></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Traditional approaches to executing code
on other machines across a network have been confusing as well as tedious and
error-prone to implement. The nicest way to think about this problem is that
some object happens to live on another machine, and that you can send a message
to the remote object and get a result as if the object lived on your local
machine. This simplification is exactly what Java
<A NAME="Index2165"></A><A NAME="Index2166"></A><I>Remote Method Invocation</I>
(RMI) allows you to do. This section walks you through the steps necessary to
create your own RMI objects.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I174' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I175>
</FONT><A NAME="_Toc481064894"></A><BR></P></DIV>
<A NAME="Heading550"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Remote interfaces</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">RMI makes heavy use of interfaces. When
you want to create a remote object, you mask the underlying implementation by
passing around an interface. Thus, when the client gets a reference to a remote
object, what they really get is an interface reference, which <I>happens</I> to
connect to some local stub code that talks across the network. But you
don&#8217;t think about this, you just send messages via your interface
reference. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I175' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I176>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">When you create a
<A NAME="Index2167"></A>remote interface, you must follow these
guidelines<A NAME="Index2168"></A><A NAME="Index2169"></A>:</FONT><BR></P></DIV>
<OL>
<LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">The remote interface must
be <B>public</B> (it cannot have &#8220;package access,&#8221; that is, it
cannot be &#8220;friendly&#8221;). Otherwise, a client will get an error when
attempting to load a remote object that implements the remote interface.
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">The remote
interface must extend the interface <B>java.rmi.Remote</B>.
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Each method in the
remote interface must declare <B>java.rmi.RemoteException</B> in its
<B>throws</B> clause in addition to any application-specific exceptions.
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">A remote object
passed as an argument or return value (either directly or embedded within a
local object) must be declared as the remote interface, not the implementation
class.</FONT></OL><DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Here&#8217;s a simple
remote interface that represents an accurate time service:

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I176' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I177>
</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c15:rmi:PerfectTimeI.java</font>
<font color=#009900>// The PerfectTime remote interface.</font>
<font color=#0000ff>package</font> c15.rmi;
<font color=#0000ff>import</font> java.rmi.*;

<font color=#0000ff>public</font> <font color=#0000ff>interface</font> PerfectTimeI <font color=#0000ff>extends</font> Remote {
  <font color=#0000ff>long</font> getPerfectTime() <font color=#0000ff>throws</font> RemoteException;
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">It looks like any other interface except
that it extends <B>Remote</B> and all of its methods throw
<B>RemoteException</B>. Remember that <U>all the methods of </U>an
<B>interface</B> <STRIKE>and all of its methods </STRIKE>are automatically
<B>public</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I177' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I178>
</FONT><A NAME="_Toc481064895"></A><BR></P></DIV>
<A NAME="Heading551"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Implementing the remote interface</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The server must contain a class that
extends
<A NAME="Index2170"></A><A NAME="Index2171"></A><B>UnicastRemoteObject</B> and
implements the remote interface. This class can also have additional methods,
but only the methods in the remote interface are available to the client, of
course, since the client will get only a reference to the interface, not the
class that implements it.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I178' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I179>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You must explicitly define the
constructor for the remote object even if you&#8217;re only defining a default
constructor that calls the base-class constructor. You must write it out since
it must throw <B>RemoteException</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I179' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I180>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Here&#8217;s the implementation of the
remote interface <B>PerfectTimeI</B>:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c15:rmi:PerfectTime.java</font>
<font color=#009900>// The implementation of </font>
<font color=#009900>// the PerfectTime remote object.</font>
<font color=#0000ff>package</font> c15.rmi;
<font color=#0000ff>import</font> java.rmi.*;
<font color=#0000ff>import</font> java.rmi.server.*;
<font color=#0000ff>import</font> java.rmi.registry.*;
<font color=#0000ff>import</font> java.net.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> PerfectTime 
    <font color=#0000ff>extends</font> UnicastRemoteObject
    <font color=#0000ff>implements</font> PerfectTimeI {
  <font color=#009900>// Implementation of the interface:</font>
  <font color=#0000ff>public</font> <font color=#0000ff>long</font> getPerfectTime() 
      <font color=#0000ff>throws</font> RemoteException {
    <font color=#0000ff>return</font> System.currentTimeMillis();
  }
  <font color=#009900>// Must implement constructor </font>
  <font color=#009900>// to throw RemoteException:</font>
  <font color=#0000ff>public</font> PerfectTime() <font color=#0000ff>throws</font> RemoteException {
    <font color=#009900>// super(); // Called automatically</font>
  }
  <font color=#009900>// Registration for RMI serving. Throw </font>
  <font color=#009900>// exceptions out to the console.</font>
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) 
  <font color=#0000ff>throws</font> Exception {
    System.setSecurityManager(
    <font color=#0000ff>new</font> RMISecurityManager());
    PerfectTime pt = <font color=#0000ff>new</font> PerfectTime();
    Naming.bind(
      <font color=#004488>"</font><font color=#004488>/</font><font color=#004488>/peppy:2005</font><font color=#004488>/PerfectTime"</font>, pt);
    System.out.println(<font color=#004488>"Ready to do time"</font>);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Here, <B>main(&#160;)</B> handles all the
details of setting up the server. When you&#8217;re serving RMI objects, at some
point in your program you must:
<A NAME="Index2172"></A><A NAME="Index2173"></A><A NAME="Index2174"></A><A NAME="Index2175"></A>

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I180' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I181>
</FONT><BR></P></DIV>
<OL>
<LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Create and install a
security manager that supports RMI. The only one available for RMI as part of
the Java distribution is <B>RMISecurityManager</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I181' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I182>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Create
one or more instances of a remote object. Here, you can see the creation of the
<B>PerfectTime</B> object.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I182' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I183>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Register
at least one of the remote objects with the RMI remote object registry for
bootstrapping purposes. One remote object can have methods that produce
references to other remote objects. This allows you to set it up so the client
must go to the registry only once, to get the first remote object.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I183' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I184>
</FONT></OL><A NAME="Heading552"></A><FONT FACE = "Verdana"><H4 ALIGN="LEFT">
Setting up the registry</H4></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Here, you see a call to the <B>static</B>
method
<A NAME="Index2176"></A><A NAME="Index2177"></A><A NAME="Index2178"></A><B>Naming.bind(&#160;)</B>.
However, this call requires that the registry be running as a separate process
on the computer. The name of the registry server is
<A NAME="Index2179"></A><A NAME="Index2180"></A><B>rmiregistry</B>, and under
32-bit Windows you say: 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I184' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I185>
</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>start rmiregistry</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">to start it in the background. On Unix,
the command is:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>rmiregistry &amp;</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Like many network programs, the
<B>rmiregistry</B> is located at the IP address of whatever machine started it
up, but it must also be listening at a port. If you invoke the
<B>rmiregistry</B> as above, with no argument, the registry&#8217;s port will
default to 1099. If you want it to be at some other port, you add an argument on
the command line to specify the port. For this example, the port is located at
2005, so the <B>rmiregistry</B> should be started like this under 32-bit
Windows: 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I185' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I186>
</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>start rmiregistry 2005</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">or for Unix:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>rmiregistry 2005 &amp;</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The information about the port must also
be given to the <B>bind(&#160;)</B> command, as well as the IP address of the
machine where the registry is located. But this brings up what can be a
frustrating problem if you&#8217;re expecting to test RMI programs locally the
way the network programs have been tested so far in this chapter. In the JDK
1.1.1 release, there are a couple of
problems<A NAME="Index2181"></A><A NAME="Index2182"></A><A NAME="Index2183"></A><A NAME="Index2184"></A>:</FONT><A NAME="fnB76" HREF="#fn76">[76]</A><FONT FACE="Georgia">

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I186' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I187>
</FONT><BR></P></DIV>
<OL>
<LI><FONT FACE="Verdana"><B>	</B></FONT><FONT FACE="Georgia"><B>localhost
</B>does not work with RMI. Thus, to experiment with RMI on a single machine,
you must provide the name of the machine. To find out the name of your machine
under 32-bit Windows, go to the control panel and select &#8220;Network.&#8221;
Select the &#8220;Identification&#8221; tab, and you&#8217;ll see your computer
name. In my case, I called my computer &#8220;Peppy.&#8221; It appears that
capitalization is ignored.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I187' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I188>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">RMI
will not work unless your computer has an active TCP/IP connection, even if all
your components are just talking to each other on the local machine. This means
that you must connect to your Internet service provider before trying to run the
program or you&#8217;ll get some obscure exception messages.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I188' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I189>
</FONT></OL><DIV ALIGN="LEFT"><P><FONT FACE="Georgia">With
all this in mind, the <B>bind(&#160;)</B> command becomes:

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I189' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I190>
</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>Naming.bind(<font color=#004488>"</font><font color=#004488>/</font><font color=#004488>/peppy:2005</font><font color=#004488>/PerfectTime"</font>, pt);</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">If you are using the default port 1099,
you don&#8217;t need to specify a port, so you could say:

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I190' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I191>
</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>Naming.bind(<font color=#004488>"</font><font color=#004488>/</font><font color=#004488>/peppy</font><font color=#004488>/PerfectTime"</font>, pt);</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You should be able to perform local
testing by leaving off the IP address and using only the identifier:

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I191' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I192>
</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>Naming.bind(<font color=#004488>"PerfectTime"</font>, pt);</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The name for the service is arbitrary; it
happens to be PerfectTime here, just like the name of the class, but you could
call it anything you want. The important thing is that it&#8217;s a unique name
in the registry that the client knows to look for to procure the remote object.
If the name is already in the registry, you&#8217;ll get an
<A NAME="Index2185"></A><A NAME="Index2186"></A><B>AlreadyBoundException</B>. To
prevent this, you can always use
<A NAME="Index2187"></A><A NAME="Index2188"></A><A NAME="Index2189"></A><B>rebind(&#160;)</B>
instead of <B>bind(&#160;)</B>, since <B>rebind(&#160;)</B> either adds a new
entry or replaces the one that&#8217;s already there.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I192' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I193>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Even though <B>main(&#160;)</B> exits,
your object has been created and registered so it&#8217;s kept alive by the
registry, waiting for a client to come along and request it. As long as the
<B>rmiregistry</B> is running and you don&#8217;t call
<B>Naming.unbind(&#160;)</B>
<A NAME="Index2190"></A><A NAME="Index2191"></A><A NAME="Index2192"></A>on your
name, the object will be there. For this reason, when you&#8217;re developing
your code you need to shut down the <B>rmiregistry</B> and restart it when you
compile a new version of your remote object.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I193' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I194>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You aren&#8217;t forced to start up
<B>rmiregistry</B> as an external process. If you know that your application is
the only one that&#8217;s going to use the registry, you can start it up inside
your program with the line:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>LocateRegistry.createRegistry(2005);</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Like before, 2005 is the port number we
happen to be using in this example. This is the equivalent of running
<B>rmiregistry 2005</B> from a command line, but it can often be more convenient
when you&#8217;re developing RMI code since it eliminates the extra steps of
starting and stopping the registry. Once you&#8217;ve executed this code, you
can <B>bind(&#160;)</B> using <B>Naming</B> as before.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I194' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I195>
</FONT><A NAME="_Toc481064896"></A><BR></P></DIV>
<A NAME="Heading553"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Creating stubs and skeletons</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">If you compile and run
<B>PerfectTime.java</B>, it won&#8217;t work even if you have the
<B>rmiregistry</B> running correctly. That&#8217;s because the framework for RMI
isn&#8217;t all there yet. You must first create the
<A NAME="Index2193"></A><A NAME="Index2194"></A>stubs and
<A NAME="Index2195"></A><A NAME="Index2196"></A>skeletons that provide the
network connection operations and allow you to pretend that the remote object is
just another local object on your machine.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I195' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I196>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">What&#8217;s going on behind the scenes
is complex. Any objects that you pass into or return from a remote object must
<B>implement <A NAME="Index2197"></A><A NAME="Index2198"></A>Serializable</B>
(if you want to pass remote references instead of the entire objects, the object
arguments can <B>implement Remote</B>), so you can imagine that the stubs and
skeletons are automatically performing serialization and deserialization as they
&#8220;marshal&#8221; all of the arguments across the network and return the
result. Fortunately, you don&#8217;t have to know any of this, but you <I>do</I>
have to create the stubs and skeletons. This is a simple process: you invoke the
<A NAME="Index2199"></A><A NAME="Index2200"></A><B>rmic</B> tool on your
compiled code, and it creates the necessary files. So the only requirement is
that another step be added to your compilation process.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I196' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I197>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The <B>rmic</B> tool is particular about
packages and <A NAME="Index2201"></A><A NAME="Index2202"></A>classpaths,
however. <B>PerfectTime.java</B> is in the <B>package c15.rmi</B>, and even if
you invoke <B>rmic</B> in the same directory in which <B>PerfectTime.class</B>
is located, <B>rmic</B> won&#8217;t find the file, since it searches the
classpath. So you must specify the location off the class path, like
so:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>rmic c15.rmi.PerfectTime</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You don&#8217;t have to be in the
directory containing <B>PerfectTime.class</B> when you execute this command, but
the results will be placed in the current directory.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I197' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I198>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">When <B>rmic</B> runs successfully,
you&#8217;ll have two new classes in the directory:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>PerfectTime_Stub.<font color=#0000ff>class</font>
PerfectTime_Skel.<font color=#0000ff>class</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">corresponding to the stub and skeleton.
Now you&#8217;re ready to get the server and client to talk to each other.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I198' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I199>
</FONT><A NAME="_Toc481064897"></A><BR></P></DIV>
<A NAME="Heading554"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Using the remote object</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The whole point of RMI is to make the use
of remote objects simple. The only extra thing that you must do in your client
program is to look up and fetch the remote interface from the server. From then
on, it&#8217;s just regular Java programming: sending messages to objects.
Here&#8217;s the program that uses <B>PerfectTime</B>:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c15:rmi:DisplayPerfectTime.java</font>
<font color=#009900>// Uses remote object PerfectTime.</font>
<font color=#0000ff>package</font> c15.rmi;
<font color=#0000ff>import</font> java.rmi.*;
<font color=#0000ff>import</font> java.rmi.registry.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> DisplayPerfectTime {
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) 
  <font color=#0000ff>throws</font> Exception {
    System.setSecurityManager(
      <font color=#0000ff>new</font> RMISecurityManager());
    PerfectTimeI t = 
      (PerfectTimeI)Naming.lookup(
        <font color=#004488>"</font><font color=#004488>/</font><font color=#004488>/peppy:2005</font><font color=#004488>/PerfectTime"</font>);
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; 10; i++)
      System.out.println(<font color=#004488>"Perfect time = "</font> +
        t.getPerfectTime());
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The ID string is the same as the one used
to register the object with <B>Naming</B>, and the first part represents the URL
and port number. Since you&#8217;re using a URL, you can also specify a machine
on the Internet. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I199' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I200>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">What comes back from
<B>Naming.lookup(&#160;)</B> must be cast to the remote interface, <I>not</I> to
the class. If you use the class instead, you&#8217;ll get an exception.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I200' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I201>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You can see in the method
call</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>t.getPerfectTime()</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">that once you have a reference to the
remote object, programming with it is indistinguishable from programming with a
local object (with one difference: remote methods throw
<A NAME="Index2203"></A><A NAME="Index2204"></A><B>RemoteException</B>).

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I201' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I202>
</FONT><A NAME="_Toc375545499"></A><A NAME="_Toc481064898"></A><BR></P></DIV>
<A NAME="Heading555"></A><FONT FACE = "Verdana"><H2 ALIGN="LEFT">
CORBA<BR><A NAME="Index2205"></A></H2></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">In large, distributed applications, your
needs might not be satisfied by the preceding approaches. For example, you might
want to interface with legacy data stores, or you might need services from a
server object regardless of its physical location. These situations require some
form of Remote Procedure Call (RPC), and possibly language independence. This is
where CORBA can help. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I202' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I203>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">CORBA is not a language feature;
it&#8217;s an integration technology. It&#8217;s a specification that vendors
can follow to implement CORBA-compliant integration products. CORBA is part of
the OMG&#8217;s effort to define a standard framework for distributed,
language-independent object interoperability.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I203' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I204>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">CORBA supplies the ability to make remote
procedure calls into Java objects and non-Java objects, and to interface with
legacy systems in a location-transparent way. Java adds networking support and a
nice object-oriented language for building graphical and non-graphical
applications. The Java and <A NAME="Index2206"></A>OMG object model map nicely
to each other; for example, both Java and CORBA implement the interface concept
and a reference object model.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I204' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I205>
</FONT><A NAME="_Toc481064899"></A><BR></P></DIV>
<A NAME="Heading556"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
CORBA fundamentals</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The object interoperability specification
developed by the OMG is commonly referred to as the Object Management
Architecture (OMA). The OMA defines two components: the Core Object Model and
the OMA Reference Architecture. The Core Object Model states the basic concepts
of object, interface, operation, and so on. (CORBA is a refinement of the Core
Object Model.) The OMA Reference Architecture defines an underlying
infrastructure of services and mechanisms that allow objects to interoperate.
The OMA Reference Architecture includes the Object Request Broker (ORB), Object
Services (also known as CORBA services), and common facilities.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I205' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I206>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The ORB is the communication bus by which
objects can request services from other objects, regardless of their physical
location. This means that what looks like a method call in the client code is
actually a complex operation. First, a connection with the server object must
exist, and to create a connection the ORB must know where the server
implementation code resides. Once the connection is established, the method
arguments must be marshaled, i.e. converted in a binary stream to be sent across
a network. Other information that must be sent are the server machine name, the
server process, and the identity of the server object inside that process.
Finally, this information is sent through a low-level wire protocol, the
information is decoded on the server side, and the call is executed. The ORB
hides all of this complexity from the programmer and makes the operation almost
as simple as calling a method on local object.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I206' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I207>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">There is no specification for how an ORB
Core should be implemented, but to provide a basic compatibility among different
vendors&#8217; ORBs, the OMG defines a set of services that are accessible
through standard interfaces.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I207' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I208>
</FONT><BR></P></DIV>
<A NAME="Heading557"></A><FONT FACE = "Verdana"><H4 ALIGN="LEFT">
CORBA Interface Definition Language
(IDL)<BR><A NAME="Index2207"></A><A NAME="Index2208"></A></H4></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">CORBA is designed for language
transparency: a client object can call methods on a server object of different
class, regardless of the language they are implemented with. Of course, the
client object must know the names and signatures of methods that the server
object exposes. This is where IDL comes in. The CORBA IDL is a language-neutral
way to specify data types, attributes, operations, interfaces, and more. The IDL
syntax is similar to the C++ or Java syntax. The following table shows the
correspondence between some of the concepts common to three languages that can
be specified through CORBA IDL:</FONT><BR></P></DIV>
<DIV ALIGN="CENTER"><TABLE BORDER>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>CORBA IDL</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>Java</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>C++</B></FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Module</FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Package</FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Namespace</FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Interface</FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Interface</FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Pure abstract class</FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Method</FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Method</FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Member function</FONT><BR></P></DIV>
</TD>
</TR>
</TABLE></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The inheritance concept is supported as
well, using the colon operator as in C++. The programmer writes an IDL
description of the attributes, methods, and interfaces that are implemented and
used by the server and clients. The IDL is then compiled by a vendor-provided
IDL/Java compiler, which reads the IDL source and generates Java
code.</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The IDL compiler is an extremely useful
tool: it doesn&#8217;t just generate a Java source equivalent of the IDL, it
also generates the code that will be used to marshal method arguments and to
make remote calls. This code, called the stub and skeleton code, is organized in
multiple Java source files and is usually part of the same Java package. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I208' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I209>
</FONT><BR></P></DIV>
<A NAME="Heading558"></A><FONT FACE = "Verdana"><H4 ALIGN="LEFT">
The naming service</H4></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The naming service is one of the
fundamental CORBA services. A CORBA object is accessed through a reference, a
piece of information that&#8217;s not meaningful for the human reader. But
references can be assigned programmer-defined, string names. This operation is
known as <I>stringifying the reference</I>, and one of the OMA components, the
Naming Service, is devoted to performing string-to-object and object-to-string
conversion and mapping. Since the Naming Service acts as a telephone directory
that both servers and clients can consult and manipulate, it runs as a separate
process. Creating an object-to-string mapping is called <I>binding an
object</I>, and removing the mapping is called <I>unbinding</I>. Getting an
object reference passing a string is called <I>resolving the name</I>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I209' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I210>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">For example, on startup, a server
application could create a server object, bind the object into the name service,
and then wait for clients to make requests. A client first obtains a server
object reference, resolving the string name, and then can make calls into the
server using the reference.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I210' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I211>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Again, the Naming Service specification
is part of CORBA, but the application that implements it is provided by the ORB
vendor. The way you get access to the Naming Service functionality can vary from
vendor to vendor. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I211' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I212>
</FONT><A NAME="_Toc481064900"></A><BR></P></DIV>
<A NAME="Heading559"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
An example</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The code shown here will not be elaborate
because different ORBs have different ways to access CORBA services, so examples
are vendor specific. (The example below uses JavaIDL, a free product from Sun
that comes with a light-weight ORB, a naming service, and an IDL-to-Java
compiler.) In addition, since Java is young and still evolving, not all CORBA
features are present in the various Java/CORBA products.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I212' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I213>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">We want to implement a server, running on
some machine, that can be queried for the exact time. We also want to implement
a client that asks for the exact time. In this case we&#8217;ll be implementing
both programs in Java, but we could also use two different languages (which
often happens in real situations).

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I213' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I214>
</FONT><BR></P></DIV>
<A NAME="Heading560"></A><FONT FACE = "Verdana"><H4 ALIGN="LEFT">
Writing the IDL source</H4></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The first step is to write an IDL
description of the services provided. This is usually done by the server
programmer, who is then free to implement the server in any language in which a
CORBA IDL compiler exists. The IDL file is distributed to the client side
programmer and becomes the bridge between languages.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I214' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I215>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The example below shows the IDL
description of our <B>ExactTime</B> server:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c15:corba:ExactTime.idl</font>
<font color=#009900>//# You must install idltojava.exe from </font>
<font color=#009900>//# java.sun.com and adjust the settings to use</font>
<font color=#009900>//# your local C preprocessor in order to compile</font>
<font color=#009900>//# This file. See docs at java.sun.com.</font>
module remotetime {
   <font color=#0000ff>interface</font> ExactTime {
      string getTime();
   };
}; <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This is a declaration of the
<B>ExactTime</B> interface inside the <B>remotetime</B> namespace. The interface
is made up of one single method that gives back the current time in
<B>string</B> format. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I215' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I216>
</FONT><BR></P></DIV>
<A NAME="Heading561"></A><FONT FACE = "Verdana"><H4 ALIGN="LEFT">
Creating stubs and skeletons</H4></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The second step is to compile the IDL to
create the Java stub and skeleton code that we&#8217;ll use for implementing the
client and the server. The tool that comes with the JavaIDL product is
<A NAME="Index2209"></A><B>idltojava</B>: </FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE>idltojava remotetime.idl</PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This will automatically generate code for
both the stub and the skeleton. <B>Idltojava</B> generates a Java <B>package</B>
named after the IDL module, <B>remotetime</B>, and the generated Java files are
put in the <B>remotetime</B> subdirectory. <B>_ExactTimeImplBase.java </B>is the
skeleton that we&#8217;ll use to implement the server object, and
<B>_ExactTimeStub.java</B> will be used for the client. There are Java
representations of the IDL interface in <B>ExactTime.java</B> and a couple of
other support files used, for example, to facilitate access to the naming
service operations. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I216' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I217>
</FONT><BR></P></DIV>
<A NAME="Heading562"></A><FONT FACE = "Verdana"><H4 ALIGN="LEFT">
Implementing the server and the client</H4></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Below you can see the code for the server
side. The server object implementation is in the <B>ExactTimeServer</B> class.
The <B>RemoteTimeServer</B> is the application that creates a server object,
registers it with the ORB, gives a name to the object reference, and then sits
quietly waiting for client requests.</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c15:corba:RemoteTimeServer.java</font>
<font color=#0000ff>import</font> remotetime.*;
<font color=#0000ff>import</font> org.omg.CosNaming.*;
<font color=#0000ff>import</font> org.omg.CosNaming.NamingContextPackage.*;
<font color=#0000ff>import</font> org.omg.CORBA.*;
<font color=#0000ff>import</font> java.util.*;
<font color=#0000ff>import</font> java.text.*;

<font color=#009900>// Server object implementation</font>
<font color=#0000ff>class</font> ExactTimeServer <font color=#0000ff>extends</font> _ExactTimeImplBase {
  <font color=#0000ff>public</font> String getTime(){
    <font color=#0000ff>return</font> DateFormat.
        getTimeInstance(DateFormat.FULL).
          format(<font color=#0000ff>new</font> Date(
              System.currentTimeMillis()));
  }
}

<font color=#009900>// Remote application implementation</font>
<font color=#0000ff>public</font> <font color=#0000ff>class</font> RemoteTimeServer {
  <font color=#009900>// Throw exceptions to console:</font>
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) 
  <font color=#0000ff>throws</font> Exception {
    <font color=#009900>// ORB creation and initialization:</font>
    ORB orb = ORB.init(args, <font color=#0000ff>null</font>);
    <font color=#009900>// Create the server object and register it:</font>
    ExactTimeServer timeServerObjRef = 
      <font color=#0000ff>new</font> ExactTimeServer();
    orb.connect(timeServerObjRef);
    <font color=#009900>// Get the root naming context:</font>
    org.omg.CORBA.Object objRef = 
      orb.resolve_initial_references(
        <font color=#004488>"NameService"</font>);
    NamingContext ncRef = 
      NamingContextHelper.narrow(objRef);
    <font color=#009900>// Assign a string name to the </font>
    <font color=#009900>// object reference (binding):</font>
    NameComponent nc = 
      <font color=#0000ff>new</font> NameComponent(<font color=#004488>"ExactTime"</font>, <font color=#004488>""</font>);
    NameComponent[] path = { nc };
    ncRef.rebind(path, timeServerObjRef);
    <font color=#009900>// Wait for client requests:</font>
    java.lang.Object sync =
      <font color=#0000ff>new</font> java.lang.Object();
    <font color=#0000ff>synchronized</font>(sync){
      sync.wait();
    }
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">As you can see, implementing the server
object is simple; it&#8217;s a regular Java class that inherits from the
skeleton code generated by the IDL compiler. Things get a bit more complicated
when it comes to interacting with the ORB and other CORBA services.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I217' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I218>
</FONT><BR></P></DIV>
<A NAME="Heading563"></A><FONT FACE = "Verdana"><H4 ALIGN="LEFT">
Some CORBA services</H4></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This is a short description of what the
JavaIDL-related code is doing (primarily ignoring the part of the CORBA code
that is vendor dependent). The first line in <B>main(&#160;)</B> starts up the
ORB, and of course, this is because our server object will need to interact with
it. Right after the ORB initialization, a server object is created. Actually,
the right term would be a <I>transient servant object</I>: an object that
receives requests from clients, and whose lifetime is the same as the process
that creates it. Once the transient servant object is created, it is registered
with the ORB, which means that the ORB knows of its existence and can now
forward requests to it. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I218' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I219>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Up to this point, all we have is
<B>timeServerObjRef</B>, an object reference that is known only inside the
current server process. The next step will be to assign a stringified name to
this servant object; clients will use that name to locate the servant object. We
accomplish this operation using the Naming Service. First, we need an object
reference to the Naming Service; the call to
<B>resolve_initial_references(&#160;)</B> takes the stringified object reference
of the Naming Service that is &#8220;NameService,&#8221; in JavaIDL, and returns
an object reference. This is cast to a specific <B>NamingContext</B> reference
using the <B>narrow(&#160;)</B> method. We can use now the naming services.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I219' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I220>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">To bind the servant object with a
stringified object reference, we first create a <B>NameComponent</B> object,
initialized with &#8220;ExactTime,&#8221; the name string we want to bind to the
servant object. Then, using the <B>rebind(&#160;)</B> method, the stringified
reference is bound to the object reference. We use <B>rebind(&#160;)</B> to
assign a reference, even if it already exists, whereas <B>bind(&#160;)</B>
raises an exception if the reference already exists. A name is made up in CORBA
by a sequence of NameContexts&#8212;that&#8217;s why we use an array to bind the
name to the object reference.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I220' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I221>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The servant object is finally ready for
use by clients. At this point, the server process enters a wait state. Again,
this is because it is a transient servant, so its lifetime is confined to the
server process. JavaIDL does not currently support persistent
objects&#8212;objects that survive the execution of the process that creates
them. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I221' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I222>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Now that we have an idea of what the
server code is doing, let&#8217;s look at the client code:</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c15:corba:RemoteTimeClient.java</font>
<font color=#0000ff>import</font> remotetime.*;
<font color=#0000ff>import</font> org.omg.CosNaming.*;
<font color=#0000ff>import</font> org.omg.CORBA.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> RemoteTimeClient {
  <font color=#009900>// Throw exceptions to console:</font>
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) 
  <font color=#0000ff>throws</font> Exception {
    <font color=#009900>// ORB creation and initialization:</font>
    ORB orb = ORB.init(args, <font color=#0000ff>null</font>);
    <font color=#009900>// Get the root naming context:</font>
    org.omg.CORBA.Object objRef = 
      orb.resolve_initial_references(
        <font color=#004488>"NameService"</font>);
    NamingContext ncRef = 
      NamingContextHelper.narrow(objRef);
    <font color=#009900>// Get (resolve) the stringified object </font>
    <font color=#009900>// reference for the time server:</font>
    NameComponent nc = 
      <font color=#0000ff>new</font> NameComponent(<font color=#004488>"ExactTime"</font>, <font color=#004488>""</font>);
    NameComponent[] path = { nc };
    ExactTime timeObjRef = 
      ExactTimeHelper.narrow(
        ncRef.resolve(path));
    <font color=#009900>// Make requests to the server object:</font>
    String exactTime = timeObjRef.getTime();
    System.out.println(exactTime);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The first few lines do the same as they
do in the server process: the ORB is initialized and a reference to the naming
service server is resolved. Next, we need an object reference for the servant
object, so we pass the stringified object reference to the
<B>resolve(&#160;)</B> method, and we cast the result into an <B>ExactTime</B>
interface reference using the <B>narrow(&#160;)</B> method. Finally, we call
<B>getTime(&#160;)</B>.  
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I222' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I223>
</FONT><BR></P></DIV>
<A NAME="Heading564"></A><FONT FACE = "Verdana"><H4 ALIGN="LEFT">
Activating the name service process</H4></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Finally we have a server and a client
application ready to interoperate. You&#8217;ve seen that both need the naming
service to bind and resolve stringified object references. You must start the
naming service process before running either the server or the client. In
JavaIDL, the naming service is a Java application that comes with the product
package, but it can be different with other products. The JavaIDL naming service
runs inside an instance of the JVM and listens by default to network port 900.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I223' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I224>
</FONT><BR></P></DIV>
<A NAME="Heading565"></A><FONT FACE = "Verdana"><H4 ALIGN="LEFT">
Activating the server and the client</H4></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Now you are ready to start your server
and client application (in this order, since our server is transient). If
everything is set up correctly, what you&#8217;ll get is a single output line on
the client console window, giving you the current time. Of course, this might be
not very exciting by itself, but you should take one thing into account: even if
they are on the same physical machine, the client and the server application are
running inside different virtual machines and they can communicate via an
underlying integration layer, the ORB and the Naming Service.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I224' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I225>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This is a simple example, designed to
work without a network, but an ORB is usually configured for location
transparency. When the server and the client are on different machines, the ORB
can resolve remote stringified references using a component known as the
<I>Implementation Repository</I>. Although the Implementation Repository is part
of CORBA, there is almost no specification, so it differs from vendor to vendor.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I225' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I226>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">As you can see, there is much more to
CORBA than what has been covered here, but you should get the basic idea. If you
want more information about CORBA, the place to start is the OMG Web site, at
<I>www.omg.org</I>. There you&#8217;ll find documentation, white papers,
proceedings, and references to other CORBA sources and products.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I226' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I227>
</FONT><A NAME="_Toc481064901"></A><BR></P></DIV>
<A NAME="Heading566"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Java Applets and CORBA</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Java applets can act as CORBA clients.
This way, an applet can access remote information and services exposed as CORBA
objects. But an applet can connect only with the server from which it was
downloaded, so all the CORBA objects the applet interacts with must be on that
server. This is the opposite of what CORBA tries to do: give you complete
location transparency. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I227' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I228>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This is an issue of network security. If
you&#8217;re on an intranet, one solution is to loosen the security restrictions
on the browser. Or, set up a firewall policy for connecting with external
servers. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I228' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I229>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Some Java ORB products offer proprietary
solutions to this problem. For example, some implement what is called HTTP
Tunneling, while others have their special firewall features.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I229' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I230>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This is too complex a topic to be covered
in an appendix, but it is definitely something you should be aware of.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I230' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I231>
</FONT><A NAME="_Toc481064902"></A><BR></P></DIV>
<A NAME="Heading567"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
CORBA vs. RMI</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You saw that one of the main CORBA
features is RPC support, which allows your local objects to call methods in
remote objects. Of course, there already is a native Java feature that does
exactly the same thing: RMI (see Chapter 15). While RMI makes RPC possible
between Java objects, CORBA makes RPC possible between objects implemented in
any language. It&#8217;s a big difference.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I231' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I232>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">However, <A NAME="Index2210"></A>RMI can
be used to call services on remote, non-Java code. All you need is some kind of
wrapper Java object around the non-Java code on the server side. The wrapper
object connects externally to Java clients via RMI, and internally connects to
the non-Java code using one of the techniques shown above, such as JNI or
J/Direct. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I232' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I233>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This approach requires you to write a
kind of integration layer, which is exactly what CORBA does for you, but then
you don&#8217;t need a third-party ORB.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I233' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I234>
</FONT><A NAME="_Toc481064903"></A><BR></P></DIV>
<A NAME="Heading568"></A><FONT FACE = "Verdana"><H2 ALIGN="LEFT">
Enterprise JavaBeans<BR><A NAME="Index2211"></A><A NAME="Index2212"></A></H2></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Suppose</FONT><A NAME="fnB77" HREF="#fn77">[77]</A><FONT FACE="Georgia">
you need to develop a multi-tiered application to view and update records in a
database through a Web interface. You can write a database application using
JDBC, a Web interface using JSP/servlets, and a distributed system using
CORBA/RMI. But what extra considerations must you make when developing a
distributed object system rather than just knowing API&#8217;s? Here are the
issues: 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I234' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I235>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B><I>Performance:</I></B> The
distributed objects you create must perform well, as they could potentially
service many clients at a time. You&#8217;ll need to use optimization techniques
such as caching as well as pooling resources like database connections.
You&#8217;ll also have to manage the lifecycle of your distributed objects.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I235' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I236>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B><I>Scalability</I></B>: The
distributed objects must also be scalable. Scalability in a distributed
application means that the number of instances of your distributed objects can
be increased and moved onto additional machines without modifying any code.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I236' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I237>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B><I>Security:</I></B> A distributed
object must often manage the authorization of the clients that access it.
Ideally, you can add new users and roles to it without recompilation.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I237' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I238>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B><I>Distributed Transactions:</I></B> A
distributed object should be able to reference distributed transactions
transparently. For example, if you are working with two separated databases, you
should be able to update them simultaneously within the same transaction and
roll them both back if a certain criteria is not met.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I238' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I239>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B><I>Reusability:</I></B> The ideal
distributed object can be effortlessly moved onto another vendors&#8217;
application server. It would be nice if you could resell a distributed object
component without making special modifications, or buy someone else&#8217;s
component and use it without having to recompile or rewrite it.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I239' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I240>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B><I>Availability:</I></B> If one of the
machines in the system goes down, clients should automatically fail-over to
backup copies of the objects running on other machines.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I240' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I241>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">These considerations, in addition the
business problem that you set out to solve, can make for a daunting development
project. However, all the issues <I>except</I> for your business problem are
redundant&#8212;solutions must be reinvented for every distributed business
application. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I241' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I242>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Sun, along with other leading distributed
object vendors, realized that sooner or later every development team would be
reinventing these particular solutions, so they created the Enterprise JavaBeans
specification (EJB). EJB describes a server-side component model that tackles
all of the considerations mentioned above using a standard approach that allows
developers to create business components called EJBs that are isolated from
low-level &#8220;plumbing&#8221; code and that focus solely on providing
business logic. Because EJB&#8217;s are defined in a standard way, they can
vendor independent.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I242' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I243>
</FONT><A NAME="_Toc466527406"></A><A NAME="_Toc481064904"></A><BR></P></DIV>
<A NAME="Heading569"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
JavaBeans vs. EJBs</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Because of the similarity in names, there
is much confusion about the relationship between the JavaBeans component model
and the Enterprise JavaBeans specification. While both the JavaBeans and
Enterprise JavaBeans specifications share the same objectives in promoting reuse
and portability of Java code between development and deployment tools with the
use of standard design patterns, the motives behind each specification are
geared to solve different problems.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I243' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I244>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The standards defined in the JavaBeans
component model are designed for creating reusable components that are typically
used in IDE development tools and are commonly, although not exclusively, visual
components. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I244' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I245>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The Enterprise JavaBeans specification
defines a component model for developing server side java code. Because EJBs can
potentially run on many different server-side platforms&#8212;including
mainframes that do not have visual displays&#8212;An EJB cannot make use of
graphical libraries such as AWT or Swing.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I245' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I246>
</FONT><A NAME="_Toc466527392"></A><A NAME="_Toc481064905"></A><BR></P></DIV>
<A NAME="Heading570"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
The EJB specification</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The Enterprise JavaBeans specification
describes a server-side component model. It defines six roles that are used to
perform the tasks in development and deployment as well as defining the
components of the system. These roles are used in the development, deployment
and running of a distributed system. Vendors, administrators and developers play
the various roles, to allow the partitioning of technical and domain knowledge.
The vendor provides a technically sound framework and the developers create
domain-specific components; for example, an &#8220;accounting&#8221; component.
The same party can perform one or many roles. The roles defined in the EJB
specification are summarized in the following table:</FONT><BR></P></DIV>
<DIV ALIGN="CENTER"><TABLE BORDER>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>Role</B></FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>Responsibility</B></FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Enterprise Bean Provider</FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The developer responsible for creating
reusable EJB components. These components are packaged into a special jar file
(ejb-jar file).</FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Application Assembler</FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Creates and assembles applications from a
collection of ejb-jar files. This includes writing applications that utilize the
collection of EJBs (e.g., servlets, JSP, Swing etc. etc.).</FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Deployer</FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Takes the collection of ejb-jar files
from the Assembler and/or Bean Provider and deploys them into a run-time
environment: one or more EJB Containers. </FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">EJB Container/Server Provider
</FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Provides a run-time environment and tools
that are used to deploy, administer, and run EJB components.</FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">System Administrator</FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Manages the different components and
services so that they are configured and they interact correctly, as well as
ensuring that the system is up and running.</FONT><BR></P></DIV>
</TD>
</TR>
</TABLE></P></DIV>
<DIV ALIGN="LEFT"><P><A NAME="_Toc466527394"></A><A NAME="_Toc481064906"></A><BR></P></DIV>
<A NAME="Heading571"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
EJB components</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">EJB components are elements of reusable
business logic that adhere to strict standards and design patterns as defined in
the EJB specification. This allows the components to be portable. It also allows
other services&#8212;such as security, caching and distributed
transactions&#8212;to be performed on behalf of the components. An Enterprise
Bean Provider is responsible for developing EJB components.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I246' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I247>
</FONT><BR></P></DIV>
<A NAME="Heading572"></A><FONT FACE = "Verdana"><H4 ALIGN="LEFT">
EJB Container &amp; Server</H4></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The <I>EJB Container</I> is a run-time
environment that contains and runs EJB components and provides a set of standard
services to those components. The EJB Container&#8217;s responsibilities are
tightly defined by the specification to allow for vendor neutrality. The EJB
container provides the low-level &#8220;plumbing&#8221; of EJB, including
distributed transactions, security, lifecycle management of beans, caching,
threading and session management. The EJB Container Provider is responsible for
providing an EJB Container.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I247' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I248>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">An <I>EJB Server</I> is defined as an
Application Server that contains and runs one or more EJB Containers. The EJB
Server Provider is responsible for providing an EJB Server. You can generally
assume that the EJB Container and EJB Server are the same. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I248' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I249>
</FONT><BR></P></DIV>
<A NAME="Heading573"></A><FONT FACE = "Verdana"><H4 ALIGN="LEFT">
Java Naming and Directory Interface (JNDI)</H4></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Java Naming and Directory Interface
(JNDI) is used in Enterprise JavaBeans as the naming service for EJB Components
on the network and other container services such as transactions. JNDI maps very
closely to other naming and directory standards such as CORBA CosNaming and can
actually be implemeted as a wrapper on top of it. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I249' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I250>
</FONT><BR></P></DIV>
<A NAME="Heading574"></A><FONT FACE = "Verdana"><H4 ALIGN="LEFT">
Java Transaction API/Java Transaction Service (JTA/JTS)</H4></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">JTA/JTS is used in Enterprise JavaBeans
as the transactional API. An Enterprise Bean Provider can use the JTS to create
transaction code, although the EJB Container commonly implements transactions in
EJB on the EJB components&#8217; behalf. The deployer can define the
transactional attributes of an EJB component at deployment time. The EJB
Container is responsible for handling the transaction whether it is local or
distributed. The JTS specification is the Java mapping to the CORBA OTS (Object
Transaction Service) 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I250' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I251>
</FONT><BR></P></DIV>
<A NAME="Heading575"></A><FONT FACE = "Verdana"><H4 ALIGN="LEFT">
CORBA and RMI/IIOP</H4></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The EJB specification defines
interoperability with CORBA through compatibility with CORBA protocols. This is
achieved by mapping EJB services such as JTS and JNDI to corresponding CORBA
services and the implementation of RMI on top of the CORBA protocol IIOP. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I251' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I252>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Use of CORBA and RMI/IIOP in Enterprise
JavaBeans is implemented in the EJB Container and is the responsibility of the
EJB Container provider. Use of CORBA and RMI/IIOP in the EJB Container is hidden
from the EJB Component itself. This means that the Enterprise Bean Provider can
write their EJB Component and deploy it into any EJB Container without any
regard of which communication protocol is being used.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I252' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I253>
</FONT><A NAME="_Toc466527395"></A><A NAME="_Toc481064907"></A><BR></P></DIV>
<A NAME="Heading576"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
The pieces of an EJB component</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">An EJB consists of a number of pieces,
including the Bean itself, the implementation of some interfaces, and an
information file. Everything is packaged together into a special jar file.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I253' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I254>
</FONT><A NAME="_Toc466527396"></A><BR></P></DIV>
<A NAME="Heading577"></A><FONT FACE = "Verdana"><H4 ALIGN="LEFT">
Enterprise Bean </H4></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The Enterprise Bean is a Java class that
the Enterprise Bean Provider develops. It implements an Enterprise Bean
interface and provides the implementation of the business methods that the
component is to perform. The class does not implement any authorization,
authentication, multithreading, or transactional code.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I254' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I255>
</FONT><A NAME="_Toc466527397"></A><BR></P></DIV>
<A NAME="Heading578"></A><FONT FACE = "Verdana"><H4 ALIGN="LEFT">
Home interface</H4></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Every Enterprise Bean that is created
must have an associated Home interface. The Home interface is used as a factory
for your EJB. Clients use the Home interface to find an instance of your EJB or
create a new instance of your EJB.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I255' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I256>
</FONT><A NAME="_Toc466527398"></A><BR></P></DIV>
<A NAME="Heading579"></A><FONT FACE = "Verdana"><H4 ALIGN="LEFT">
Remote interface</H4></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The Remote interface is a Java Interface
that reflects the methods of your Enterprise Bean that you wish to expose to the
outside world. The Remote interface plays a similar role to a CORBA IDL
interface. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I256' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I257>
</FONT><A NAME="_Toc466527399"></A><BR></P></DIV>
<A NAME="Heading580"></A><FONT FACE = "Verdana"><H4 ALIGN="LEFT">
Deployment descriptor</H4></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The deployment descriptor is an XML file
that contains information about your EJB. Using XML allows the deployer to
easily change attributes about your EJB. The configurable attributes defined in
the deployment descriptor include:  </FONT><BR></P></DIV>
<UL>
<LI><FONT FACE="Symbol">	</FONT><FONT FACE="Georgia">The Home and Remote
interface names that are required by your
EJB</FONT><LI><FONT FACE="Symbol">	</FONT><FONT FACE="Georgia">The name to
publish into JNDI for your EJBs Home
interface</FONT><LI><FONT FACE="Symbol">	</FONT><FONT FACE="Georgia">Transactional
attributes for each method of your
EJB</FONT><LI><FONT FACE="Symbol">	</FONT><FONT FACE="Georgia">Access Control
Lists for
authentication
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I257' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I258>
</FONT><A NAME="_Toc466527400"></A></UL><A NAME="Heading581"></A><FONT FACE = "Verdana"><H4 ALIGN="LEFT">
EJB-Jar file</H4></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The EJB-Jar file is a normal java jar
file that contains your EJB, Home and Remote interfaces, as well as the
deployment descriptor.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I258' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I259>
</FONT><A NAME="_Toc466527401"></A><A NAME="_Toc481064908"></A><BR></P></DIV>
<A NAME="Heading582"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
EJB operation</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Once you have an EJB-Jar file containing
the Bean, the Home and Remote interfaces, and the deployment descriptor, you can
fit all of the pieces together and in the process understand why the Home and
Remote interfaces are needed and how the EJB Container uses them.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I259' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I260>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The EJB Container implements the Home and
Remote interfaces that are in the EJB-Jar file. As mentioned earlier, the Home
interface provides methods to create and find your EJB. This means that the EJB
Container is responsible for the lifecycle management of your EJB. This level of
indirection allows for optimizations to occur. For example, 5 clients might
simultaneously request the creation of an EJB through a Home Interface, and the
EJB Container would respond by creating only one EJB and sharing it between all
5 clients. This is achieved through the Remote Interface, which is also
implemented by the EJB Container. The implemented Remote object plays the role
of a proxy object to the EJB.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I260' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I261>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">All calls to the EJB are
&#8216;proxied&#8217; through the EJB Container via the Home and Remote
interfaces. This indirection is the reason why the EJB container can control
security and transactional behavior.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I261' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I262>
</FONT><A NAME="_Toc466527403"></A><A NAME="_Toc481064909"></A><BR></P></DIV>
<A NAME="Heading583"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Types of EJBs</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The Enterprise JavaBeans specification
defines different types of EJBs that have different characteristics and
behaviors. Two categories of EJBs have been defined in the specification:
<I>Session Beans</I> and <I>Entity Beans</I>, and each categoriy has variations.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I262' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I263>
</FONT><A NAME="_Toc466527404"></A><BR></P></DIV>
<A NAME="Heading584"></A><FONT FACE = "Verdana"><H4 ALIGN="LEFT">
Session Beans</H4></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Session Beans are used to represent
Use-Cases or Workflow on behalf of a client. They represent operations on
persistent data, but not the persistent data itself. There are two types of
Session Beans, <I>Stateless</I> and <I>Stateful</I>. All Session Beans must
implement the <B>javax.ejb.SessionBean</B> interface. The EJB Container governs
the life of a Session Bean.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I263' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I264>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>Stateless Session Beans </B>are the
simplest type of EJB component to implement. They do not maintain any
conversational state with clients between method invocations so they are easily
reusable on the server side and because they can be cached, they scale well on
demand. When using Stateless Session Beans, all state must be stored outside of
the EJB. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I264' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I265>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>Stateful Session Beans </B>maintain
state between invocations. They have a one-to-one logical mapping to a client
and can maintain state within themselves. The EJB Container is responsible for
pooling and caching of Stateful Session Beans, which is achieved through
<I>Passivation</I> and <I>Activation</I>. If the EJB Container crashes, data for
all Stateful Session Beans could be lost. Some high-end EJB Containers provide
recovery for Stateful Session Beans.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I265' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I266>
</FONT><A NAME="_Toc466527405"></A><BR></P></DIV>
<A NAME="Heading585"></A><FONT FACE = "Verdana"><H4 ALIGN="LEFT">
Entity Beans</H4></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Entity Beans are components that
represent persistent data and behavior of this data. Entity Beans can be shared
among multiple clients, the same way that data in a database can be shared. The
EJB Container is responsible for caching Entity Beans and for maintaining the
integrity of the Entity Beans. The life of an Entity Bean outlives the EJB
Container, so if an EJB Container crashes, the Entity Bean is still expected to
be available when the EJB Container again becomes available.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I266' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I267>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">There are two types of Entity Beans:
those with Container Managed persistence and those with Bean-Managed
persistence. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I267' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I268>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>Container Managed Persistence
(CMP)</B>. A CMP Entity Bean has its persistence implemented on its behalf by
the EJB Container. Through attributes specified in the deployment descriptor,
the EJB Container will map the Entity Bean&#8217;s attributes to some persistent
store (usually&#8212;but not always&#8212;a database). CMP reduces the
development time for the EJB, as well as dramatically reducing the amount of
code required. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I268' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I269>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia"><B>Bean Managed Persistence (BMP)</B>. A
BMP Entity Bean has its persistence implemented by the Enterprise Bean Provider.
The Enterprise Bean Provider is responsible for implementing the logic required
to create a new EJB, update some attributes of the EJBS, delete an EJB and find
an EJB from persistent store. This usually involves writing JDBC code to
interact with a database or other persistent store. With BMP, the developer is
in full control of how the Entity Bean persistence is managed.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I269' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I270>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">BMP also gives flexibility where a CMP
implementation may not be available. For example, if you wanted to create an EJB
that wrapped some code on an existing mainframe system, you could write your
persistence using CORBA.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I270' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I271>
</FONT><A NAME="_Toc476631340"></A><A NAME="_Toc481064910"></A><BR></P></DIV>
<A NAME="Heading586"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Developing an EJB</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">As an example, the &#8220;Perfect
Time&#8221; example from the previous RMI section will be implemented as an EJB
component. The example will be a simple Stateless Session Bean. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I271' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I272>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">As mentioned earlier, EJB components
consist of at least one class (the EJB) and two interfaces: the Remote and Home
interfaces. When you create a Remote interface for an EJB , you must follow
these guidelines: 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I272' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I273>
</FONT><BR></P></DIV>
<OL>
<LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">The remote interface must
be <B>public</B>.
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">The remote
interface must extend the interface <B>javax.ejb.EJBObject</B>.
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Each method in the
remote interface must declare <B>java.rmi.RemoteException</B> in its
<B>throws</B> clause in addition to any application-specific exceptions.
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Any object passed
as an argument or return value (either directly or embedded within a local
object) must be a valid RMI-IIOP data type (this includes other EJB
objects).</FONT></OL>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE>Here is the simple remote <font color=#0000ff>interface</font> <font color=#0000ff>for</font> the PerfectTime EJB:
<font color=#009900>//: c15:ejb:PerfectTime.java</font>
<font color=#009900>//# You must install the J2EE Java Enterprise </font>
<font color=#009900>//# Edition from java.sun.com and add j2ee.jar</font>
<font color=#009900>//# to your CLASSPATH in order to compile</font>
<font color=#009900>//# this file. See details at java.sun.com.</font>
<font color=#009900>// Remote Interface of PerfectTimeBean</font>
<font color=#0000ff>import</font> java.rmi.*;
<font color=#0000ff>import</font> javax.ejb.*;

<font color=#0000ff>public</font> <font color=#0000ff>interface</font> PerfectTime <font color=#0000ff>extends</font> EJBObject {
  <font color=#0000ff>public</font> <font color=#0000ff>long</font> getPerfectTime() 
    <font color=#0000ff>throws</font> RemoteException;
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The Home interface is the factory where
the component will be created. It can define <I>create</I> methods, to create
instances of EJBs, or <I>finder</I> methods, which locate existing EJBs and are
used for Entity Beans only. When you create a Home interface for an EJB , you
must follow these guidelines:</FONT><BR></P></DIV>
<OL>
<LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">The Home interface must be
<B>public</B>. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I273' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I274>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">The
Home interface must extend the interface <B>javax.ejb.EJBHome</B>. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I274' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I275>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Each
<I>create</I> method in the Home interface must declare
<B>java.rmi.RemoteException</B> in its <B>throws</B> clause as well as a
<B>javax.ejb.CreateException</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I275' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I276>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">The
return value of a <I>create</I> method must be a Remote Interface.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I276' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I277>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">The
return value of a <I>finder</I> method (Entity Beans only) must be a Remote
Interface or <B>java.util.Enumeration</B> or <B>java.util.Collection</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I277' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I278>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Any
object passed as an argument (either directly or embedded within a local object)
must be a valid RMI-IIOP data type (this includes other EJB objects)

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I278' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I279>
</FONT></OL><DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The
standard naming convention for Home interfaces is to take the Remote interface
name and append &#8220;Home&#8221; to the end. Here is the Home interface for
the PerfectTime EJB: 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I279' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I280>
</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c15:ejb:PerfectTimeHome.java</font>
<font color=#009900>// Home Interface of PerfectTimeBean.</font>
<font color=#0000ff>import</font> java.rmi.*;
<font color=#0000ff>import</font> javax.ejb.*;

<font color=#0000ff>public</font> <font color=#0000ff>interface</font> PerfectTimeHome <font color=#0000ff>extends</font> EJBHome {
  <font color=#0000ff>public</font> PerfectTime create() 
    <font color=#0000ff>throws</font> CreateException, RemoteException;
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You can now implement the business logic.
When you create your EJB implementation class, you must follow these guidelines,
(note that you should consult the EJB specification for a complete list of
guidelines when developing Enterprise JavaBeans):

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I280' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I281>
</FONT><BR></P></DIV>
<OL>
<LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">The class must be
<B>public</B>. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I281' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I282>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">The
class must implement an EJB interface (either <B>javax.ejb.SessionBean </B>or<B>
javax.ejb.EntityBean</B>). 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I282' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I283>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">The
class should define methods that map directly to the methods in the Remote
interface. Note that the class does not implement the Remote interface; it
mirrors the methods in the Remote interface but does <I>not</I> throw
<B>java.rmi.RemoteException</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I283' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I284>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Define
one or more <B>ejbCreate(&#160;)</B> methods to initialize your EJB.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I284' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I285>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">The
return value and arguments of all methods must be valid RMI-IIOP data types.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I285' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I286>
</FONT></OL>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c15:ejb:PerfectTimeBean.java</font>
<font color=#009900>// Simple Stateless Session Bean </font>
<font color=#009900>// that returns current system time.</font>
<font color=#0000ff>import</font> java.rmi.*;
<font color=#0000ff>import</font> javax.ejb.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> PerfectTimeBean 
  <font color=#0000ff>implements</font> SessionBean {
  <font color=#0000ff>private</font> SessionContext sessionContext;
  <font color=#009900>//return current time</font>
  <font color=#0000ff>public</font> <font color=#0000ff>long</font> getPerfectTime() { 
     <font color=#0000ff>return</font> System.currentTimeMillis();
  }
  <font color=#009900>// EJB methods</font>
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> ejbCreate() 
  <font color=#0000ff>throws</font> CreateException {}
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> ejbRemove() {}
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> ejbActivate() {}
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> ejbPassivate() {}
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> 
  setSessionContext(SessionContext ctx) {
    sessionContext = ctx;
  }
}<font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Because this is a simple example, the EJB
methods (<B>ejbCreate(&#160;)</B>, <B>ejbRemove(&#160;)</B>,
<B>ejbActivate(&#160;)</B>, <B>ejbPassivate(&#160;)</B> ) are all empty. These
methods are invoked by the EJB Container and are used to control the state of
the component. The <B>setSessionContext(&#160;)</B> method passes a
<B>javax.ejb.SessionContext</B> object which contains information about the
component&#8217;s context, such as the current transaction and security
information. 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I286' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I287>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">After we have created the Enterprise
JavaBean, we then need to create a deployment descriptor. The deployment
descriptor is an XML file that describes the EJB component. The deployment
descriptor should be stored in a file called <B>ejb-jar.xml</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I287' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I288>
</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//:! c15:ejb:ejb-jar.xml</font>
&lt;?xml version=<font color=#004488>"1.0"</font> encoding=<font color=#004488>"Cp1252"</font>?&gt;
&lt;!DOCTYPE ejb-jar PUBLIC '-<font color=#009900>//Sun Microsystems, Inc.//DTD Enterprise JavaBeans 1.1//EN' 'http://java.sun.com/j2ee/dtds/ejb-jar_1_1.dtd'&gt;</font>

&lt;ejb-jar&gt;
  &lt;description&gt;Example <font color=#0000ff>for</font> Chapter 15&lt;/description&gt;
  &lt;display-name&gt;&lt;/display-name&gt;
  &lt;small-icon&gt;&lt;/small-icon&gt;
  &lt;large-icon&gt;&lt;/large-icon&gt;
  &lt;enterprise-beans&gt;
    &lt;session&gt;
      &lt;ejb-name&gt;PerfectTime&lt;/ejb-name&gt;
      &lt;home&gt;PerfectTimeHome&lt;/home&gt;
      &lt;remote&gt;PerfectTime&lt;/remote&gt;
      &lt;ejb-<font color=#0000ff>class</font>&gt;PerfectTimeBean&lt;/ejb-<font color=#0000ff>class</font>&gt;
      &lt;session-type&gt;Stateless&lt;/session-type&gt;
      &lt;transaction-type&gt;Container&lt;/transaction-type&gt;
    &lt;/session&gt;
  &lt;/enterprise-beans&gt;
  &lt;ejb-client-jar&gt;&lt;/ejb-client-jar&gt;
&lt;/ejb-jar&gt;
<font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">You can see the Component, the Remote
interface and the Home interface defined inside the <B>&lt;session&gt; </B>tag
of this deployment descriptor. Deployment descriptors may be automatically
generated using EJB development tools.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I288' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I289>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Along with the standard <B>ejb-jar.xml
</B>deployment descriptor, the EJB specification states that any vendor specific
tags should be stored in a separate file. This is to achieve high portability
between components and different brands of EJB containers.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I289' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I290>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The files must be archived inside a
standard Java Archive (JAR) file. The deployment descriptors should be placed
inside the <B>/META-INF </B>sub-directory of the Jar file.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I290' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I291>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Once the EJB component is defined in the
deployment descriptor, the deployer should then deploy the EJB component into
the EJB Container. At the time of this writing, the deployment process was quite
&#8220;GUI intensive&#8221; and specific to each individual EJB Container, so
this overview does not document that process. Every EJB Container, however will
have a documented process for deploying an EJB.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I291' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I292>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Because an EJB component is a distributed
object, the deployment process should also create some client stubs for calling
the EJB component. These classes should be placed on the classpath of the client
application. Because EJB components can be implemented on top of RMI-IIOP
(CORBA) or RMI-JRMP, the stubs generated could vary between EJB Containers;
nevertheless they are generated classes.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I292' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I293>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">When a client program wishes to invoke an
EJB, it must look up the EJB component inside JNDI and obtain a reference to the
home interface of the EJB component. The Home interface is used to create an
instance of the EJB.  
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I293' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I294>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">In this example the client program is a
simple Java program, but you should remember that it could just as easily be a
servlet, a JSP or even a CORBA or RMI distributed object.</FONT><BR></P></DIV>

<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: c15:ejb:PerfectTimeClient.java</font>
<font color=#009900>// Client program for PerfectTimeBean</font>

<font color=#0000ff>public</font> <font color=#0000ff>class</font> PerfectTimeClient {
<font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) 
<font color=#0000ff>throws</font> Exception {
  <font color=#009900>// Get a JNDI context using </font>
  <font color=#009900>// the JNDI Naming service:</font>
  javax.naming.Context context = 
    <font color=#0000ff>new</font> javax.naming.InitialContext();
  <font color=#009900>// Look up the home interface in the </font>
  <font color=#009900>// JNDI Naming service:</font>
  Object ref = context.lookup(<font color=#004488>"perfectTime"</font>);
  <font color=#009900>// Cast the remote object to the home interface:</font>
  PerfectTimeHome home = (PerfectTimeHome)
    javax.rmi.PortableRemoteObject.narrow(
      ref, PerfectTimeHome.<font color=#0000ff>class</font>);
  <font color=#009900>// Create a remote object from the home interface:</font>
  PerfectTime pt = home.create();
  <font color=#009900>// Invoke  getPerfectTime()</font>
  System.out.println(
    <font color=#004488>"Perfect Time EJB invoked, time is: "</font> + 
    pt.getPerfectTime() );
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The sequence of the example is explained
in the comments. Note the use of the <B>narrow(&#160;)</B> method to perform a
kind of casting of the object before a Java cast is performed. This is very
similar to what happens in CORBA. Also note that the Home object becomes a
factory for <B>PerfectTime</B> objects.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I294' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I295>
</FONT><A NAME="_Toc481064911"></A><BR></P></DIV>
<A NAME="Heading587"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
EJB summary</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The Enterprise JavaBeans specification is
a dramatic step forward in the standardization and simplification of distributed
object computing. It is a major piece of the Java 2 Enterprise Edition (J2EE)
platform and is receiving much support from the distributed object community.
Many tools are currently available or will be available in the near future to
help accelerate the development of EJB components.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I295' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I296>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This overview was only a brief tour of
EJBs. For more information about the EJB specification you should see the
official Enterprise JavaBeans home page at <I>java.sun.com/products/ejb/,</I>
where you can download the latest specification and the J2EE reference
implementation. These can be used to develop and deploy your own EJB components.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I296' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I297>
</FONT><A NAME="_Toc481064912"></A><BR></P></DIV>
<A NAME="Heading588"></A><FONT FACE = "Verdana"><H2 ALIGN="LEFT">
Jini: distributed services<BR><A NAME="Index2213"></A></H2></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">This
section</FONT><A NAME="fnB78" HREF="#fn78">[78]</A><FONT FACE="Georgia"> gives
an overview of Sun Microsystems&#8217;s Jini technology. It describes some Jini
nuts and bolts and shows how Jini&#8217;s architecture helps to raise the level
of abstraction in distributed systems programming, effectively turning network
programming into object-oriented programming. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I297' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I298>
</FONT><A NAME="_Toc481064913"></A><BR></P></DIV>
<A NAME="Heading589"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Jini in context</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Traditionally, operating systems have
been designed with the assumption that a computer will have a processor, some
memory, and a disk. When you boot a computer, the first thing it does is look
for a disk. If it doesn&#8217;t find a disk, it can&#8217;t function as a
computer. Increasingly, however, computers are appearing in a different guise:
as embedded devices that have a processor, some memory, and a network
connection&#8212;but no disk. The first thing a cell phone does when you boot it
up, for example, is look for the telephone network. If it doesn&#8217;t find the
network, it can&#8217;t function as a cell phone. This trend in the hardware
environment, from disk-centric to network-centric, will affect how we organize
the software&#8212;and that&#8217;s where Jini comes in. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I298' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I299>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Jini is an attempt to rethink computer
architecture, given the rising importance of the network and the proliferation
of processors in devices that have no disk drive. These devices, which will come
from many different vendors, will need to interact over a network. The network
itself will be very dynamic&#8212;devices and services will be added and removed
regularly. Jini provides mechanisms to enable smooth adding, removal, and
finding of devices and services on the network. In addition, Jini provides a
programming model that makes it easier for programmers to get their devices
talking to each other.  
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I299' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I300>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Building on top of Java, object
serialization, and RMI (which together enable objects to move around the network
from virtual machine to virtual machine) Jini attempts to extend the benefits of
object-oriented programming to the network. Instead of requiring device vendors
to agree on the network protocols through which their devices can interact, Jini
enables the devices to talk to each other through interfaces to objects.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I300' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I301>
</FONT><A NAME="_Toc481064914"></A><BR></P></DIV>
<A NAME="Heading590"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
What is Jini?</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Jini is a set of APIs and network
protocols that can help you build and deploy distributed systems that are
organized as <I>federations of services</I>. A <I>service</I> can be anything
that sits on the network and is ready to perform a useful function. Hardware
devices, software, communications channels&#8212;even human users
themselves&#8212;can be services. A Jini-enabled disk drive, for example, could
offer a &#8220;storage&#8221; service. A Jini-enabled printer could offer a
&#8220;printing&#8221; service. A federation of services, then, is a set of
services, currently available on the network, that a client (meaning a program,
service, or user) can bring together to help it accomplish some goal. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I301' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I302>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">To perform a task, a client enlists the
help of services. For example, a client program might upload pictures from the
image storage service in a digital camera, download the pictures to a persistent
storage service offered by a disk drive, and send a page of thumbnail-sized
versions of the images to the printing service of a color printer. In this
example, the client program builds a distributed system consisting of itself,
the image storage service, the persistent storage service, and the
color-printing service. The client and services of this distributed system work
together to perform the task: to offload and store images from a digital camera
and print a page of thumbnails. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I302' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I303>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The idea behind the word <I>federation
</I>is that the Jini view of the network doesn&#8217;t involve a central
controlling authority. Because no one service is in charge, the set of all
services available on the network form a federation&#8212;a group composed of
equal peers. Instead of a central authority, Jini&#8217;s run-time
infrastructure merely provides a way for clients and services to find each other
(via a lookup service, which stores a directory of currently available
services). After services locate each other, they are on their own. The client
and its enlisted services perform their task independently of the Jini run-time
infrastructure. If the Jini lookup service crashes, any distributed systems
brought together via the lookup service before it crashed can continue their
work. Jini even includes a network protocol that clients can use to find
services in the absence of a lookup service. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I303' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I304>
</FONT><A NAME="_Toc481064915"></A><BR></P></DIV>
<A NAME="Heading591"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
How Jini works</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Jini defines a <I>run-time infrastructure
</I>that resides on the network and provides mechanisms that enable you to add,
remove, locate, and access services. The run-time infrastructure resides in
three places: in lookup services that sit on the network, in the service
providers (such as Jini-enabled devices), and in clients. <I>Lookup services
</I>are the central organizing mechanism for Jini-based systems. When new
services become available on the network, they register themselves with a lookup
service. When clients wish to locate a service to assist with some task, they
consult a lookup service. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I304' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I305>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The run-time infrastructure uses one
network-level protocol, called <I>discovery</I>, and two object-level protocols,
called <I>join </I>and <I>lookup</I>. Discovery enables clients and services to
locate lookup services. Join enables a service to register itself in a lookup
service. Lookup enables a client to query for services that can help accomplish
its goals. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I305' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I306>
</FONT><A NAME="_Toc481064916"></A><BR></P></DIV>
<A NAME="Heading592"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
The discovery process</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Discovery works like this: Imagine you
have a Jini-enabled disk drive that offers a persistent storage service. As soon
as you connect the drive to the network, it broadcasts a <I>presence
announcement </I>by dropping a multicast packet onto a well-known port. Included
in the presence announcement is an IP address and port number where the disk
drive can be contacted by a lookup service. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I306' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I307>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Lookup services monitor the well-known
port for presence announcement packets. When a lookup service receives a
presence announcement, it opens and inspects the packet. The packet contains
information that enables the lookup service to determine whether or not it
should contact the sender of the packet. If so, it contacts the sender directly
by making a TCP connection to the IP address and port number extracted from the
packet. Using RMI, the lookup service sends an object, called a <I>service
registrar</I>, across the network to the originator of the packet. The purpose
of the service registrar object is to facilitate further communication with the
lookup service. By invoking methods on this object, the sender of the
announcement packet can perform join and lookup on the lookup service. In the
case of the disk drive, the lookup service would make a TCP connection to the
disk drive and would send it a service registrar object, through which the disk
drive would then register its persistent storage service via the join process.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I307' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I308>
</FONT><A NAME="_Toc481064917"></A><BR></P></DIV>
<A NAME="Heading593"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
The join process</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Once a service provider has a service
registrar object, the end product of discovery, it is ready to do a
join&#8212;to become part of the federation of services that are registered in
the lookup service. To do a join, the service provider invokes the
<B>register(&#160;) </B>method on the service registrar object, passing as a
parameter an object called a service item, a bundle of objects that describe the
service. The <B>register(&#160;)</B> method sends a copy of the service item up
to the lookup service, where the service item is stored. Once this has
completed, the service provider has finished the join process: its service has
become registered in the lookup service. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I308' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I309>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">The service item is a container for
several objects, including an object called a <I>service object</I>, which
clients can use to interact with the service. The service item can also include
any number of <I>attributes</I>, which can be any object. Some potential
attributes are icons, classes that provide GUIs for the service, and objects
that give more information about the service. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I309' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I310>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Service objects usually implement one or
more interfaces through which clients interact with the service. For example, a
lookup service is a Jini service, and its service object is the service
registrar. The <B>register(&#160;)</B> method invoked by service providers
during join is declared in the <B>ServiceRegistrar</B> interface (a member of
the <B>net.jini.core.lookup</B> package), which all service registrar objects
implement. Clients and service providers talk to the lookup service through the
service registrar object by invoking methods declared in the
<B>ServiceRegistrar</B> interface. Likewise, a disk drive would provide a
service object that implemented some well-known storage service interface.
Clients would look up and interact with the disk drive by this storage service
interface. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I310' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I311>
</FONT><A NAME="_Toc481064918"></A><BR></P></DIV>
<A NAME="Heading594"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
The lookup process</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Once a service has registered with a
lookup service via the join process, that service is available for use by
clients who query that lookup service. To build a distributed system of services
that will work together to perform some task, a client must locate and enlist
the help of the individual services. To find a service, clients query lookup
services via a process called <I>lookup</I>. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I311' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I312>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">To perform a lookup, a client invokes the
<B>lookup</B>(&#160;) method on a service registrar object. (A client, like a
service provider, gets a service registrar through the previously-described
process of discovery.) The client passes as an argument to <B>lookup(&#160;)</B>
a <I>service template</I>, an object that serves as search criteria for the
query. The service template can include a reference to an array of <B>Class</B>
objects. These <B>Class</B> objects indicate to the lookup service the Java type
(or types) of the service object desired by the client. The service template can
also include a <I>service ID</I>, which uniquely identifies a service, and
attributes, which must exactly match the attributes uploaded by the service
provider in the service item. The service template can also contain wildcards
for any of these fields. A wildcard in the service ID field, for example, will
match any service ID. The <B>lookup(&#160;) </B>method sends the service
template to the lookup service, which performs the query and sends back zero to
any matching service objects. The client gets a reference to the matching
service objects as the return value of the <B>lookup(&#160;)</B> method. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I312' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I313>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">In the general case, a client looks up a
service by Java type, usually an interface. For example, if a client needed to
use a printer, it would compose a service template that included a <B>Class
</B>object for a well-known interface to printer services. All printer services
would implement this well-known interface. The lookup service would return a
service object (or objects) that implemented this interface. Attributes can be
included in the service template to narrow the number of matches for such a
type-based search. The client would use the printer service by invoking methods
from the well-known printer service interface on the service object. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I313' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I314>
</FONT><A NAME="_Toc481064919"></A><BR></P></DIV>
<A NAME="Heading595"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Separation of interface and implementation</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Jini&#8217;s architecture brings
object-oriented programming to the network by enabling network services to take
advantage of one of the fundamentals of objects: the separation of interface and
implementation. For example, a service object can grant clients access to the
service in many ways. The object can actually represent the entire service,
which is downloaded to the client during lookup and then executed locally.
Alternatively, the service object can serve merely as a proxy to a remote
server. Then when the client invokes methods on the service object, it sends the
requests across the network to the server, which does the real work. A third
option is for the local service object and a remote server to each do part of
the work.  
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I314' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I315>
</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">One important consequence of Jini&#8217;s
architecture is that the network protocol used to communicate between a proxy
service object and a remote server does not need to be known to the client. As
illustrated in the figure below, the network protocol is part of the
service&#8217;s implementation. This protocol is a private matter decided upon
by the developer of the service. The client can communicate with the service via
this private protocol because the service injects some of its own code (the
service object) into the client&#8217;s address space. The injected service
object could communicate with the service via RMI, CORBA, DCOM, some home-brewed
protocol built on top of sockets and streams, or anything else. The client
simply doesn&#8217;t need to care about network protocols, because it can talk
to the well-known interface that the service object implements. The service
object takes care of any necessary communication on the network. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I315' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I316>
</FONT><BR></P></DIV>
<DIV ALIGN="CENTER"><FONT FACE="Georgia"><IMG SRC="TIJ229.gif"></FONT><BR></P></DIV>
<DIV ALIGN="CENTER"><FONT FACE="Georgia"><B>The client talks to the service
through a well-known interface</B></FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Different implementations of the same
service interface can use completely different approaches and network protocols.
A service can use specialized hardware to fulfill client requests, or it can do
all its work in software. In fact, the implementation approach taken by a single
service can evolve over time. The client can be sure it has a service object
that understands the current implementation of the service, because the client
receives the service object (by way of the lookup service) from the service
provider itself. To the client, a service looks like the well-known interface,
regardless of how the service is implemented. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I316' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I317>
</FONT><A NAME="_Toc481064920"></A><BR></P></DIV>
<A NAME="Heading596"></A><FONT FACE = "Verdana"><H3 ALIGN="LEFT">
Abstracting distributed systems</H3></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Jini attempts to raise the level of
abstraction for distributed systems programming, from the network protocol level
to the object interface level. In the emerging proliferation of embedded devices
connected to networks, many pieces of a distributed system may come from
different vendors. Jini makes it unnecessary for vendors of devices to agree on
network level protocols that allow their devices to interact. Instead, vendors
must agree on Java interfaces through which their devices can interact. The
processes of discovery, join, and lookup, provided by the Jini run-time
infrastructure, enable devices to locate each other on the network. Once they
locate each other, devices can communicate with each other through Java
interfaces.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I317' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I318>
</FONT><A NAME="_Toc481064921"></A><BR></P></DIV>
<A NAME="Heading597"></A><FONT FACE = "Verdana"><H2 ALIGN="LEFT">
Summary</H2></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Along with Jini for local device
networks, this chapter has introduced some, but not all, of the components that
Sun refers to as J2EE: the <I>Java 2 Enterprise Edition</I>. The goal of J2EE is
to <STRIKE>build </STRIKE><U>create </U>a set of tools that allows the Java
developer to build server-based applications <STRIKE>much </STRIKE>more
quickly<U> than before</U>, and in a platform-independent way. It&#8217;s not
only difficult and time-consuming to build such applications, but it&#8217;s
especially hard to build them so that they can be easily ported to other
platforms, and also to keep the business logic separated from the underlying
details of the implementation. J2EE provides a framework to assist in creating
server-based applications; these applications are in demand now, and that demand
appears to be increasing.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I318' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I319>
</FONT><A NAME="_Toc375545500"></A><A NAME="_Toc481064922"></A><BR></P></DIV>
<A NAME="Heading598"></A><FONT FACE = "Verdana"><H2 ALIGN="LEFT">
Exercises</H2></FONT>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia" SIZE=2>Solutions to selected exercises
can be found in the electronic document <I>The Thinking in Java Annotated
Solution Guide</I>, available for a small fee from
<I>www.BruceEckel.com</I>.</FONT><BR></P></DIV>
<OL>
<LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Compile and run the
<B>JabberServer</B> and <B>JabberClient</B> programs in this chapter. Now edit
the files to remove all of the buffering for the input and output, then compile
and run them again to observe the results.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I319' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I320>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Create
a server that asks for a password, then opens a file and sends the file over the
network connection. Create a client that connects to this server, gives the
appropriate password, then captures and saves the file. Test the pair of
programs on your machine using the <B>localhost</B> (the local loopback IP
address <B>127.0.0.1</B> produced by calling
<B>InetAddress.getByName(null)</B>).

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I320' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I321>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Modify
the server in Exercise 2 so that it uses multithreading to handle multiple
clients.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I321' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I322>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Modify
<B>JabberClient.java</B> so that output flushing doesn&#8217;t occur and observe
the effect. 

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I322' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I323>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Modify
<B>MultiJabberServer</B> so that it uses <I>thread pooling</I>. Instead of
throwing away a thread each time a client disconnects, the thread should put
itself into an &#8220;available pool&#8221; of threads. When a new client wants
to connect, the server will look in the available pool for a thread to handle
the request, and if one isn&#8217;t available, make a new one. This way the
number of threads necessary will naturally grow to the required quantity. The
value of thread pooling is that it doesn&#8217;t require the overhead of
creating and destroying a new thread for each new client.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I323' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I324>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Starting
with <B>ShowHTML.java</B>, create an applet that is a password-protected gateway
to a particular portion of your Web site.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I324' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I325>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Modify
<B>CIDCreateTables.java</B> so that it reads the SQL strings from a text file
instead of <B>CIDSQL</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I325' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I326>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Configure
your system so that you can successfully execute <B>CIDCreateTables.java</B> and
<B>LoadDB.java</B>.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I326' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I327>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Modify
<B>ServletsRule.java</B> by overriding the <B>destroy(&#160;)</B> method to save
the value of <B>i</B> to a file, and and the <B>init(&#160;)</B> method to
restore the value. Demonstrate that it works by rebooting the servlet container.
If you do not have an existing servlet container, you will need to download,
install, and run Tomcat from <A NAME="BBB"></A><I>jakarta.apache.org</I> in
order to run servlets.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I327' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I328>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Create
a servlet that adds a cookie to the response object, thereby storing it on the
client&#8217;s site. Add code to the servlet that retrieves and displays the
cookie. If you do not have an existing servlet container, you will need to
download, install, and run Tomcat from <I>jakarta.apache.org</I> in order to run
servlets.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I328' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I329>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Create
a servlet that uses a <B>Session</B> object to store session information of your
choosing. In the same servlet, retrieve and display that session information. If
you do not have an existing servlet container, you will need to download,
install, and run Tomcat from <I>jakarta.apache.org</I> in order to run servlets.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I329' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I330>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Create
a servlet that changes the inactive interval of a session to 5 seconds by
calling <B>getMaxInactiveInterval(&#160;)</B>. Test to see that the session does
indeed expire after 5 seconds. If you do not have an existing servlet container,
you will need to download, install, and run Tomcat from
<I>jakarta.apache.org</I> in order to run servlets.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I330' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I331>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Create
a JSP page that prints a line of text using the &lt;H1&gt; tag. Set the color of
this text randomly, using Java code embedded in the JSP page. If you do not have
an existing JSP container, you will need to download, install, and run Tomcat
from <I>jakarta.apache.org</I> in order to run JSPs.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I331' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I332>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Modify
the maximum age value in <B>Cookies.jsp</B> and observe the behavior under two
different browsers. Also note the difference between just re-visiting the page,
and shutting down and restarting the browser. If you do not have an existing JSP
container, you will need to download, install, and run Tomcat from
<I>jakarta.apache.org</I> in order to run JSPs.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I332' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I333>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">Create
a JSP with a field that allows the user to enter the session expiration time and
and a second field that holds data that is stored in the session. The submit
button refreshes the page and fetches the current expiration time and session
data and puts them in as default values of the aforementioned fields. If you do
not have an existing JSP container, you will need to download, install, and run
Tomcat from <I>jakarta.apache.org</I> in order to run JSPs.

</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I333' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

<backtalk:display ID=TIJ3_CHAPTER15_I334>
</FONT><LI><FONT FACE="Verdana">	</FONT><FONT FACE="Georgia">(More
challenging) Take the <B>VLookup.java</B> program and modify it so that when you
click on the resulting name it automatically takes that name and copies it to
the clipboard (so you can simply paste it into your email). You&#8217;ll need to
look back at Chapter 13 to remember how to use the clipboard in
JFC.<A NAME="Chapter_13"></A> 
</backtalk:display>
[&nbsp;<a href='http://www.mindview.net/backtalk/CommentServlet?ID=TIJ3_CHAPTER15_I334' 
  target="_blank">Add&nbsp;Comment</a>&nbsp;]

</FONT></OL>
<HR><DIV ALIGN="LEFT"><P><A NAME="fn72" HREF="#fnB72">[72]</A><FONT FACE="Georgia" SIZE=2>
This means a maximum of just over four billion numbers, which is rapidly running
out. The new standard for IP addresses will use a 128-bit number, which should
produce enough unique IP addresses for the foreseeable future.</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><A NAME="fn73" HREF="#fnB73">[73]</A><FONT FACE="Georgia" SIZE=2>
Created by Dave Bartlett.</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><A NAME="fn74" HREF="#fnB74">[74]</A><FONT FACE="Georgia" SIZE=2>
Dave Bartlett was instrumental in the development of this material, and also the
JSP section.</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><A NAME="fn75" HREF="#fnB75">[75]</A><FONT FACE="Georgia" SIZE=2>
A primary tenet of Extreme Programming (XP). See
<I>www.xprogramming.com</I>.</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><A NAME="fn76" HREF="#fnB76">[76]</A><FONT FACE="Georgia" SIZE=2>
Many brain cells died in agony to discover this information.</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><A NAME="fn77" HREF="#fnB77">[77]</A><FONT FACE="Georgia" SIZE=2>
This section was contributed by Robert Castaneda, with help from Dave
Bartlett.</FONT><BR></P></DIV>
<DIV ALIGN="LEFT"><P><A NAME="fn78" HREF="#fnB78">[78]</A><FONT FACE="Georgia" SIZE=2>
This section was contributed by Bill Venners (www.artima.com).</FONT><BR></P></DIV>

<DIV ALIGN="CENTER">
    <FONT FACE="Verdana" size = "-1">
     [ <a href="Chap14.htm">Previous Chapter</a> ] 
    [ <a href="SimpCont.htm">Short TOC</a> ] 
    [ <a href="Contents.htm">Table of Contents</a> ] 
    [ <a href="DocIdx.htm">Index</a> ]
     [ <a href="AppendA.htm">Next Chapter</a> ] 
    </FONT>
    <BR>
 Last Update:05/21/2001</P></DIV>

</BODY>

</HTML>
